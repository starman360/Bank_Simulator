
Proj3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  08008f2c  08008f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009298  08009298  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009298  08009298  00019298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092a0  080092a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092a0  080092a0  000192a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092a4  080092a4  000192a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080092a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002894  20000074  0800931c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002908  0800931c  00022908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa1d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d08  00000000  00000000  0003fac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c8  00000000  00000000  000437d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001618  00000000  00000000  00044f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a55c  00000000  00000000  000465b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013e90  00000000  00000000  00070b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fda8c  00000000  00000000  0008499c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00182428  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066fc  00000000  00000000  001824a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f14 	.word	0x08008f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008f14 	.word	0x08008f14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_Init+0x3c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <HAL_Init+0x3c>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	f000 f8dd 	bl	8000f82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f007 fb2d 	bl	8008428 <HAL_InitTick>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	e001      	b.n	8000dde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dda:	f007 fa91 	bl	8008300 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dde:	79fb      	ldrb	r3, [r7, #7]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40022000 	.word	0x40022000

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x20>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <HAL_IncTick+0x1c>)
 8000dfc:	6013      	str	r3, [r2, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	20002778 	.word	0x20002778
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20002778 	.word	0x20002778

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff4c 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000faa:	f7ff ff61 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000fae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f7ff ffb1 	bl	8000f1c <NVIC_EncodePriority>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff80 	bl	8000ec8 <__NVIC_SetPriority>
}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff54 	bl	8000e8c <__NVIC_EnableIRQ>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d005      	beq.n	8001010 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2204      	movs	r2, #4
 8001008:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e029      	b.n	8001064 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 020e 	bic.w	r2, r2, #14
 800101e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	f003 021c 	and.w	r2, r3, #28
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
    }
  }
  return status;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107e:	e17f      	b.n	8001380 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 8171 	beq.w	800137a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d00b      	beq.n	80010b8 <HAL_GPIO_Init+0x48>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d007      	beq.n	80010b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ac:	2b11      	cmp	r3, #17
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b12      	cmp	r3, #18
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	f003 0201 	and.w	r2, r3, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b03      	cmp	r3, #3
 8001124:	d118      	bne.n	8001158 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800112c:	2201      	movs	r2, #1
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	f003 0201 	and.w	r2, r3, #1
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x128>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b12      	cmp	r3, #18
 8001196:	d123      	bne.n	80011e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	6939      	ldr	r1, [r7, #16]
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0203 	and.w	r2, r3, #3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80ac 	beq.w	800137a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	4b5e      	ldr	r3, [pc, #376]	; (800139c <HAL_GPIO_Init+0x32c>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	4a5d      	ldr	r2, [pc, #372]	; (800139c <HAL_GPIO_Init+0x32c>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6613      	str	r3, [r2, #96]	; 0x60
 800122e:	4b5b      	ldr	r3, [pc, #364]	; (800139c <HAL_GPIO_Init+0x32c>)
 8001230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800123a:	4a59      	ldr	r2, [pc, #356]	; (80013a0 <HAL_GPIO_Init+0x330>)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001264:	d025      	beq.n	80012b2 <HAL_GPIO_Init+0x242>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4e      	ldr	r2, [pc, #312]	; (80013a4 <HAL_GPIO_Init+0x334>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01f      	beq.n	80012ae <HAL_GPIO_Init+0x23e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4d      	ldr	r2, [pc, #308]	; (80013a8 <HAL_GPIO_Init+0x338>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x23a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <HAL_GPIO_Init+0x33c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x236>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4b      	ldr	r2, [pc, #300]	; (80013b0 <HAL_GPIO_Init+0x340>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x232>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4a      	ldr	r2, [pc, #296]	; (80013b4 <HAL_GPIO_Init+0x344>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x22e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a49      	ldr	r2, [pc, #292]	; (80013b8 <HAL_GPIO_Init+0x348>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x22a>
 8001296:	2306      	movs	r3, #6
 8001298:	e00c      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 800129a:	2307      	movs	r3, #7
 800129c:	e00a      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 800129e:	2305      	movs	r3, #5
 80012a0:	e008      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 80012a2:	2304      	movs	r3, #4
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e004      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 80012b2:	2300      	movs	r3, #0
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	f002 0203 	and.w	r2, r2, #3
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4093      	lsls	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c4:	4936      	ldr	r1, [pc, #216]	; (80013a0 <HAL_GPIO_Init+0x330>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012d2:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <HAL_GPIO_Init+0x34c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012f6:	4a31      	ldr	r2, [pc, #196]	; (80013bc <HAL_GPIO_Init+0x34c>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012fc:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <HAL_GPIO_Init+0x34c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001320:	4a26      	ldr	r2, [pc, #152]	; (80013bc <HAL_GPIO_Init+0x34c>)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <HAL_GPIO_Init+0x34c>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <HAL_GPIO_Init+0x34c>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_GPIO_Init+0x34c>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <HAL_GPIO_Init+0x34c>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa22 f303 	lsr.w	r3, r2, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	f47f ae78 	bne.w	8001080 <HAL_GPIO_Init+0x10>
  }
}
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48000800 	.word	0x48000800
 80013ac:	48000c00 	.word	0x48000c00
 80013b0:	48001000 	.word	0x48001000
 80013b4:	48001400 	.word	0x48001400
 80013b8:	48001800 	.word	0x48001800
 80013bc:	40010400 	.word	0x40010400

080013c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40007000 	.word	0x40007000

080013dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ea:	d130      	bne.n	800144e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013f8:	d038      	beq.n	800146c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001408:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2232      	movs	r2, #50	; 0x32
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001416:	fba2 2303 	umull	r2, r3, r2, r3
 800141a:	0c9b      	lsrs	r3, r3, #18
 800141c:	3301      	adds	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001420:	e002      	b.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3b01      	subs	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001434:	d102      	bne.n	800143c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f2      	bne.n	8001422 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001448:	d110      	bne.n	800146c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e00f      	b.n	800146e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145a:	d007      	beq.n	800146c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40007000 	.word	0x40007000
 8001480:	2000000c 	.word	0x2000000c
 8001484:	431bde83 	.word	0x431bde83

08001488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e3d4      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149a:	4ba1      	ldr	r3, [pc, #644]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a4:	4b9e      	ldr	r3, [pc, #632]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 80e4 	beq.w	8001684 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4a>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	f040 808b 	bne.w	80015e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	f040 8087 	bne.w	80015e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d2:	4b93      	ldr	r3, [pc, #588]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x62>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e3ac      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1a      	ldr	r2, [r3, #32]
 80014ee:	4b8c      	ldr	r3, [pc, #560]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d004      	beq.n	8001504 <HAL_RCC_OscConfig+0x7c>
 80014fa:	4b89      	ldr	r3, [pc, #548]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001502:	e005      	b.n	8001510 <HAL_RCC_OscConfig+0x88>
 8001504:	4b86      	ldr	r3, [pc, #536]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001510:	4293      	cmp	r3, r2
 8001512:	d223      	bcs.n	800155c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fd71 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e38d      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001528:	4b7d      	ldr	r3, [pc, #500]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a7c      	ldr	r2, [pc, #496]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b7a      	ldr	r3, [pc, #488]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4977      	ldr	r1, [pc, #476]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	4972      	ldr	r1, [pc, #456]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
 800155a:	e025      	b.n	80015a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155c:	4b70      	ldr	r3, [pc, #448]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a6f      	ldr	r2, [pc, #444]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b6d      	ldr	r3, [pc, #436]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	496a      	ldr	r1, [pc, #424]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157a:	4b69      	ldr	r3, [pc, #420]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	4965      	ldr	r1, [pc, #404]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fd31 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e34d      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015a8:	f000 fc36 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 80015ac:	4601      	mov	r1, r0
 80015ae:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	4a5a      	ldr	r2, [pc, #360]	; (8001724 <HAL_RCC_OscConfig+0x29c>)
 80015ba:	5cd3      	ldrb	r3, [r2, r3]
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	fa21 f303 	lsr.w	r3, r1, r3
 80015c4:	4a58      	ldr	r2, [pc, #352]	; (8001728 <HAL_RCC_OscConfig+0x2a0>)
 80015c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015c8:	4b58      	ldr	r3, [pc, #352]	; (800172c <HAL_RCC_OscConfig+0x2a4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f006 ff2b 	bl	8008428 <HAL_InitTick>
 80015d2:	4603      	mov	r3, r0
 80015d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d052      	beq.n	8001682 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	e331      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d032      	beq.n	800164e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015e8:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc0c 	bl	8000e10 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fc:	f7ff fc08 	bl	8000e10 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e31a      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a40      	ldr	r2, [pc, #256]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	493b      	ldr	r1, [pc, #236]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001638:	4b39      	ldr	r3, [pc, #228]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	4936      	ldr	r1, [pc, #216]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
 800164c:	e01a      	b.n	8001684 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a33      	ldr	r2, [pc, #204]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800165a:	f7ff fbd9 	bl	8000e10 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001662:	f7ff fbd5 	bl	8000e10 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e2e7      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001674:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x1da>
 8001680:	e000      	b.n	8001684 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001682:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d074      	beq.n	800177a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b08      	cmp	r3, #8
 8001694:	d005      	beq.n	80016a2 <HAL_RCC_OscConfig+0x21a>
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	d10e      	bne.n	80016ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d10b      	bne.n	80016ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d064      	beq.n	8001778 <HAL_RCC_OscConfig+0x2f0>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d160      	bne.n	8001778 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e2c4      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x24a>
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e01d      	b.n	800170e <HAL_RCC_OscConfig+0x286>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016da:	d10c      	bne.n	80016f6 <HAL_RCC_OscConfig+0x26e>
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80016e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e00b      	b.n	800170e <HAL_RCC_OscConfig+0x286>
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 80016fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_RCC_OscConfig+0x298>)
 8001708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01c      	beq.n	8001750 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fb7b 	bl	8000e10 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171c:	e011      	b.n	8001742 <HAL_RCC_OscConfig+0x2ba>
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	0800921c 	.word	0x0800921c
 8001728:	2000000c 	.word	0x2000000c
 800172c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fb6e 	bl	8000e10 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e280      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001742:	4baf      	ldr	r3, [pc, #700]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x2a8>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fb5e 	bl	8000e10 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fb5a 	bl	8000e10 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e26c      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176a:	4ba5      	ldr	r3, [pc, #660]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x2d0>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d060      	beq.n	8001848 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d005      	beq.n	8001798 <HAL_RCC_OscConfig+0x310>
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d119      	bne.n	80017c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d116      	bne.n	80017c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001798:	4b99      	ldr	r3, [pc, #612]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_OscConfig+0x328>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e249      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b93      	ldr	r3, [pc, #588]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	4990      	ldr	r1, [pc, #576]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c4:	e040      	b.n	8001848 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d023      	beq.n	8001816 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ce:	4b8c      	ldr	r3, [pc, #560]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a8b      	ldr	r2, [pc, #556]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff fb19 	bl	8000e10 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fb15 	bl	8000e10 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e227      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f4:	4b82      	ldr	r3, [pc, #520]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b7f      	ldr	r3, [pc, #508]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	497c      	ldr	r1, [pc, #496]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
 8001814:	e018      	b.n	8001848 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001816:	4b7a      	ldr	r3, [pc, #488]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a79      	ldr	r2, [pc, #484]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 800181c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff faf5 	bl	8000e10 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182a:	f7ff faf1 	bl	8000e10 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e203      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800183c:	4b70      	ldr	r3, [pc, #448]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d03c      	beq.n	80018ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d01c      	beq.n	8001896 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	4a67      	ldr	r2, [pc, #412]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fad0 	bl	8000e10 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff facc 	bl	8000e10 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1de      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001886:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ef      	beq.n	8001874 <HAL_RCC_OscConfig+0x3ec>
 8001894:	e01b      	b.n	80018ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001896:	4b5a      	ldr	r3, [pc, #360]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189c:	4a58      	ldr	r2, [pc, #352]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff fab3 	bl	8000e10 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff faaf 	bl	8000e10 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1c1      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c0:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80018c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ef      	bne.n	80018ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80a6 	beq.w	8001a28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018e0:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80018e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10d      	bne.n	8001908 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	4b44      	ldr	r3, [pc, #272]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	4a43      	ldr	r2, [pc, #268]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80018f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f6:	6593      	str	r3, [r2, #88]	; 0x58
 80018f8:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001904:	2301      	movs	r3, #1
 8001906:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001908:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <HAL_RCC_OscConfig+0x57c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d118      	bne.n	8001946 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_RCC_OscConfig+0x57c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a3a      	ldr	r2, [pc, #232]	; (8001a04 <HAL_RCC_OscConfig+0x57c>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001920:	f7ff fa76 	bl	8000e10 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001928:	f7ff fa72 	bl	8000e10 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e184      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193a:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <HAL_RCC_OscConfig+0x57c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d108      	bne.n	8001960 <HAL_RCC_OscConfig+0x4d8>
 800194e:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001954:	4a2a      	ldr	r2, [pc, #168]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800195e:	e024      	b.n	80019aa <HAL_RCC_OscConfig+0x522>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d110      	bne.n	800198a <HAL_RCC_OscConfig+0x502>
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196e:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197e:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001988:	e00f      	b.n	80019aa <HAL_RCC_OscConfig+0x522>
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001990:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 800199c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a0:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80019a2:	f023 0304 	bic.w	r3, r3, #4
 80019a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d016      	beq.n	80019e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff fa2d 	bl	8000e10 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff fa29 	bl	8000e10 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e139      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_OscConfig+0x578>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0ed      	beq.n	80019ba <HAL_RCC_OscConfig+0x532>
 80019de:	e01a      	b.n	8001a16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e0:	f7ff fa16 	bl	8000e10 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e6:	e00f      	b.n	8001a08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e8:	f7ff fa12 	bl	8000e10 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d906      	bls.n	8001a08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e122      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a08:	4b90      	ldr	r3, [pc, #576]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1e8      	bne.n	80019e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a16:	7ffb      	ldrb	r3, [r7, #31]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1c:	4b8b      	ldr	r3, [pc, #556]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	4a8a      	ldr	r2, [pc, #552]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 8108 	beq.w	8001c42 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	f040 80d0 	bne.w	8001bdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a3c:	4b83      	ldr	r3, [pc, #524]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0203 	and.w	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d130      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d127      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d11f      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a7c:	2a07      	cmp	r2, #7
 8001a7e:	bf14      	ite	ne
 8001a80:	2201      	movne	r2, #1
 8001a82:	2200      	moveq	r2, #0
 8001a84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d113      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	3b01      	subs	r3, #1
 8001a98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	085b      	lsrs	r3, r3, #1
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d06e      	beq.n	8001b90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	d069      	beq.n	8001b8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ab8:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ac4:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0b7      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a5c      	ldr	r2, [pc, #368]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae0:	f7ff f996 	bl	8000e10 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f992 	bl	8000e10 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0a4      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b06:	4b51      	ldr	r3, [pc, #324]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	4b51      	ldr	r3, [pc, #324]	; (8001c50 <HAL_RCC_OscConfig+0x7c8>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b16:	3a01      	subs	r2, #1
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	4311      	orrs	r1, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b20:	0212      	lsls	r2, r2, #8
 8001b22:	4311      	orrs	r1, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b28:	0852      	lsrs	r2, r2, #1
 8001b2a:	3a01      	subs	r2, #1
 8001b2c:	0552      	lsls	r2, r2, #21
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b34:	0852      	lsrs	r2, r2, #1
 8001b36:	3a01      	subs	r2, #1
 8001b38:	0652      	lsls	r2, r2, #25
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b40:	0912      	lsrs	r2, r2, #4
 8001b42:	0452      	lsls	r2, r2, #17
 8001b44:	430a      	orrs	r2, r1
 8001b46:	4941      	ldr	r1, [pc, #260]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a3e      	ldr	r2, [pc, #248]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b58:	4b3c      	ldr	r3, [pc, #240]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b64:	f7ff f954 	bl	8000e10 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f950 	bl	8000e10 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e062      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7e:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8a:	e05a      	b.n	8001c42 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e059      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d152      	bne.n	8001c42 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bb4:	f7ff f92c 	bl	8000e10 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f928 	bl	8000e10 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e03a      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x734>
 8001bda:	e032      	b.n	8001c42 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d02d      	beq.n	8001c3e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d105      	bne.n	8001c06 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001c00:	f023 0303 	bic.w	r3, r3, #3
 8001c04:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	4a10      	ldr	r2, [pc, #64]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001c0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f8fb 	bl	8000e10 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7ff f8f7 	bl	8000e10 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e009      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_OscConfig+0x7c4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x796>
 8001c3c:	e001      	b.n	8001c42 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	f99d808c 	.word	0xf99d808c

08001c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0c8      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c68:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <HAL_RCC_ClockConfig+0x1b0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d910      	bls.n	8001c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b63      	ldr	r3, [pc, #396]	; (8001e04 <HAL_RCC_ClockConfig+0x1b0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 0207 	bic.w	r2, r3, #7
 8001c7e:	4961      	ldr	r1, [pc, #388]	; (8001e04 <HAL_RCC_ClockConfig+0x1b0>)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b5f      	ldr	r3, [pc, #380]	; (8001e04 <HAL_RCC_ClockConfig+0x1b0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0b0      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d04c      	beq.n	8001d3e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cac:	4b56      	ldr	r3, [pc, #344]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d121      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e09e      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc4:	4b50      	ldr	r3, [pc, #320]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d115      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e092      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e086      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cec:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e07e      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cfc:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 0203 	bic.w	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	493f      	ldr	r1, [pc, #252]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d0e:	f7ff f87f 	bl	8000e10 <HAL_GetTick>
 8001d12:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d16:	f7ff f87b 	bl	8000e10 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e066      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2c:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 020c 	and.w	r2, r3, #12
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d1eb      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d008      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	492c      	ldr	r1, [pc, #176]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_ClockConfig+0x1b0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d210      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <HAL_RCC_ClockConfig+0x1b0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 0207 	bic.w	r2, r3, #7
 8001d72:	4924      	ldr	r1, [pc, #144]	; (8001e04 <HAL_RCC_ClockConfig+0x1b0>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <HAL_RCC_ClockConfig+0x1b0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e036      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4918      	ldr	r1, [pc, #96]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4910      	ldr	r1, [pc, #64]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dca:	f000 f825 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001dce:	4601      	mov	r1, r0
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_ClockConfig+0x1b4>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	fa21 f303 	lsr.w	r3, r1, r3
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f006 fb1a 	bl	8008428 <HAL_InitTick>
 8001df4:	4603      	mov	r3, r0
 8001df6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001df8:	7afb      	ldrb	r3, [r7, #11]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40022000 	.word	0x40022000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	0800921c 	.word	0x0800921c
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e30:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x34>
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d121      	bne.n	8001e8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d11e      	bne.n	8001e8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e4c:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	e005      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e74:	4a2a      	ldr	r2, [pc, #168]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10d      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e90:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	e004      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d133      	bne.n	8001f0e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d002      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0xa4>
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_GetSysClockFreq+0xaa>
 8001eba:	e005      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ebe:	617b      	str	r3, [r7, #20]
      break;
 8001ec0:	e005      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ec4:	617b      	str	r3, [r7, #20]
      break;
 8001ec6:	e002      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	617b      	str	r3, [r7, #20]
      break;
 8001ecc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	3301      	adds	r3, #1
 8001eda:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	fb02 f203 	mul.w	r2, r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0e5b      	lsrs	r3, r3, #25
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3724      	adds	r7, #36	; 0x24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08009234 	.word	0x08009234
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	007a1200 	.word	0x007a1200

08001f2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	2000000c 	.word	0x2000000c

08001f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f48:	f7ff fff0 	bl	8001f2c <HAL_RCC_GetHCLKFreq>
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	0800922c 	.word	0x0800922c

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f74:	f7ff ffda 	bl	8001f2c <HAL_RCC_GetHCLKFreq>
 8001f78:	4601      	mov	r1, r0
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0adb      	lsrs	r3, r3, #11
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	0800922c 	.word	0x0800922c

08001f9c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	220f      	movs	r2, #15
 8001faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_RCC_GetClockConfig+0x60>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0207 	and.w	r2, r3, #7
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	601a      	str	r2, [r3, #0]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40022000 	.word	0x40022000

08002000 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002018:	f7ff f9d2 	bl	80013c0 <HAL_PWREx_GetVoltageRange>
 800201c:	6178      	str	r0, [r7, #20]
 800201e:	e014      	b.n	800204a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002038:	f7ff f9c2 	bl	80013c0 <HAL_PWREx_GetVoltageRange>
 800203c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002050:	d10b      	bne.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	; 0x80
 8002056:	d919      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2ba0      	cmp	r3, #160	; 0xa0
 800205c:	d902      	bls.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e013      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e010      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b80      	cmp	r3, #128	; 0x80
 800206e:	d902      	bls.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002070:	2303      	movs	r3, #3
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e00a      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b80      	cmp	r3, #128	; 0x80
 800207a:	d102      	bne.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e004      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b70      	cmp	r3, #112	; 0x70
 8002086:	d101      	bne.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 0207 	bic.w	r2, r3, #7
 8002094:	4909      	ldr	r1, [pc, #36]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020c8:	2300      	movs	r3, #0
 80020ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020cc:	2300      	movs	r3, #0
 80020ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d03f      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e4:	d01c      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80020e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ea:	d802      	bhi.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00e      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80020f0:	e01f      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80020f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020f6:	d003      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80020f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020fc:	d01c      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80020fe:	e018      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002100:	4b85      	ldr	r3, [pc, #532]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a84      	ldr	r2, [pc, #528]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800210c:	e015      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3304      	adds	r3, #4
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fab9 	bl	800268c <RCCEx_PLLSAI1_Config>
 800211a:	4603      	mov	r3, r0
 800211c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800211e:	e00c      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3320      	adds	r3, #32
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fba0 	bl	800286c <RCCEx_PLLSAI2_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002130:	e003      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	74fb      	strb	r3, [r7, #19]
      break;
 8002136:	e000      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002140:	4b75      	ldr	r3, [pc, #468]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800214e:	4972      	ldr	r1, [pc, #456]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002156:	e001      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03f      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002170:	d01c      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002172:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002176:	d802      	bhi.n	800217e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00e      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800217c:	e01f      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800217e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002182:	d003      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002184:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002188:	d01c      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800218a:	e018      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800218c:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a61      	ldr	r2, [pc, #388]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002196:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002198:	e015      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fa73 	bl	800268c <RCCEx_PLLSAI1_Config>
 80021a6:	4603      	mov	r3, r0
 80021a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021aa:	e00c      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3320      	adds	r3, #32
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fb5a 	bl	800286c <RCCEx_PLLSAI2_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021bc:	e003      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	74fb      	strb	r3, [r7, #19]
      break;
 80021c2:	e000      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80021c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021cc:	4b52      	ldr	r3, [pc, #328]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021da:	494f      	ldr	r1, [pc, #316]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021e2:	e001      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a0 	beq.w	8002336 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021fa:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800220a:	2300      	movs	r3, #0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b41      	ldr	r3, [pc, #260]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a40      	ldr	r2, [pc, #256]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002228:	2301      	movs	r3, #1
 800222a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a3a      	ldr	r2, [pc, #232]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002238:	f7fe fdea 	bl	8000e10 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800223e:	e009      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002240:	f7fe fde6 	bl	8000e10 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d902      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	74fb      	strb	r3, [r7, #19]
        break;
 8002252:	e005      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ef      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d15c      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002270:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01f      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	d019      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	4a20      	ldr	r2, [pc, #128]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d016      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fe fda5 	bl	8000e10 <HAL_GetTick>
 80022c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c8:	e00b      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fda1 	bl	8000e10 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d902      	bls.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	74fb      	strb	r3, [r7, #19]
            break;
 80022e0:	e006      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ec      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002306:	4904      	ldr	r1, [pc, #16]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800230e:	e009      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
 8002314:	e006      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002324:	7c7b      	ldrb	r3, [r7, #17]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d105      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232a:	4b9e      	ldr	r3, [pc, #632]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	4a9d      	ldr	r2, [pc, #628]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002334:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002342:	4b98      	ldr	r3, [pc, #608]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f023 0203 	bic.w	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	4994      	ldr	r1, [pc, #592]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002364:	4b8f      	ldr	r3, [pc, #572]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f023 020c 	bic.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	498c      	ldr	r1, [pc, #560]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002386:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	4983      	ldr	r1, [pc, #524]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023a8:	4b7e      	ldr	r3, [pc, #504]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	497b      	ldr	r1, [pc, #492]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d8:	4972      	ldr	r1, [pc, #456]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ec:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	496a      	ldr	r1, [pc, #424]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800240e:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	4961      	ldr	r1, [pc, #388]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002430:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243e:	4959      	ldr	r1, [pc, #356]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002452:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002460:	4950      	ldr	r1, [pc, #320]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002474:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	4948      	ldr	r1, [pc, #288]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002496:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	493f      	ldr	r1, [pc, #252]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d028      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024b8:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c6:	4937      	ldr	r1, [pc, #220]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024d6:	d106      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a31      	ldr	r2, [pc, #196]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e2:	60d3      	str	r3, [r2, #12]
 80024e4:	e011      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ee:	d10c      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	2101      	movs	r1, #1
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f8c8 	bl	800268c <RCCEx_PLLSAI1_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d028      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	491f      	ldr	r1, [pc, #124]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002534:	d106      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002540:	60d3      	str	r3, [r2, #12]
 8002542:	e011      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800254c:	d10c      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3304      	adds	r3, #4
 8002552:	2101      	movs	r1, #1
 8002554:	4618      	mov	r0, r3
 8002556:	f000 f899 	bl	800268c <RCCEx_PLLSAI1_Config>
 800255a:	4603      	mov	r3, r0
 800255c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d02b      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002582:	4908      	ldr	r1, [pc, #32]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002592:	d109      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a02      	ldr	r2, [pc, #8]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800259a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800259e:	60d3      	str	r3, [r2, #12]
 80025a0:	e014      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b0:	d10c      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2101      	movs	r1, #1
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f867 	bl	800268c <RCCEx_PLLSAI1_Config>
 80025be:	4603      	mov	r3, r0
 80025c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d02f      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025e6:	4928      	ldr	r1, [pc, #160]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025f6:	d10d      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	2102      	movs	r1, #2
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f844 	bl	800268c <RCCEx_PLLSAI1_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d014      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	74bb      	strb	r3, [r7, #18]
 8002612:	e011      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800261c:	d10c      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3320      	adds	r3, #32
 8002622:	2102      	movs	r1, #2
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f921 	bl	800286c <RCCEx_PLLSAI2_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002634:	7cfb      	ldrb	r3, [r7, #19]
 8002636:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002652:	490d      	ldr	r1, [pc, #52]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002676:	4904      	ldr	r1, [pc, #16]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800267e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000

0800268c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800269a:	4b73      	ldr	r3, [pc, #460]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d018      	beq.n	80026d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026a6:	4b70      	ldr	r3, [pc, #448]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0203 	and.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d10d      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
       ||
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026be:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
       ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d044      	beq.n	800275c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e041      	b.n	800275c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d00c      	beq.n	80026fa <RCCEx_PLLSAI1_Config+0x6e>
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d013      	beq.n	800270c <RCCEx_PLLSAI1_Config+0x80>
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d120      	bne.n	800272a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026e8:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d11d      	bne.n	8002730 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e01a      	b.n	8002730 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026fa:	4b5b      	ldr	r3, [pc, #364]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e013      	b.n	8002734 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270c:	4b56      	ldr	r3, [pc, #344]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002728:	e006      	b.n	8002738 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      break;
 800272e:	e004      	b.n	800273a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002730:	bf00      	nop
 8002732:	e002      	b.n	800273a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002734:	bf00      	nop
 8002736:	e000      	b.n	800273a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002738:	bf00      	nop
    }

    if(status == HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10d      	bne.n	800275c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002740:	4b49      	ldr	r3, [pc, #292]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6819      	ldr	r1, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	3b01      	subs	r3, #1
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	430b      	orrs	r3, r1
 8002756:	4944      	ldr	r1, [pc, #272]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d17d      	bne.n	800285e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002762:	4b41      	ldr	r3, [pc, #260]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a40      	ldr	r2, [pc, #256]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002768:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800276c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276e:	f7fe fb4f 	bl	8000e10 <HAL_GetTick>
 8002772:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002774:	e009      	b.n	800278a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002776:	f7fe fb4b 	bl	8000e10 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d902      	bls.n	800278a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	73fb      	strb	r3, [r7, #15]
        break;
 8002788:	e005      	b.n	8002796 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ef      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d160      	bne.n	800285e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d111      	bne.n	80027c6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027a2:	4b31      	ldr	r3, [pc, #196]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6892      	ldr	r2, [r2, #8]
 80027b2:	0211      	lsls	r1, r2, #8
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68d2      	ldr	r2, [r2, #12]
 80027b8:	0912      	lsrs	r2, r2, #4
 80027ba:	0452      	lsls	r2, r2, #17
 80027bc:	430a      	orrs	r2, r1
 80027be:	492a      	ldr	r1, [pc, #168]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	610b      	str	r3, [r1, #16]
 80027c4:	e027      	b.n	8002816 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d112      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027cc:	4b26      	ldr	r3, [pc, #152]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6892      	ldr	r2, [r2, #8]
 80027dc:	0211      	lsls	r1, r2, #8
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6912      	ldr	r2, [r2, #16]
 80027e2:	0852      	lsrs	r2, r2, #1
 80027e4:	3a01      	subs	r2, #1
 80027e6:	0552      	lsls	r2, r2, #21
 80027e8:	430a      	orrs	r2, r1
 80027ea:	491f      	ldr	r1, [pc, #124]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	610b      	str	r3, [r1, #16]
 80027f0:	e011      	b.n	8002816 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6892      	ldr	r2, [r2, #8]
 8002802:	0211      	lsls	r1, r2, #8
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6952      	ldr	r2, [r2, #20]
 8002808:	0852      	lsrs	r2, r2, #1
 800280a:	3a01      	subs	r2, #1
 800280c:	0652      	lsls	r2, r2, #25
 800280e:	430a      	orrs	r2, r1
 8002810:	4915      	ldr	r1, [pc, #84]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a13      	ldr	r2, [pc, #76]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 800281c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002820:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7fe faf5 	bl	8000e10 <HAL_GetTick>
 8002826:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002828:	e009      	b.n	800283e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800282a:	f7fe faf1 	bl	8000e10 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d902      	bls.n	800283e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	73fb      	strb	r3, [r7, #15]
          break;
 800283c:	e005      	b.n	800284a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ef      	beq.n	800282a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <RCCEx_PLLSAI1_Config+0x1dc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000

0800286c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800287a:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d018      	beq.n	80028b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002886:	4b65      	ldr	r3, [pc, #404]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0203 	and.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d10d      	bne.n	80028b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
       ||
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800289e:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
       ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d044      	beq.n	800293c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	e041      	b.n	800293c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d00c      	beq.n	80028da <RCCEx_PLLSAI2_Config+0x6e>
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d013      	beq.n	80028ec <RCCEx_PLLSAI2_Config+0x80>
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d120      	bne.n	800290a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028c8:	4b54      	ldr	r3, [pc, #336]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d11d      	bne.n	8002910 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d8:	e01a      	b.n	8002910 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028da:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d116      	bne.n	8002914 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ea:	e013      	b.n	8002914 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ec:	4b4b      	ldr	r3, [pc, #300]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10f      	bne.n	8002918 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028f8:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002908:	e006      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
      break;
 800290e:	e004      	b.n	800291a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002910:	bf00      	nop
 8002912:	e002      	b.n	800291a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002914:	bf00      	nop
 8002916:	e000      	b.n	800291a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002918:	bf00      	nop
    }

    if(status == HAL_OK)
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002920:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6819      	ldr	r1, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	3b01      	subs	r3, #1
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	430b      	orrs	r3, r1
 8002936:	4939      	ldr	r1, [pc, #228]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d167      	bne.n	8002a12 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294e:	f7fe fa5f 	bl	8000e10 <HAL_GetTick>
 8002952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002954:	e009      	b.n	800296a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002956:	f7fe fa5b 	bl	8000e10 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d902      	bls.n	800296a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	73fb      	strb	r3, [r7, #15]
        break;
 8002968:	e005      	b.n	8002976 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800296a:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ef      	bne.n	8002956 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d14a      	bne.n	8002a12 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d111      	bne.n	80029a6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800298a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6892      	ldr	r2, [r2, #8]
 8002992:	0211      	lsls	r1, r2, #8
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68d2      	ldr	r2, [r2, #12]
 8002998:	0912      	lsrs	r2, r2, #4
 800299a:	0452      	lsls	r2, r2, #17
 800299c:	430a      	orrs	r2, r1
 800299e:	491f      	ldr	r1, [pc, #124]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	614b      	str	r3, [r1, #20]
 80029a4:	e011      	b.n	80029ca <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	0211      	lsls	r1, r2, #8
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6912      	ldr	r2, [r2, #16]
 80029bc:	0852      	lsrs	r2, r2, #1
 80029be:	3a01      	subs	r2, #1
 80029c0:	0652      	lsls	r2, r2, #25
 80029c2:	430a      	orrs	r2, r1
 80029c4:	4915      	ldr	r1, [pc, #84]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029ca:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d6:	f7fe fa1b 	bl	8000e10 <HAL_GetTick>
 80029da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029dc:	e009      	b.n	80029f2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029de:	f7fe fa17 	bl	8000e10 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d902      	bls.n	80029f2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	73fb      	strb	r3, [r7, #15]
          break;
 80029f0:	e005      	b.n	80029fe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0ef      	beq.n	80029de <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	4903      	ldr	r1, [pc, #12]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e042      	b.n	8002ab8 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	795b      	ldrb	r3, [r3, #5]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f005 fc84 	bl	8008350 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0204 	orr.w	r2, r2, #4
 8002a5c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d104      	bne.n	8002a76 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e020      	b.n	8002ab8 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a76:	f7fe f9cb 	bl	8000e10 <HAL_GetTick>
 8002a7a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002a7c:	e00e      	b.n	8002a9c <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002a7e:	f7fe f9c7 	bl	8000e10 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d907      	bls.n	8002a9c <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e00d      	b.n	8002ab8 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d0e9      	beq.n	8002a7e <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	791b      	ldrb	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_RNG_GenerateRandomNumber+0x1a>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e03d      	b.n	8002b56 <HAL_RNG_GenerateRandomNumber+0x96>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	795b      	ldrb	r3, [r3, #5]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d12c      	bne.n	8002b44 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002af0:	f7fe f98e 	bl	8000e10 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002af6:	e011      	b.n	8002b1c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002af8:	f7fe f98a 	bl	8000e10 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d90a      	bls.n	8002b1c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e01c      	b.n	8002b56 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d1e6      	bne.n	8002af8 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	715a      	strb	r2, [r3, #5]
 8002b42:	e004      	b.n	8002b4e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	711a      	strb	r2, [r3, #4]

  return status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e01d      	b.n	8002bac <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f815 	bl	8002bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f000 f985 	bl	8002eac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_TIM_Base_Start_IT+0x50>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d00b      	beq.n	8002c0a <HAL_TIM_Base_Start_IT+0x42>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d007      	beq.n	8002c0a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	00010007 	.word	0x00010007

08002c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0202 	mvn.w	r2, #2
 8002c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f905 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8f7 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f908 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0204 	mvn.w	r2, #4
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8db 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8cd 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f8de 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d122      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d11b      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0208 	mvn.w	r2, #8
 8002cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f8b1 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f8a3 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f8b4 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d122      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d11b      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0210 	mvn.w	r2, #16
 8002d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2208      	movs	r2, #8
 8002d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f887 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 8002d60:	e005      	b.n	8002d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f879 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f88a 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10e      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d107      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0201 	mvn.w	r2, #1
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f005 fa1a 	bl	80081d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b80      	cmp	r3, #128	; 0x80
 8002dac:	d10e      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b80      	cmp	r3, #128	; 0x80
 8002dba:	d107      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f914 	bl	8002ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dda:	d10e      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b80      	cmp	r3, #128	; 0x80
 8002de8:	d107      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f907 	bl	8003008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d10e      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d107      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f838 	bl	8002e96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d10e      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d107      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f06f 0220 	mvn.w	r2, #32
 8002e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f8c7 	bl	8002fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a40      	ldr	r2, [pc, #256]	; (8002fc0 <TIM_Base_SetConfig+0x114>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <TIM_Base_SetConfig+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eca:	d00f      	beq.n	8002eec <TIM_Base_SetConfig+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3d      	ldr	r2, [pc, #244]	; (8002fc4 <TIM_Base_SetConfig+0x118>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3c      	ldr	r2, [pc, #240]	; (8002fc8 <TIM_Base_SetConfig+0x11c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <TIM_Base_SetConfig+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3b      	ldr	r2, [pc, #236]	; (8002fcc <TIM_Base_SetConfig+0x120>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <TIM_Base_SetConfig+0x40>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a3a      	ldr	r2, [pc, #232]	; (8002fd0 <TIM_Base_SetConfig+0x124>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d108      	bne.n	8002efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a2f      	ldr	r2, [pc, #188]	; (8002fc0 <TIM_Base_SetConfig+0x114>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <TIM_Base_SetConfig+0x9a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d01b      	beq.n	8002f46 <TIM_Base_SetConfig+0x9a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <TIM_Base_SetConfig+0x118>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d017      	beq.n	8002f46 <TIM_Base_SetConfig+0x9a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <TIM_Base_SetConfig+0x11c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <TIM_Base_SetConfig+0x9a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <TIM_Base_SetConfig+0x120>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00f      	beq.n	8002f46 <TIM_Base_SetConfig+0x9a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <TIM_Base_SetConfig+0x124>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00b      	beq.n	8002f46 <TIM_Base_SetConfig+0x9a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <TIM_Base_SetConfig+0x128>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <TIM_Base_SetConfig+0x9a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <TIM_Base_SetConfig+0x12c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <TIM_Base_SetConfig+0x9a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a26      	ldr	r2, [pc, #152]	; (8002fdc <TIM_Base_SetConfig+0x130>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d108      	bne.n	8002f58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <TIM_Base_SetConfig+0x114>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00f      	beq.n	8002fa4 <TIM_Base_SetConfig+0xf8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <TIM_Base_SetConfig+0x124>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00b      	beq.n	8002fa4 <TIM_Base_SetConfig+0xf8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <TIM_Base_SetConfig+0x128>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d007      	beq.n	8002fa4 <TIM_Base_SetConfig+0xf8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <TIM_Base_SetConfig+0x12c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <TIM_Base_SetConfig+0xf8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a0f      	ldr	r2, [pc, #60]	; (8002fdc <TIM_Base_SetConfig+0x130>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d103      	bne.n	8002fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	615a      	str	r2, [r3, #20]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40013400 	.word	0x40013400
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	40014400 	.word	0x40014400
 8002fdc:	40014800 	.word	0x40014800

08002fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e040      	b.n	80030b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f005 f9a6 	bl	8008390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fabc 	bl	80035d8 <UART_SetConfig>
 8003060:	4603      	mov	r3, r0
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e022      	b.n	80030b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fe22 	bl	8003cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003096:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fea9 	bl	8003e00 <UART_CheckIdleState>
 80030ae:	4603      	mov	r3, r0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	f040 8081 	bne.w	80031d4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_Transmit+0x26>
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e079      	b.n	80031d6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_UART_Transmit+0x38>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e072      	b.n	80031d6 <HAL_UART_Transmit+0x11e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2221      	movs	r2, #33	; 0x21
 8003102:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003104:	f7fd fe84 	bl	8000e10 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	88fa      	ldrh	r2, [r7, #6]
 800310e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	d108      	bne.n	8003136 <HAL_UART_Transmit+0x7e>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d104      	bne.n	8003136 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e003      	b.n	800313e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003146:	e02d      	b.n	80031a4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2200      	movs	r2, #0
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fe99 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e039      	b.n	80031d6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	881a      	ldrh	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003174:	b292      	uxth	r2, r2
 8003176:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	3302      	adds	r3, #2
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	e008      	b.n	8003192 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	b292      	uxth	r2, r2
 800318a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	3301      	adds	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1cb      	bne.n	8003148 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2140      	movs	r1, #64	; 0x40
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fe65 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e005      	b.n	80031d6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e000      	b.n	80031d6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	4613      	mov	r3, r2
 80031ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	f040 808a 	bne.w	800330c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_UART_Receive_IT+0x24>
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e082      	b.n	800330e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_UART_Receive_IT+0x36>
 8003212:	2302      	movs	r3, #2
 8003214:	e07b      	b.n	800330e <HAL_UART_Receive_IT+0x12e>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	88fa      	ldrh	r2, [r7, #6]
 8003228:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003242:	d10e      	bne.n	8003262 <HAL_UART_Receive_IT+0x82>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <HAL_UART_Receive_IT+0x78>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003252:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003256:	e02d      	b.n	80032b4 <HAL_UART_Receive_IT+0xd4>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	22ff      	movs	r2, #255	; 0xff
 800325c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003260:	e028      	b.n	80032b4 <HAL_UART_Receive_IT+0xd4>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10d      	bne.n	8003286 <HAL_UART_Receive_IT+0xa6>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <HAL_UART_Receive_IT+0x9c>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	22ff      	movs	r2, #255	; 0xff
 8003276:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800327a:	e01b      	b.n	80032b4 <HAL_UART_Receive_IT+0xd4>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	227f      	movs	r2, #127	; 0x7f
 8003280:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003284:	e016      	b.n	80032b4 <HAL_UART_Receive_IT+0xd4>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328e:	d10d      	bne.n	80032ac <HAL_UART_Receive_IT+0xcc>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <HAL_UART_Receive_IT+0xc2>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	227f      	movs	r2, #127	; 0x7f
 800329c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032a0:	e008      	b.n	80032b4 <HAL_UART_Receive_IT+0xd4>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	223f      	movs	r2, #63	; 0x3f
 80032a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032aa:	e003      	b.n	80032b4 <HAL_UART_Receive_IT+0xd4>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2222      	movs	r2, #34	; 0x22
 80032be:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d8:	d107      	bne.n	80032ea <HAL_UART_Receive_IT+0x10a>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a0d      	ldr	r2, [pc, #52]	; (800331c <HAL_UART_Receive_IT+0x13c>)
 80032e6:	661a      	str	r2, [r3, #96]	; 0x60
 80032e8:	e002      	b.n	80032f0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <HAL_UART_Receive_IT+0x140>)
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003306:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	080040c9 	.word	0x080040c9
 8003320:	0800401f 	.word	0x0800401f

08003324 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	f640 030f 	movw	r3, #2063	; 0x80f
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d113      	bne.n	800337c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00e      	beq.n	800337c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8114 	beq.w	800359a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
      }
      return;
 800337a:	e10e      	b.n	800359a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80d6 	beq.w	8003530 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80cb 	beq.w	8003530 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00e      	beq.n	80033c2 <HAL_UART_IRQHandler+0x9e>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2201      	movs	r2, #1
 80033b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00e      	beq.n	80033ea <HAL_UART_IRQHandler+0xc6>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2202      	movs	r2, #2
 80033dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e2:	f043 0204 	orr.w	r2, r3, #4
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00e      	beq.n	8003412 <HAL_UART_IRQHandler+0xee>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2204      	movs	r2, #4
 8003404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340a:	f043 0202 	orr.w	r2, r3, #2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d104      	bne.n	8003430 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800342c:	2b00      	cmp	r3, #0
 800342e:	d009      	beq.n	8003444 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2208      	movs	r2, #8
 8003436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800343c:	f043 0208 	orr.w	r2, r3, #8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00f      	beq.n	800346e <HAL_UART_IRQHandler+0x14a>
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8093 	beq.w	800359e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d004      	beq.n	80034ba <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d031      	beq.n	800351e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fd60 	bl	8003f80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d123      	bne.n	8003516 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ea:	4a30      	ldr	r2, [pc, #192]	; (80035ac <HAL_UART_IRQHandler+0x288>)
 80034ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fd7a 	bl	8000fec <HAL_DMA_Abort_IT>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003508:	4610      	mov	r0, r2
 800350a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	e00e      	b.n	800352c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f858 	bl	80035c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00a      	b.n	800352c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f854 	bl	80035c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e006      	b.n	800352c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f850 	bl	80035c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800352a:	e038      	b.n	800359e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	bf00      	nop
    return;
 800352e:	e036      	b.n	800359e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <HAL_UART_IRQHandler+0x232>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800354c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fe0f 	bl	8004172 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003554:	e026      	b.n	80035a4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800356e:	2b00      	cmp	r3, #0
 8003570:	d017      	beq.n	80035a2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
    }
    return;
 800357a:	e012      	b.n	80035a2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00e      	beq.n	80035a4 <HAL_UART_IRQHandler+0x280>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fd2b 	bl	8003fec <UART_EndTransmit_IT>
    return;
 8003596:	bf00      	nop
 8003598:	e004      	b.n	80035a4 <HAL_UART_IRQHandler+0x280>
      return;
 800359a:	bf00      	nop
 800359c:	e002      	b.n	80035a4 <HAL_UART_IRQHandler+0x280>
    return;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_UART_IRQHandler+0x280>
    return;
 80035a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	08003fc1 	.word	0x08003fc1

080035b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80035dc:	b08a      	sub	sp, #40	; 0x28
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4313      	orrs	r3, r2
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4bb8      	ldr	r3, [pc, #736]	; (80038f0 <UART_SetConfig+0x318>)
 800360e:	4013      	ands	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003616:	430b      	orrs	r3, r1
 8003618:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4aae      	ldr	r2, [pc, #696]	; (80038f4 <UART_SetConfig+0x31c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003646:	4313      	orrs	r3, r2
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365a:	430a      	orrs	r2, r1
 800365c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4aa5      	ldr	r2, [pc, #660]	; (80038f8 <UART_SetConfig+0x320>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d126      	bne.n	80036b6 <UART_SetConfig+0xde>
 8003668:	4ba4      	ldr	r3, [pc, #656]	; (80038fc <UART_SetConfig+0x324>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b03      	cmp	r3, #3
 8003674:	d81a      	bhi.n	80036ac <UART_SetConfig+0xd4>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <UART_SetConfig+0xa4>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	0800368d 	.word	0x0800368d
 8003680:	0800369d 	.word	0x0800369d
 8003684:	08003695 	.word	0x08003695
 8003688:	080036a5 	.word	0x080036a5
 800368c:	2301      	movs	r3, #1
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003692:	e105      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003694:	2302      	movs	r3, #2
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369a:	e101      	b.n	80038a0 <UART_SetConfig+0x2c8>
 800369c:	2304      	movs	r3, #4
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a2:	e0fd      	b.n	80038a0 <UART_SetConfig+0x2c8>
 80036a4:	2308      	movs	r3, #8
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036aa:	e0f9      	b.n	80038a0 <UART_SetConfig+0x2c8>
 80036ac:	2310      	movs	r3, #16
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b2:	bf00      	nop
 80036b4:	e0f4      	b.n	80038a0 <UART_SetConfig+0x2c8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a91      	ldr	r2, [pc, #580]	; (8003900 <UART_SetConfig+0x328>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d138      	bne.n	8003732 <UART_SetConfig+0x15a>
 80036c0:	4b8e      	ldr	r3, [pc, #568]	; (80038fc <UART_SetConfig+0x324>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d82c      	bhi.n	8003728 <UART_SetConfig+0x150>
 80036ce:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <UART_SetConfig+0xfc>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	08003709 	.word	0x08003709
 80036d8:	08003729 	.word	0x08003729
 80036dc:	08003729 	.word	0x08003729
 80036e0:	08003729 	.word	0x08003729
 80036e4:	08003719 	.word	0x08003719
 80036e8:	08003729 	.word	0x08003729
 80036ec:	08003729 	.word	0x08003729
 80036f0:	08003729 	.word	0x08003729
 80036f4:	08003711 	.word	0x08003711
 80036f8:	08003729 	.word	0x08003729
 80036fc:	08003729 	.word	0x08003729
 8003700:	08003729 	.word	0x08003729
 8003704:	08003721 	.word	0x08003721
 8003708:	2300      	movs	r3, #0
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370e:	e0c7      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003710:	2302      	movs	r3, #2
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e0c3      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003718:	2304      	movs	r3, #4
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371e:	e0bf      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003720:	2308      	movs	r3, #8
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003726:	e0bb      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003728:	2310      	movs	r3, #16
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372e:	bf00      	nop
 8003730:	e0b6      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a73      	ldr	r2, [pc, #460]	; (8003904 <UART_SetConfig+0x32c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d125      	bne.n	8003788 <UART_SetConfig+0x1b0>
 800373c:	4b6f      	ldr	r3, [pc, #444]	; (80038fc <UART_SetConfig+0x324>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003746:	2b10      	cmp	r3, #16
 8003748:	d011      	beq.n	800376e <UART_SetConfig+0x196>
 800374a:	2b10      	cmp	r3, #16
 800374c:	d802      	bhi.n	8003754 <UART_SetConfig+0x17c>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <UART_SetConfig+0x186>
 8003752:	e014      	b.n	800377e <UART_SetConfig+0x1a6>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d006      	beq.n	8003766 <UART_SetConfig+0x18e>
 8003758:	2b30      	cmp	r3, #48	; 0x30
 800375a:	d00c      	beq.n	8003776 <UART_SetConfig+0x19e>
 800375c:	e00f      	b.n	800377e <UART_SetConfig+0x1a6>
 800375e:	2300      	movs	r3, #0
 8003760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003764:	e09c      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003766:	2302      	movs	r3, #2
 8003768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376c:	e098      	b.n	80038a0 <UART_SetConfig+0x2c8>
 800376e:	2304      	movs	r3, #4
 8003770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003774:	e094      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003776:	2308      	movs	r3, #8
 8003778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377c:	e090      	b.n	80038a0 <UART_SetConfig+0x2c8>
 800377e:	2310      	movs	r3, #16
 8003780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003784:	bf00      	nop
 8003786:	e08b      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5e      	ldr	r2, [pc, #376]	; (8003908 <UART_SetConfig+0x330>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d125      	bne.n	80037de <UART_SetConfig+0x206>
 8003792:	4b5a      	ldr	r3, [pc, #360]	; (80038fc <UART_SetConfig+0x324>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d011      	beq.n	80037c4 <UART_SetConfig+0x1ec>
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d802      	bhi.n	80037aa <UART_SetConfig+0x1d2>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <UART_SetConfig+0x1dc>
 80037a8:	e014      	b.n	80037d4 <UART_SetConfig+0x1fc>
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d006      	beq.n	80037bc <UART_SetConfig+0x1e4>
 80037ae:	2bc0      	cmp	r3, #192	; 0xc0
 80037b0:	d00c      	beq.n	80037cc <UART_SetConfig+0x1f4>
 80037b2:	e00f      	b.n	80037d4 <UART_SetConfig+0x1fc>
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ba:	e071      	b.n	80038a0 <UART_SetConfig+0x2c8>
 80037bc:	2302      	movs	r3, #2
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c2:	e06d      	b.n	80038a0 <UART_SetConfig+0x2c8>
 80037c4:	2304      	movs	r3, #4
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ca:	e069      	b.n	80038a0 <UART_SetConfig+0x2c8>
 80037cc:	2308      	movs	r3, #8
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e065      	b.n	80038a0 <UART_SetConfig+0x2c8>
 80037d4:	2310      	movs	r3, #16
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	bf00      	nop
 80037dc:	e060      	b.n	80038a0 <UART_SetConfig+0x2c8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a4a      	ldr	r2, [pc, #296]	; (800390c <UART_SetConfig+0x334>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d129      	bne.n	800383c <UART_SetConfig+0x264>
 80037e8:	4b44      	ldr	r3, [pc, #272]	; (80038fc <UART_SetConfig+0x324>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f6:	d014      	beq.n	8003822 <UART_SetConfig+0x24a>
 80037f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fc:	d802      	bhi.n	8003804 <UART_SetConfig+0x22c>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <UART_SetConfig+0x23a>
 8003802:	e016      	b.n	8003832 <UART_SetConfig+0x25a>
 8003804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003808:	d007      	beq.n	800381a <UART_SetConfig+0x242>
 800380a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380e:	d00c      	beq.n	800382a <UART_SetConfig+0x252>
 8003810:	e00f      	b.n	8003832 <UART_SetConfig+0x25a>
 8003812:	2300      	movs	r3, #0
 8003814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003818:	e042      	b.n	80038a0 <UART_SetConfig+0x2c8>
 800381a:	2302      	movs	r3, #2
 800381c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003820:	e03e      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003822:	2304      	movs	r3, #4
 8003824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003828:	e03a      	b.n	80038a0 <UART_SetConfig+0x2c8>
 800382a:	2308      	movs	r3, #8
 800382c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003830:	e036      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003832:	2310      	movs	r3, #16
 8003834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003838:	bf00      	nop
 800383a:	e031      	b.n	80038a0 <UART_SetConfig+0x2c8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <UART_SetConfig+0x31c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d129      	bne.n	800389a <UART_SetConfig+0x2c2>
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <UART_SetConfig+0x324>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003854:	d014      	beq.n	8003880 <UART_SetConfig+0x2a8>
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d802      	bhi.n	8003862 <UART_SetConfig+0x28a>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <UART_SetConfig+0x298>
 8003860:	e016      	b.n	8003890 <UART_SetConfig+0x2b8>
 8003862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003866:	d007      	beq.n	8003878 <UART_SetConfig+0x2a0>
 8003868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800386c:	d00c      	beq.n	8003888 <UART_SetConfig+0x2b0>
 800386e:	e00f      	b.n	8003890 <UART_SetConfig+0x2b8>
 8003870:	2300      	movs	r3, #0
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003876:	e013      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003878:	2302      	movs	r3, #2
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387e:	e00f      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003880:	2304      	movs	r3, #4
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003886:	e00b      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003888:	2308      	movs	r3, #8
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388e:	e007      	b.n	80038a0 <UART_SetConfig+0x2c8>
 8003890:	2310      	movs	r3, #16
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <UART_SetConfig+0x2c8>
 800389a:	2310      	movs	r3, #16
 800389c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <UART_SetConfig+0x31c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	f040 80fe 	bne.w	8003aa8 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d837      	bhi.n	8003924 <UART_SetConfig+0x34c>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0x2e4>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	08003925 	.word	0x08003925
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	08003925 	.word	0x08003925
 80038cc:	08003915 	.word	0x08003915
 80038d0:	08003925 	.word	0x08003925
 80038d4:	08003925 	.word	0x08003925
 80038d8:	08003925 	.word	0x08003925
 80038dc:	0800391d 	.word	0x0800391d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80038e0:	f7fe fb30 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 80038e4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038e6:	e020      	b.n	800392a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <UART_SetConfig+0x338>)
 80038ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038ec:	e01d      	b.n	800392a <UART_SetConfig+0x352>
 80038ee:	bf00      	nop
 80038f0:	efff69f3 	.word	0xefff69f3
 80038f4:	40008000 	.word	0x40008000
 80038f8:	40013800 	.word	0x40013800
 80038fc:	40021000 	.word	0x40021000
 8003900:	40004400 	.word	0x40004400
 8003904:	40004800 	.word	0x40004800
 8003908:	40004c00 	.word	0x40004c00
 800390c:	40005000 	.word	0x40005000
 8003910:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003914:	f7fe fa80 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8003918:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800391a:	e006      	b.n	800392a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800391c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003920:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003922:	e002      	b.n	800392a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	76fb      	strb	r3, [r7, #27]
        break;
 8003928:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 81b9 	beq.w	8003ca4 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4413      	add	r3, r2
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	429a      	cmp	r2, r3
 8003940:	d305      	bcc.n	800394e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	429a      	cmp	r2, r3
 800394c:	d902      	bls.n	8003954 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	76fb      	strb	r3, [r7, #27]
 8003952:	e1a7      	b.n	8003ca4 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8003954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003958:	2b08      	cmp	r3, #8
 800395a:	f200 8092 	bhi.w	8003a82 <UART_SetConfig+0x4aa>
 800395e:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <UART_SetConfig+0x38c>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	08003989 	.word	0x08003989
 8003968:	08003a83 	.word	0x08003a83
 800396c:	080039d7 	.word	0x080039d7
 8003970:	08003a83 	.word	0x08003a83
 8003974:	08003a0b 	.word	0x08003a0b
 8003978:	08003a83 	.word	0x08003a83
 800397c:	08003a83 	.word	0x08003a83
 8003980:	08003a83 	.word	0x08003a83
 8003984:	08003a59 	.word	0x08003a59
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003988:	f7fe fadc 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 800398c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4619      	mov	r1, r3
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	f04f 0400 	mov.w	r4, #0
 800399e:	0214      	lsls	r4, r2, #8
 80039a0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80039a4:	020b      	lsls	r3, r1, #8
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6852      	ldr	r2, [r2, #4]
 80039aa:	0852      	lsrs	r2, r2, #1
 80039ac:	4611      	mov	r1, r2
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	eb13 0b01 	adds.w	fp, r3, r1
 80039b6:	eb44 0c02 	adc.w	ip, r4, r2
 80039ba:	4658      	mov	r0, fp
 80039bc:	4661      	mov	r1, ip
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f04f 0400 	mov.w	r4, #0
 80039c6:	461a      	mov	r2, r3
 80039c8:	4623      	mov	r3, r4
 80039ca:	f7fd f86f 	bl	8000aac <__aeabi_uldivmod>
 80039ce:	4603      	mov	r3, r0
 80039d0:	460c      	mov	r4, r1
 80039d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80039d4:	e058      	b.n	8003a88 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	f04f 0400 	mov.w	r4, #0
 80039e0:	49ae      	ldr	r1, [pc, #696]	; (8003c9c <UART_SetConfig+0x6c4>)
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	eb13 0b01 	adds.w	fp, r3, r1
 80039ea:	eb44 0c02 	adc.w	ip, r4, r2
 80039ee:	4658      	mov	r0, fp
 80039f0:	4661      	mov	r1, ip
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f04f 0400 	mov.w	r4, #0
 80039fa:	461a      	mov	r2, r3
 80039fc:	4623      	mov	r3, r4
 80039fe:	f7fd f855 	bl	8000aac <__aeabi_uldivmod>
 8003a02:	4603      	mov	r3, r0
 8003a04:	460c      	mov	r4, r1
 8003a06:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003a08:	e03e      	b.n	8003a88 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7fe fa05 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8003a0e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4619      	mov	r1, r3
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	0214      	lsls	r4, r2, #8
 8003a22:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003a26:	020b      	lsls	r3, r1, #8
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6852      	ldr	r2, [r2, #4]
 8003a2c:	0852      	lsrs	r2, r2, #1
 8003a2e:	4611      	mov	r1, r2
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	eb13 0b01 	adds.w	fp, r3, r1
 8003a38:	eb44 0c02 	adc.w	ip, r4, r2
 8003a3c:	4658      	mov	r0, fp
 8003a3e:	4661      	mov	r1, ip
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	f7fd f82e 	bl	8000aac <__aeabi_uldivmod>
 8003a50:	4603      	mov	r3, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003a56:	e017      	b.n	8003a88 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	f04f 0400 	mov.w	r4, #0
 8003a62:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003a66:	f144 0100 	adc.w	r1, r4, #0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f04f 0400 	mov.w	r4, #0
 8003a72:	461a      	mov	r2, r3
 8003a74:	4623      	mov	r3, r4
 8003a76:	f7fd f819 	bl	8000aac <__aeabi_uldivmod>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003a80:	e002      	b.n	8003a88 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	76fb      	strb	r3, [r7, #27]
            break;
 8003a86:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a8e:	d308      	bcc.n	8003aa2 <UART_SetConfig+0x4ca>
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a96:	d204      	bcs.n	8003aa2 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	60da      	str	r2, [r3, #12]
 8003aa0:	e100      	b.n	8003ca4 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	76fb      	strb	r3, [r7, #27]
 8003aa6:	e0fd      	b.n	8003ca4 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab0:	f040 8084 	bne.w	8003bbc <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8003ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d85f      	bhi.n	8003b7c <UART_SetConfig+0x5a4>
 8003abc:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <UART_SetConfig+0x4ec>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003b09 	.word	0x08003b09
 8003acc:	08003b29 	.word	0x08003b29
 8003ad0:	08003b7d 	.word	0x08003b7d
 8003ad4:	08003b45 	.word	0x08003b45
 8003ad8:	08003b7d 	.word	0x08003b7d
 8003adc:	08003b7d 	.word	0x08003b7d
 8003ae0:	08003b7d 	.word	0x08003b7d
 8003ae4:	08003b65 	.word	0x08003b65
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f7fe fa2c 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8003aec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	005a      	lsls	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b06:	e03c      	b.n	8003b82 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b08:	f7fe fa32 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8003b0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	005a      	lsls	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	441a      	add	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b26:	e02c      	b.n	8003b82 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003b32:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6852      	ldr	r2, [r2, #4]
 8003b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b42:	e01e      	b.n	8003b82 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b44:	f7fe f968 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8003b48:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	005a      	lsls	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b62:	e00e      	b.n	8003b82 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b7a:	e002      	b.n	8003b82 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	76fb      	strb	r3, [r7, #27]
        break;
 8003b80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2b0f      	cmp	r3, #15
 8003b86:	d916      	bls.n	8003bb6 <UART_SetConfig+0x5de>
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8e:	d212      	bcs.n	8003bb6 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f023 030f 	bic.w	r3, r3, #15
 8003b98:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	89fb      	ldrh	r3, [r7, #14]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	89fa      	ldrh	r2, [r7, #14]
 8003bb2:	60da      	str	r2, [r3, #12]
 8003bb4:	e076      	b.n	8003ca4 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	76fb      	strb	r3, [r7, #27]
 8003bba:	e073      	b.n	8003ca4 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8003bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d85c      	bhi.n	8003c7e <UART_SetConfig+0x6a6>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <UART_SetConfig+0x5f4>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003bf1 	.word	0x08003bf1
 8003bd0:	08003c0f 	.word	0x08003c0f
 8003bd4:	08003c2d 	.word	0x08003c2d
 8003bd8:	08003c7f 	.word	0x08003c7f
 8003bdc:	08003c49 	.word	0x08003c49
 8003be0:	08003c7f 	.word	0x08003c7f
 8003be4:	08003c7f 	.word	0x08003c7f
 8003be8:	08003c7f 	.word	0x08003c7f
 8003bec:	08003c67 	.word	0x08003c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf0:	f7fe f9a8 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8003bf4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	085a      	lsrs	r2, r3, #1
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c0c:	e03a      	b.n	8003c84 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c0e:	f7fe f9af 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8003c12:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	085a      	lsrs	r2, r3, #1
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	441a      	add	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c2a:	e02b      	b.n	8003c84 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003c36:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6852      	ldr	r2, [r2, #4]
 8003c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c46:	e01d      	b.n	8003c84 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c48:	f7fe f8e6 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8003c4c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	085a      	lsrs	r2, r3, #1
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	441a      	add	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c64:	e00e      	b.n	8003c84 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c7c:	e002      	b.n	8003c84 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	76fb      	strb	r3, [r7, #27]
        break;
 8003c82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	d90a      	bls.n	8003ca0 <UART_SetConfig+0x6c8>
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d206      	bcs.n	8003ca0 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	e003      	b.n	8003ca4 <UART_SetConfig+0x6cc>
 8003c9c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003cb0:	7efb      	ldrb	r3, [r7, #27]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3728      	adds	r7, #40	; 0x28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01a      	beq.n	8003dd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dba:	d10a      	bne.n	8003dd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	605a      	str	r2, [r3, #4]
  }
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e0e:	f7fc ffff 	bl	8000e10 <HAL_GetTick>
 8003e12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d10e      	bne.n	8003e40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f82a 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e020      	b.n	8003e82 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d10e      	bne.n	8003e6c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f814 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e00a      	b.n	8003e82 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9a:	e05d      	b.n	8003f58 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d059      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea4:	f7fc ffb4 	bl	8000e10 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d302      	bcc.n	8003eba <UART_WaitOnFlagUntilTimeout+0x30>
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d11b      	bne.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ec8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e042      	b.n	8003f78 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02b      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0e:	d123      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f18:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f28:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e00f      	b.n	8003f78 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4013      	ands	r3, r2
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d092      	beq.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff faf0 	bl	80035c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004002:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff facd 	bl	80035b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004016:	bf00      	nop
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800402c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004032:	2b22      	cmp	r3, #34	; 0x22
 8004034:	d13a      	bne.n	80040ac <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800403c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800403e:	89bb      	ldrh	r3, [r7, #12]
 8004040:	b2d9      	uxtb	r1, r3
 8004042:	89fb      	ldrh	r3, [r7, #14]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	400a      	ands	r2, r1
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d123      	bne.n	80040c0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004086:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f003 fd39 	bl	8007b1c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040aa:	e009      	b.n	80040c0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	8b1b      	ldrh	r3, [r3, #24]
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0208 	orr.w	r2, r2, #8
 80040bc:	b292      	uxth	r2, r2
 80040be:	831a      	strh	r2, [r3, #24]
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040d6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040dc:	2b22      	cmp	r3, #34	; 0x22
 80040de:	d13a      	bne.n	8004156 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040e6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80040ee:	89ba      	ldrh	r2, [r7, #12]
 80040f0:	89fb      	ldrh	r3, [r7, #14]
 80040f2:	4013      	ands	r3, r2
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d123      	bne.n	800416a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004130:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f003 fce4 	bl	8007b1c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004154:	e009      	b.n	800416a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	8b1b      	ldrh	r3, [r3, #24]
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0208 	orr.w	r2, r2, #8
 8004166:	b292      	uxth	r2, r2
 8004168:	831a      	strh	r2, [r3, #24]
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800419a:	f3ef 8305 	mrs	r3, IPSR
 800419e:	60bb      	str	r3, [r7, #8]
  return(result);
 80041a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a6:	f3ef 8310 	mrs	r3, PRIMASK
 80041aa:	607b      	str	r3, [r7, #4]
  return(result);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d105      	bne.n	80041be <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041b2:	f3ef 8311 	mrs	r3, BASEPRI
 80041b6:	603b      	str	r3, [r7, #0]
  return(result);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <osKernelInitialize+0x3a>
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <osKernelInitialize+0x64>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d103      	bne.n	80041ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80041c6:	f06f 0305 	mvn.w	r3, #5
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e00c      	b.n	80041e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <osKernelInitialize+0x64>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <osKernelInitialize+0x64>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e002      	b.n	80041e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295
 80041e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041e8:	68fb      	ldr	r3, [r7, #12]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000090 	.word	0x20000090

080041fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004202:	f3ef 8305 	mrs	r3, IPSR
 8004206:	60bb      	str	r3, [r7, #8]
  return(result);
 8004208:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10f      	bne.n	800422e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420e:	f3ef 8310 	mrs	r3, PRIMASK
 8004212:	607b      	str	r3, [r7, #4]
  return(result);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800421a:	f3ef 8311 	mrs	r3, BASEPRI
 800421e:	603b      	str	r3, [r7, #0]
  return(result);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <osKernelStart+0x3a>
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <osKernelStart+0x68>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d103      	bne.n	8004236 <osKernelStart+0x3a>
    stat = osErrorISR;
 800422e:	f06f 0305 	mvn.w	r3, #5
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e010      	b.n	8004258 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004236:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <osKernelStart+0x68>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d109      	bne.n	8004252 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800423e:	f7ff ffa2 	bl	8004186 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <osKernelStart+0x68>)
 8004244:	2202      	movs	r2, #2
 8004246:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004248:	f001 fc0c 	bl	8005a64 <vTaskStartScheduler>
      stat = osOK;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e002      	b.n	8004258 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004252:	f04f 33ff 	mov.w	r3, #4294967295
 8004256:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004258:	68fb      	ldr	r3, [r7, #12]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000090 	.word	0x20000090

08004268 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b090      	sub	sp, #64	; 0x40
 800426c:	af04      	add	r7, sp, #16
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004278:	f3ef 8305 	mrs	r3, IPSR
 800427c:	61fb      	str	r3, [r7, #28]
  return(result);
 800427e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 808f 	bne.w	80043a4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004286:	f3ef 8310 	mrs	r3, PRIMASK
 800428a:	61bb      	str	r3, [r7, #24]
  return(result);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d105      	bne.n	800429e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004292:	f3ef 8311 	mrs	r3, BASEPRI
 8004296:	617b      	str	r3, [r7, #20]
  return(result);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <osThreadNew+0x3e>
 800429e:	4b44      	ldr	r3, [pc, #272]	; (80043b0 <osThreadNew+0x148>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d07e      	beq.n	80043a4 <osThreadNew+0x13c>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d07b      	beq.n	80043a4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80042b0:	2318      	movs	r3, #24
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80042b8:	f04f 33ff 	mov.w	r3, #4294967295
 80042bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d045      	beq.n	8004350 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <osThreadNew+0x6a>
        name = attr->name;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <osThreadNew+0x90>
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	2b38      	cmp	r3, #56	; 0x38
 80042ea:	d805      	bhi.n	80042f8 <osThreadNew+0x90>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <osThreadNew+0x94>
        return (NULL);
 80042f8:	2300      	movs	r3, #0
 80042fa:	e054      	b.n	80043a6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00e      	beq.n	8004332 <osThreadNew+0xca>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b5b      	cmp	r3, #91	; 0x5b
 800431a:	d90a      	bls.n	8004332 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004320:	2b00      	cmp	r3, #0
 8004322:	d006      	beq.n	8004332 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <osThreadNew+0xca>
        mem = 1;
 800432c:	2301      	movs	r3, #1
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	e010      	b.n	8004354 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <osThreadNew+0xec>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <osThreadNew+0xec>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <osThreadNew+0xec>
          mem = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	623b      	str	r3, [r7, #32]
 800434e:	e001      	b.n	8004354 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d110      	bne.n	800437c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004362:	9202      	str	r2, [sp, #8]
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f001 f9d9 	bl	8005728 <xTaskCreateStatic>
 8004376:	4603      	mov	r3, r0
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	e013      	b.n	80043a4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d110      	bne.n	80043a4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	b29a      	uxth	r2, r3
 8004386:	f107 0310 	add.w	r3, r7, #16
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f001 fa21 	bl	80057dc <xTaskCreate>
 800439a:	4603      	mov	r3, r0
 800439c:	2b01      	cmp	r3, #1
 800439e:	d001      	beq.n	80043a4 <osThreadNew+0x13c>
          hTask = NULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043a4:	693b      	ldr	r3, [r7, #16]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3730      	adds	r7, #48	; 0x30
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000090 	.word	0x20000090

080043b4 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f002 fd4f 	bl	8006e60 <pvTimerGetTimerID>
 80043c2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <TimerCallback+0x22>
    callb->func (callb->arg);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	6852      	ldr	r2, [r2, #4]
 80043d2:	4610      	mov	r0, r2
 80043d4:	4798      	blx	r3
  }
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08e      	sub	sp, #56	; 0x38
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	460b      	mov	r3, r1
 80043ee:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043f4:	f3ef 8305 	mrs	r3, IPSR
 80043f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80043fa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d16a      	bne.n	80044d6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004400:	f3ef 8310 	mrs	r3, PRIMASK
 8004404:	617b      	str	r3, [r7, #20]
  return(result);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800440c:	f3ef 8311 	mrs	r3, BASEPRI
 8004410:	613b      	str	r3, [r7, #16]
  return(result);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <osTimerNew+0x40>
 8004418:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <osTimerNew+0x100>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d05a      	beq.n	80044d6 <osTimerNew+0xf6>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d057      	beq.n	80044d6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004426:	2008      	movs	r0, #8
 8004428:	f002 ff7a 	bl	8007320 <pvPortMalloc>
 800442c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d050      	beq.n	80044d6 <osTimerNew+0xf6>
      callb->func = func;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004440:	7afb      	ldrb	r3, [r7, #11]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <osTimerNew+0x6c>
        reload = pdFALSE;
 8004446:	2300      	movs	r3, #0
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
 800444a:	e001      	b.n	8004450 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	623b      	str	r3, [r7, #32]
      name = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01c      	beq.n	800449a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <osTimerNew+0x8e>
          name = attr->name;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d006      	beq.n	8004484 <osTimerNew+0xa4>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b2b      	cmp	r3, #43	; 0x2b
 800447c:	d902      	bls.n	8004484 <osTimerNew+0xa4>
          mem = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	623b      	str	r3, [r7, #32]
 8004482:	e00c      	b.n	800449e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <osTimerNew+0xbe>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d104      	bne.n	800449e <osTimerNew+0xbe>
            mem = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	e001      	b.n	800449e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d10c      	bne.n	80044be <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <osTimerNew+0x104>)
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	2101      	movs	r1, #1
 80044b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044b6:	f002 f95e 	bl	8006776 <xTimerCreateStatic>
 80044ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80044bc:	e00b      	b.n	80044d6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d108      	bne.n	80044d6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <osTimerNew+0x104>)
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044cc:	2101      	movs	r1, #1
 80044ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044d0:	f002 f930 	bl	8006734 <xTimerCreate>
 80044d4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3730      	adds	r7, #48	; 0x30
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000090 	.word	0x20000090
 80044e4:	080043b5 	.word	0x080043b5

080044e8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044f4:	f3ef 8305 	mrs	r3, IPSR
 80044f8:	613b      	str	r3, [r7, #16]
  return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 8085 	bne.w	800460c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004502:	f3ef 8310 	mrs	r3, PRIMASK
 8004506:	60fb      	str	r3, [r7, #12]
  return(result);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d105      	bne.n	800451a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800450e:	f3ef 8311 	mrs	r3, BASEPRI
 8004512:	60bb      	str	r3, [r7, #8]
  return(result);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <osMutexNew+0x3a>
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <osMutexNew+0x130>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d074      	beq.n	800460c <osMutexNew+0x124>
    if (attr != NULL) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	623b      	str	r3, [r7, #32]
 800452e:	e001      	b.n	8004534 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <osMutexNew+0x5c>
      rmtx = 1U;
 800453e:	2301      	movs	r3, #1
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e001      	b.n	8004548 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d15c      	bne.n	800460c <osMutexNew+0x124>
      mem = -1;
 8004552:	f04f 33ff 	mov.w	r3, #4294967295
 8004556:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d015      	beq.n	800458a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d006      	beq.n	8004574 <osMutexNew+0x8c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2b4f      	cmp	r3, #79	; 0x4f
 800456c:	d902      	bls.n	8004574 <osMutexNew+0x8c>
          mem = 1;
 800456e:	2301      	movs	r3, #1
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	e00c      	b.n	800458e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d108      	bne.n	800458e <osMutexNew+0xa6>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <osMutexNew+0xa6>
            mem = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	e001      	b.n	800458e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d112      	bne.n	80045ba <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	4619      	mov	r1, r3
 80045a0:	2004      	movs	r0, #4
 80045a2:	f000 fb48 	bl	8004c36 <xQueueCreateMutexStatic>
 80045a6:	6278      	str	r0, [r7, #36]	; 0x24
 80045a8:	e016      	b.n	80045d8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	4619      	mov	r1, r3
 80045b0:	2001      	movs	r0, #1
 80045b2:	f000 fb40 	bl	8004c36 <xQueueCreateMutexStatic>
 80045b6:	6278      	str	r0, [r7, #36]	; 0x24
 80045b8:	e00e      	b.n	80045d8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10b      	bne.n	80045d8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80045c6:	2004      	movs	r0, #4
 80045c8:	f000 fb1d 	bl	8004c06 <xQueueCreateMutex>
 80045cc:	6278      	str	r0, [r7, #36]	; 0x24
 80045ce:	e003      	b.n	80045d8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80045d0:	2001      	movs	r0, #1
 80045d2:	f000 fb18 	bl	8004c06 <xQueueCreateMutex>
 80045d6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00c      	beq.n	80045f8 <osMutexNew+0x110>
        if (attr != NULL) {
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <osMutexNew+0x104>
          name = attr->name;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e001      	b.n	80045f0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80045f0:	6979      	ldr	r1, [r7, #20]
 80045f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045f4:	f001 f83c 	bl	8005670 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d006      	beq.n	800460c <osMutexNew+0x124>
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800460e:	4618      	mov	r0, r3
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000090 	.word	0x20000090

0800461c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463a:	f3ef 8305 	mrs	r3, IPSR
 800463e:	613b      	str	r3, [r7, #16]
  return(result);
 8004640:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10f      	bne.n	8004666 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8310 	mrs	r3, PRIMASK
 800464a:	60fb      	str	r3, [r7, #12]
  return(result);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004652:	f3ef 8311 	mrs	r3, BASEPRI
 8004656:	60bb      	str	r3, [r7, #8]
  return(result);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <osMutexAcquire+0x52>
 800465e:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <osMutexAcquire+0xb8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d103      	bne.n	800466e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004666:	f06f 0305 	mvn.w	r3, #5
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	e02c      	b.n	80046c8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d103      	bne.n	800467c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004674:	f06f 0303 	mvn.w	r3, #3
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e025      	b.n	80046c8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d011      	beq.n	80046a6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	69b8      	ldr	r0, [r7, #24]
 8004686:	f000 fb24 	bl	8004cd2 <xQueueTakeMutexRecursive>
 800468a:	4603      	mov	r3, r0
 800468c:	2b01      	cmp	r3, #1
 800468e:	d01b      	beq.n	80046c8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004696:	f06f 0301 	mvn.w	r3, #1
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	e014      	b.n	80046c8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800469e:	f06f 0302 	mvn.w	r3, #2
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	e010      	b.n	80046c8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80046a6:	6839      	ldr	r1, [r7, #0]
 80046a8:	69b8      	ldr	r0, [r7, #24]
 80046aa:	f000 fdb1 	bl	8005210 <xQueueSemaphoreTake>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d009      	beq.n	80046c8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80046ba:	f06f 0301 	mvn.w	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e002      	b.n	80046c8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80046c2:	f06f 0302 	mvn.w	r3, #2
 80046c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80046c8:	69fb      	ldr	r3, [r7, #28]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000090 	.word	0x20000090

080046d8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f4:	f3ef 8305 	mrs	r3, IPSR
 80046f8:	613b      	str	r3, [r7, #16]
  return(result);
 80046fa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10f      	bne.n	8004720 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004700:	f3ef 8310 	mrs	r3, PRIMASK
 8004704:	60fb      	str	r3, [r7, #12]
  return(result);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800470c:	f3ef 8311 	mrs	r3, BASEPRI
 8004710:	60bb      	str	r3, [r7, #8]
  return(result);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <osMutexRelease+0x50>
 8004718:	4b16      	ldr	r3, [pc, #88]	; (8004774 <osMutexRelease+0x9c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d103      	bne.n	8004728 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004720:	f06f 0305 	mvn.w	r3, #5
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	e01f      	b.n	8004768 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d103      	bne.n	8004736 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800472e:	f06f 0303 	mvn.w	r3, #3
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	e018      	b.n	8004768 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800473c:	69b8      	ldr	r0, [r7, #24]
 800473e:	f000 fa95 	bl	8004c6c <xQueueGiveMutexRecursive>
 8004742:	4603      	mov	r3, r0
 8004744:	2b01      	cmp	r3, #1
 8004746:	d00f      	beq.n	8004768 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004748:	f06f 0302 	mvn.w	r3, #2
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	e00b      	b.n	8004768 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004750:	2300      	movs	r3, #0
 8004752:	2200      	movs	r2, #0
 8004754:	2100      	movs	r1, #0
 8004756:	69b8      	ldr	r0, [r7, #24]
 8004758:	f000 faf0 	bl	8004d3c <xQueueGenericSend>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	d002      	beq.n	8004768 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004762:	f06f 0302 	mvn.w	r3, #2
 8004766:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004768:	69fb      	ldr	r3, [r7, #28]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000090 	.word	0x20000090

08004778 <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004798:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4a06      	ldr	r2, [pc, #24]	; (80047b8 <vApplicationGetIdleTaskMemory+0x30>)
 800479e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2280      	movs	r2, #128	; 0x80
 80047a4:	601a      	str	r2, [r3, #0]
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000094 	.word	0x20000094
 80047b8:	200000f0 	.word	0x200000f0

080047bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a07      	ldr	r2, [pc, #28]	; (80047e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80047cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	4a06      	ldr	r2, [pc, #24]	; (80047ec <vApplicationGetTimerTaskMemory+0x30>)
 80047d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047da:	601a      	str	r2, [r3, #0]
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	200002f0 	.word	0x200002f0
 80047ec:	2000034c 	.word	0x2000034c

080047f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f103 0208 	add.w	r2, r3, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f04f 32ff 	mov.w	r2, #4294967295
 8004808:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f103 0208 	add.w	r2, r3, #8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f103 0208 	add.w	r2, r3, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	601a      	str	r2, [r3, #0]
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d103      	bne.n	80048b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e00c      	b.n	80048cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3308      	adds	r3, #8
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e002      	b.n	80048c0 <vListInsert+0x2e>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d2f6      	bcs.n	80048ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	601a      	str	r2, [r3, #0]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6892      	ldr	r2, [r2, #8]
 800491a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6852      	ldr	r2, [r2, #4]
 8004924:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d103      	bne.n	8004938 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	1e5a      	subs	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d109      	bne.n	8004980 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	e7fe      	b.n	800497e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004980:	f002 fbb4 	bl	80070ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498c:	68f9      	ldr	r1, [r7, #12]
 800498e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	441a      	add	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b0:	3b01      	subs	r3, #1
 80049b2:	68f9      	ldr	r1, [r7, #12]
 80049b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	441a      	add	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	22ff      	movs	r2, #255	; 0xff
 80049c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	22ff      	movs	r2, #255	; 0xff
 80049cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d114      	bne.n	8004a00 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01a      	beq.n	8004a14 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3310      	adds	r3, #16
 80049e2:	4618      	mov	r0, r3
 80049e4:	f001 fabe 	bl	8005f64 <xTaskRemoveFromEventList>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d012      	beq.n	8004a14 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049ee:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <xQueueGenericReset+0xcc>)
 80049f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	e009      	b.n	8004a14 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3310      	adds	r3, #16
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fef3 	bl	80047f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3324      	adds	r3, #36	; 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff feee 	bl	80047f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a14:	f002 fb98 	bl	8007148 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a18:	2301      	movs	r3, #1
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08e      	sub	sp, #56	; 0x38
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <xQueueGenericCreateStatic+0x28>
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4e:	e7fe      	b.n	8004a4e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <xQueueGenericCreateStatic+0x42>
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
 8004a68:	e7fe      	b.n	8004a68 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <xQueueGenericCreateStatic+0x4e>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <xQueueGenericCreateStatic+0x52>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <xQueueGenericCreateStatic+0x54>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d109      	bne.n	8004a94 <xQueueGenericCreateStatic+0x6c>
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	623b      	str	r3, [r7, #32]
 8004a92:	e7fe      	b.n	8004a92 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <xQueueGenericCreateStatic+0x78>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <xQueueGenericCreateStatic+0x7c>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <xQueueGenericCreateStatic+0x7e>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <xQueueGenericCreateStatic+0x96>
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	e7fe      	b.n	8004abc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004abe:	2350      	movs	r3, #80	; 0x50
 8004ac0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b50      	cmp	r3, #80	; 0x50
 8004ac6:	d009      	beq.n	8004adc <xQueueGenericCreateStatic+0xb4>
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	e7fe      	b.n	8004ada <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004adc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00d      	beq.n	8004b04 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004af0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f844 	bl	8004b8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3730      	adds	r7, #48	; 0x30
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b08a      	sub	sp, #40	; 0x28
 8004b12:	af02      	add	r7, sp, #8
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <xQueueGenericCreate+0x28>
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e7fe      	b.n	8004b34 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d102      	bne.n	8004b42 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e004      	b.n	8004b4c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	3350      	adds	r3, #80	; 0x50
 8004b50:	4618      	mov	r0, r3
 8004b52:	f002 fbe5 	bl	8007320 <pvPortMalloc>
 8004b56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d011      	beq.n	8004b82 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	3350      	adds	r3, #80	; 0x50
 8004b66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b70:	79fa      	ldrb	r2, [r7, #7]
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f805 	bl	8004b8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b82:	69bb      	ldr	r3, [r7, #24]
	}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d103      	bne.n	8004ba8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e002      	b.n	8004bae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bba:	2101      	movs	r1, #1
 8004bbc:	69b8      	ldr	r0, [r7, #24]
 8004bbe:	f7ff fecb 	bl	8004958 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	78fa      	ldrb	r2, [r7, #3]
 8004bc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f89f 	bl	8004d3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c10:	2301      	movs	r3, #1
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	2300      	movs	r3, #0
 8004c16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6939      	ldr	r1, [r7, #16]
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f7ff ff75 	bl	8004b0e <xQueueGenericCreate>
 8004c24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7ff ffd3 	bl	8004bd2 <prvInitialiseMutex>

		return xNewQueue;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
	}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b088      	sub	sp, #32
 8004c3a:	af02      	add	r7, sp, #8
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	6039      	str	r1, [r7, #0]
 8004c40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c42:	2301      	movs	r3, #1
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2200      	movs	r2, #0
 8004c52:	6939      	ldr	r1, [r7, #16]
 8004c54:	6978      	ldr	r0, [r7, #20]
 8004c56:	f7ff fee7 	bl	8004a28 <xQueueGenericCreateStatic>
 8004c5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ffb8 	bl	8004bd2 <prvInitialiseMutex>

		return xNewQueue;
 8004c62:	68fb      	ldr	r3, [r7, #12]
	}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <xQueueGiveMutexRecursive+0x26>
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e7fe      	b.n	8004c90 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	689c      	ldr	r4, [r3, #8]
 8004c96:	f001 fb1b 	bl	80062d0 <xTaskGetCurrentTaskHandle>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	d111      	bne.n	8004cc4 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	1e5a      	subs	r2, r3, #1
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d105      	bne.n	8004cbe <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6938      	ldr	r0, [r7, #16]
 8004cba:	f000 f83f 	bl	8004d3c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e001      	b.n	8004cc8 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004cc8:	697b      	ldr	r3, [r7, #20]
	}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd90      	pop	{r4, r7, pc}

08004cd2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004cd2:	b590      	push	{r4, r7, lr}
 8004cd4:	b087      	sub	sp, #28
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <xQueueTakeMutexRecursive+0x28>
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	689c      	ldr	r4, [r3, #8]
 8004cfe:	f001 fae7 	bl	80062d0 <xTaskGetCurrentTaskHandle>
 8004d02:	4603      	mov	r3, r0
 8004d04:	429c      	cmp	r4, r3
 8004d06:	d107      	bne.n	8004d18 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004d12:	2301      	movs	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e00c      	b.n	8004d32 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004d18:	6839      	ldr	r1, [r7, #0]
 8004d1a:	6938      	ldr	r0, [r7, #16]
 8004d1c:	f000 fa78 	bl	8005210 <xQueueSemaphoreTake>
 8004d20:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004d32:	697b      	ldr	r3, [r7, #20]
	}
 8004d34:	4618      	mov	r0, r3
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd90      	pop	{r4, r7, pc}

08004d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08e      	sub	sp, #56	; 0x38
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <xQueueGenericSend+0x30>
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6a:	e7fe      	b.n	8004d6a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <xQueueGenericSend+0x3e>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <xQueueGenericSend+0x42>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <xQueueGenericSend+0x44>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d109      	bne.n	8004d98 <xQueueGenericSend+0x5c>
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
 8004d96:	e7fe      	b.n	8004d96 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d103      	bne.n	8004da6 <xQueueGenericSend+0x6a>
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <xQueueGenericSend+0x6e>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <xQueueGenericSend+0x70>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <xQueueGenericSend+0x88>
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	623b      	str	r3, [r7, #32]
 8004dc2:	e7fe      	b.n	8004dc2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dc4:	f001 fa94 	bl	80062f0 <xTaskGetSchedulerState>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <xQueueGenericSend+0x98>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <xQueueGenericSend+0x9c>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <xQueueGenericSend+0x9e>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d109      	bne.n	8004df2 <xQueueGenericSend+0xb6>
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	61fb      	str	r3, [r7, #28]
 8004df0:	e7fe      	b.n	8004df0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004df2:	f002 f97b 	bl	80070ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d302      	bcc.n	8004e08 <xQueueGenericSend+0xcc>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d129      	bne.n	8004e5c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e0e:	f000 fb1f 	bl	8005450 <prvCopyDataToQueue>
 8004e12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d010      	beq.n	8004e3e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	3324      	adds	r3, #36	; 0x24
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 f89f 	bl	8005f64 <xTaskRemoveFromEventList>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d013      	beq.n	8004e54 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e2c:	4b3f      	ldr	r3, [pc, #252]	; (8004f2c <xQueueGenericSend+0x1f0>)
 8004e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	e00a      	b.n	8004e54 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e44:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xQueueGenericSend+0x1f0>)
 8004e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e54:	f002 f978 	bl	8007148 <vPortExitCritical>
				return pdPASS;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e063      	b.n	8004f24 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e62:	f002 f971 	bl	8007148 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e05c      	b.n	8004f24 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e70:	f107 0314 	add.w	r3, r7, #20
 8004e74:	4618      	mov	r0, r3
 8004e76:	f001 f8d7 	bl	8006028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e7e:	f002 f963 	bl	8007148 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e82:	f000 fe53 	bl	8005b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e86:	f002 f931 	bl	80070ec <vPortEnterCritical>
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e90:	b25b      	sxtb	r3, r3
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d103      	bne.n	8004ea0 <xQueueGenericSend+0x164>
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea6:	b25b      	sxtb	r3, r3
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d103      	bne.n	8004eb6 <xQueueGenericSend+0x17a>
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb6:	f002 f947 	bl	8007148 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eba:	1d3a      	adds	r2, r7, #4
 8004ebc:	f107 0314 	add.w	r3, r7, #20
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 f8c6 	bl	8006054 <xTaskCheckForTimeOut>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d124      	bne.n	8004f18 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ed0:	f000 fbb6 	bl	8005640 <prvIsQueueFull>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d018      	beq.n	8004f0c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	3310      	adds	r3, #16
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fff0 	bl	8005ec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eea:	f000 fb41 	bl	8005570 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004eee:	f000 fe2b 	bl	8005b48 <xTaskResumeAll>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f af7c 	bne.w	8004df2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004efa:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <xQueueGenericSend+0x1f0>)
 8004efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	e772      	b.n	8004df2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f0e:	f000 fb2f 	bl	8005570 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f12:	f000 fe19 	bl	8005b48 <xTaskResumeAll>
 8004f16:	e76c      	b.n	8004df2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f1a:	f000 fb29 	bl	8005570 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f1e:	f000 fe13 	bl	8005b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3738      	adds	r7, #56	; 0x38
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08e      	sub	sp, #56	; 0x38
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <xQueueGenericSendFromISR+0x2c>
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5a:	e7fe      	b.n	8004f5a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d103      	bne.n	8004f6a <xQueueGenericSendFromISR+0x3a>
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <xQueueGenericSendFromISR+0x3e>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <xQueueGenericSendFromISR+0x40>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <xQueueGenericSendFromISR+0x58>
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	e7fe      	b.n	8004f86 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d103      	bne.n	8004f96 <xQueueGenericSendFromISR+0x66>
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <xQueueGenericSendFromISR+0x6a>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <xQueueGenericSendFromISR+0x6c>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <xQueueGenericSendFromISR+0x84>
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	e7fe      	b.n	8004fb2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fb4:	f002 f976 	bl	80072a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fb8:	f3ef 8211 	mrs	r2, BASEPRI
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	61ba      	str	r2, [r7, #24]
 8004fce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <xQueueGenericSendFromISR+0xb6>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d12c      	bne.n	8005040 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ff6:	f000 fa2b 	bl	8005450 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ffa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d112      	bne.n	800502a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d016      	beq.n	800503a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	3324      	adds	r3, #36	; 0x24
 8005010:	4618      	mov	r0, r3
 8005012:	f000 ffa7 	bl	8005f64 <xTaskRemoveFromEventList>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00e      	beq.n	800503a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e007      	b.n	800503a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800502a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800502e:	3301      	adds	r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	b25a      	sxtb	r2, r3
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800503a:	2301      	movs	r3, #1
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800503e:	e001      	b.n	8005044 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005040:	2300      	movs	r3, #0
 8005042:	637b      	str	r3, [r7, #52]	; 0x34
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800504e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005050:	4618      	mov	r0, r3
 8005052:	3738      	adds	r7, #56	; 0x38
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08c      	sub	sp, #48	; 0x30
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005064:	2300      	movs	r3, #0
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <xQueueReceive+0x2e>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	e7fe      	b.n	8005084 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d103      	bne.n	8005094 <xQueueReceive+0x3c>
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <xQueueReceive+0x40>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <xQueueReceive+0x42>
 8005098:	2300      	movs	r3, #0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <xQueueReceive+0x5a>
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	61fb      	str	r3, [r7, #28]
 80050b0:	e7fe      	b.n	80050b0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050b2:	f001 f91d 	bl	80062f0 <xTaskGetSchedulerState>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <xQueueReceive+0x6a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <xQueueReceive+0x6e>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <xQueueReceive+0x70>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <xQueueReceive+0x88>
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	e7fe      	b.n	80050de <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050e0:	f002 f804 	bl	80070ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01f      	beq.n	8005130 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f4:	f000 fa16 	bl	8005524 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	1e5a      	subs	r2, r3, #1
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00f      	beq.n	8005128 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	3310      	adds	r3, #16
 800510c:	4618      	mov	r0, r3
 800510e:	f000 ff29 	bl	8005f64 <xTaskRemoveFromEventList>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005118:	4b3c      	ldr	r3, [pc, #240]	; (800520c <xQueueReceive+0x1b4>)
 800511a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005128:	f002 f80e 	bl	8007148 <vPortExitCritical>
				return pdPASS;
 800512c:	2301      	movs	r3, #1
 800512e:	e069      	b.n	8005204 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d103      	bne.n	800513e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005136:	f002 f807 	bl	8007148 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800513a:	2300      	movs	r3, #0
 800513c:	e062      	b.n	8005204 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	4618      	mov	r0, r3
 800514a:	f000 ff6d 	bl	8006028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800514e:	2301      	movs	r3, #1
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005152:	f001 fff9 	bl	8007148 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005156:	f000 fce9 	bl	8005b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800515a:	f001 ffc7 	bl	80070ec <vPortEnterCritical>
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005164:	b25b      	sxtb	r3, r3
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d103      	bne.n	8005174 <xQueueReceive+0x11c>
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800517a:	b25b      	sxtb	r3, r3
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d103      	bne.n	800518a <xQueueReceive+0x132>
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800518a:	f001 ffdd 	bl	8007148 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800518e:	1d3a      	adds	r2, r7, #4
 8005190:	f107 0310 	add.w	r3, r7, #16
 8005194:	4611      	mov	r1, r2
 8005196:	4618      	mov	r0, r3
 8005198:	f000 ff5c 	bl	8006054 <xTaskCheckForTimeOut>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d123      	bne.n	80051ea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a4:	f000 fa36 	bl	8005614 <prvIsQueueEmpty>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d017      	beq.n	80051de <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	3324      	adds	r3, #36	; 0x24
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	4611      	mov	r1, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fe86 	bl	8005ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051be:	f000 f9d7 	bl	8005570 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051c2:	f000 fcc1 	bl	8005b48 <xTaskResumeAll>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d189      	bne.n	80050e0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <xQueueReceive+0x1b4>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	e780      	b.n	80050e0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e0:	f000 f9c6 	bl	8005570 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051e4:	f000 fcb0 	bl	8005b48 <xTaskResumeAll>
 80051e8:	e77a      	b.n	80050e0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051ec:	f000 f9c0 	bl	8005570 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051f0:	f000 fcaa 	bl	8005b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f6:	f000 fa0d 	bl	8005614 <prvIsQueueEmpty>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f43f af6f 	beq.w	80050e0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005202:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005204:	4618      	mov	r0, r3
 8005206:	3730      	adds	r7, #48	; 0x30
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	e000ed04 	.word	0xe000ed04

08005210 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08e      	sub	sp, #56	; 0x38
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800521a:	2300      	movs	r3, #0
 800521c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005222:	2300      	movs	r3, #0
 8005224:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <xQueueSemaphoreTake+0x30>
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	623b      	str	r3, [r7, #32]
 800523e:	e7fe      	b.n	800523e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <xQueueSemaphoreTake+0x4c>
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	61fb      	str	r3, [r7, #28]
 800525a:	e7fe      	b.n	800525a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800525c:	f001 f848 	bl	80062f0 <xTaskGetSchedulerState>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <xQueueSemaphoreTake+0x5c>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <xQueueSemaphoreTake+0x60>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <xQueueSemaphoreTake+0x62>
 8005270:	2300      	movs	r3, #0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <xQueueSemaphoreTake+0x7a>
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	e7fe      	b.n	8005288 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800528a:	f001 ff2f 	bl	80070ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	2b00      	cmp	r3, #0
 8005298:	d024      	beq.n	80052e4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	1e5a      	subs	r2, r3, #1
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d104      	bne.n	80052b4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80052aa:	f001 f993 	bl	80065d4 <pvTaskIncrementMutexHeldCount>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00f      	beq.n	80052dc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	3310      	adds	r3, #16
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fe4f 	bl	8005f64 <xTaskRemoveFromEventList>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052cc:	4b53      	ldr	r3, [pc, #332]	; (800541c <xQueueSemaphoreTake+0x20c>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052dc:	f001 ff34 	bl	8007148 <vPortExitCritical>
				return pdPASS;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e096      	b.n	8005412 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d110      	bne.n	800530c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d009      	beq.n	8005304 <xQueueSemaphoreTake+0xf4>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e7fe      	b.n	8005302 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005304:	f001 ff20 	bl	8007148 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005308:	2300      	movs	r3, #0
 800530a:	e082      	b.n	8005412 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005312:	f107 030c 	add.w	r3, r7, #12
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fe86 	bl	8006028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800531c:	2301      	movs	r3, #1
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005320:	f001 ff12 	bl	8007148 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005324:	f000 fc02 	bl	8005b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005328:	f001 fee0 	bl	80070ec <vPortEnterCritical>
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005332:	b25b      	sxtb	r3, r3
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d103      	bne.n	8005342 <xQueueSemaphoreTake+0x132>
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005348:	b25b      	sxtb	r3, r3
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d103      	bne.n	8005358 <xQueueSemaphoreTake+0x148>
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005358:	f001 fef6 	bl	8007148 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800535c:	463a      	mov	r2, r7
 800535e:	f107 030c 	add.w	r3, r7, #12
 8005362:	4611      	mov	r1, r2
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fe75 	bl	8006054 <xTaskCheckForTimeOut>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d132      	bne.n	80053d6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005372:	f000 f94f 	bl	8005614 <prvIsQueueEmpty>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d026      	beq.n	80053ca <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005384:	f001 feb2 	bl	80070ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4618      	mov	r0, r3
 800538e:	f000 ffcd 	bl	800632c <xTaskPriorityInherit>
 8005392:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005394:	f001 fed8 	bl	8007148 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	3324      	adds	r3, #36	; 0x24
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	4611      	mov	r1, r2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fd91 	bl	8005ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053a8:	f000 f8e2 	bl	8005570 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053ac:	f000 fbcc 	bl	8005b48 <xTaskResumeAll>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f47f af69 	bne.w	800528a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80053b8:	4b18      	ldr	r3, [pc, #96]	; (800541c <xQueueSemaphoreTake+0x20c>)
 80053ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	e75f      	b.n	800528a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80053ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053cc:	f000 f8d0 	bl	8005570 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053d0:	f000 fbba 	bl	8005b48 <xTaskResumeAll>
 80053d4:	e759      	b.n	800528a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80053d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053d8:	f000 f8ca 	bl	8005570 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053dc:	f000 fbb4 	bl	8005b48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053e2:	f000 f917 	bl	8005614 <prvIsQueueEmpty>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f43f af4e 	beq.w	800528a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80053f4:	f001 fe7a 	bl	80070ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80053f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053fa:	f000 f811 	bl	8005420 <prvGetDisinheritPriorityAfterTimeout>
 80053fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005406:	4618      	mov	r0, r3
 8005408:	f001 f864 	bl	80064d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800540c:	f001 fe9c 	bl	8007148 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005410:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005412:	4618      	mov	r0, r3
 8005414:	3738      	adds	r7, #56	; 0x38
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d006      	beq.n	800543e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e001      	b.n	8005442 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005442:	68fb      	ldr	r3, [r7, #12]
	}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10d      	bne.n	800548a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d14d      	bne.n	8005512 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 ffbe 	bl	80063fc <xTaskPriorityDisinherit>
 8005480:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	e043      	b.n	8005512 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d119      	bne.n	80054c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6858      	ldr	r0, [r3, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	461a      	mov	r2, r3
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	f003 f92a 	bl	80086f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	441a      	add	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d32b      	bcc.n	8005512 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	605a      	str	r2, [r3, #4]
 80054c2:	e026      	b.n	8005512 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	68d8      	ldr	r0, [r3, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	461a      	mov	r2, r3
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	f003 f910 	bl	80086f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	425b      	negs	r3, r3
 80054de:	441a      	add	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d207      	bcs.n	8005500 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	425b      	negs	r3, r3
 80054fa:	441a      	add	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d105      	bne.n	8005512 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	3b01      	subs	r3, #1
 8005510:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800551a:	697b      	ldr	r3, [r7, #20]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d018      	beq.n	8005568 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	441a      	add	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	d303      	bcc.n	8005558 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68d9      	ldr	r1, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	461a      	mov	r2, r3
 8005562:	6838      	ldr	r0, [r7, #0]
 8005564:	f003 f8c6 	bl	80086f4 <memcpy>
	}
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005578:	f001 fdb8 	bl	80070ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005582:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005584:	e011      	b.n	80055aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	2b00      	cmp	r3, #0
 800558c:	d012      	beq.n	80055b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3324      	adds	r3, #36	; 0x24
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fce6 	bl	8005f64 <xTaskRemoveFromEventList>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800559e:	f000 fdb9 	bl	8006114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	dce9      	bgt.n	8005586 <prvUnlockQueue+0x16>
 80055b2:	e000      	b.n	80055b6 <prvUnlockQueue+0x46>
					break;
 80055b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	22ff      	movs	r2, #255	; 0xff
 80055ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055be:	f001 fdc3 	bl	8007148 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055c2:	f001 fd93 	bl	80070ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055ce:	e011      	b.n	80055f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d012      	beq.n	80055fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3310      	adds	r3, #16
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fcc1 	bl	8005f64 <xTaskRemoveFromEventList>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055e8:	f000 fd94 	bl	8006114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055ec:	7bbb      	ldrb	r3, [r7, #14]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	dce9      	bgt.n	80055d0 <prvUnlockQueue+0x60>
 80055fc:	e000      	b.n	8005600 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	22ff      	movs	r2, #255	; 0xff
 8005604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005608:	f001 fd9e 	bl	8007148 <vPortExitCritical>
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800561c:	f001 fd66 	bl	80070ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005628:	2301      	movs	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e001      	b.n	8005632 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005632:	f001 fd89 	bl	8007148 <vPortExitCritical>

	return xReturn;
 8005636:	68fb      	ldr	r3, [r7, #12]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005648:	f001 fd50 	bl	80070ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	429a      	cmp	r2, r3
 8005656:	d102      	bne.n	800565e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005658:	2301      	movs	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	e001      	b.n	8005662 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005662:	f001 fd71 	bl	8007148 <vPortExitCritical>

	return xReturn;
 8005666:	68fb      	ldr	r3, [r7, #12]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e014      	b.n	80056aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005680:	4a0e      	ldr	r2, [pc, #56]	; (80056bc <vQueueAddToRegistry+0x4c>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800568c:	490b      	ldr	r1, [pc, #44]	; (80056bc <vQueueAddToRegistry+0x4c>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005696:	4a09      	ldr	r2, [pc, #36]	; (80056bc <vQueueAddToRegistry+0x4c>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056a2:	e005      	b.n	80056b0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3301      	adds	r3, #1
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b07      	cmp	r3, #7
 80056ae:	d9e7      	bls.n	8005680 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	2000277c 	.word	0x2000277c

080056c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056d0:	f001 fd0c 	bl	80070ec <vPortEnterCritical>
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056da:	b25b      	sxtb	r3, r3
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d103      	bne.n	80056ea <vQueueWaitForMessageRestricted+0x2a>
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056f0:	b25b      	sxtb	r3, r3
 80056f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f6:	d103      	bne.n	8005700 <vQueueWaitForMessageRestricted+0x40>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005700:	f001 fd22 	bl	8007148 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	3324      	adds	r3, #36	; 0x24
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fbfb 	bl	8005f10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800571a:	6978      	ldr	r0, [r7, #20]
 800571c:	f7ff ff28 	bl	8005570 <prvUnlockQueue>
	}
 8005720:	bf00      	nop
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08e      	sub	sp, #56	; 0x38
 800572c:	af04      	add	r7, sp, #16
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	2b00      	cmp	r3, #0
 800573a:	d109      	bne.n	8005750 <xTaskCreateStatic+0x28>
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	623b      	str	r3, [r7, #32]
 800574e:	e7fe      	b.n	800574e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <xTaskCreateStatic+0x42>
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	e7fe      	b.n	8005768 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800576a:	235c      	movs	r3, #92	; 0x5c
 800576c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b5c      	cmp	r3, #92	; 0x5c
 8005772:	d009      	beq.n	8005788 <xTaskCreateStatic+0x60>
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e7fe      	b.n	8005786 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005788:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01e      	beq.n	80057ce <xTaskCreateStatic+0xa6>
 8005790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01b      	beq.n	80057ce <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800579e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057a8:	2300      	movs	r3, #0
 80057aa:	9303      	str	r3, [sp, #12]
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	9302      	str	r3, [sp, #8]
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f850 	bl	8005866 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057c8:	f000 f8dc 	bl	8005984 <prvAddNewTaskToReadyList>
 80057cc:	e001      	b.n	80057d2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057d2:	697b      	ldr	r3, [r7, #20]
	}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3728      	adds	r7, #40	; 0x28
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	; 0x30
 80057e0:	af04      	add	r7, sp, #16
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057ec:	88fb      	ldrh	r3, [r7, #6]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 fd95 	bl	8007320 <pvPortMalloc>
 80057f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00e      	beq.n	800581c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057fe:	205c      	movs	r0, #92	; 0x5c
 8005800:	f001 fd8e 	bl	8007320 <pvPortMalloc>
 8005804:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
 8005812:	e005      	b.n	8005820 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005814:	6978      	ldr	r0, [r7, #20]
 8005816:	f001 fe49 	bl	80074ac <vPortFree>
 800581a:	e001      	b.n	8005820 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d017      	beq.n	8005856 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800582e:	88fa      	ldrh	r2, [r7, #6]
 8005830:	2300      	movs	r3, #0
 8005832:	9303      	str	r3, [sp, #12]
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f80e 	bl	8005866 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800584a:	69f8      	ldr	r0, [r7, #28]
 800584c:	f000 f89a 	bl	8005984 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005850:	2301      	movs	r3, #1
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	e002      	b.n	800585c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005856:	f04f 33ff 	mov.w	r3, #4294967295
 800585a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800585c:	69bb      	ldr	r3, [r7, #24]
	}
 800585e:	4618      	mov	r0, r3
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b088      	sub	sp, #32
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	461a      	mov	r2, r3
 800587e:	21a5      	movs	r1, #165	; 0xa5
 8005880:	f002 ff43 	bl	800870a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800588e:	3b01      	subs	r3, #1
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f023 0307 	bic.w	r3, r3, #7
 800589c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <prvInitialiseNewTask+0x56>
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	e7fe      	b.n	80058ba <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01f      	beq.n	8005902 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	e012      	b.n	80058ee <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	7819      	ldrb	r1, [r3, #0]
 80058d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	3334      	adds	r3, #52	; 0x34
 80058d8:	460a      	mov	r2, r1
 80058da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d006      	beq.n	80058f6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	3301      	adds	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	2b0f      	cmp	r3, #15
 80058f2:	d9e9      	bls.n	80058c8 <prvInitialiseNewTask+0x62>
 80058f4:	e000      	b.n	80058f8 <prvInitialiseNewTask+0x92>
			{
				break;
 80058f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005900:	e003      	b.n	800590a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	2b37      	cmp	r3, #55	; 0x37
 800590e:	d901      	bls.n	8005914 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005910:	2337      	movs	r3, #55	; 0x37
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005918:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800591e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	2200      	movs	r2, #0
 8005924:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	3304      	adds	r3, #4
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe ff80 	bl	8004830 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	3318      	adds	r3, #24
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe ff7b 	bl	8004830 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	2200      	movs	r2, #0
 8005954:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	68f9      	ldr	r1, [r7, #12]
 8005962:	69b8      	ldr	r0, [r7, #24]
 8005964:	f001 fa9c 	bl	8006ea0 <pxPortInitialiseStack>
 8005968:	4602      	mov	r2, r0
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800597a:	bf00      	nop
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800598c:	f001 fbae 	bl	80070ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005990:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <prvAddNewTaskToReadyList+0xc4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3301      	adds	r3, #1
 8005996:	4a2c      	ldr	r2, [pc, #176]	; (8005a48 <prvAddNewTaskToReadyList+0xc4>)
 8005998:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800599a:	4b2c      	ldr	r3, [pc, #176]	; (8005a4c <prvAddNewTaskToReadyList+0xc8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059a2:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <prvAddNewTaskToReadyList+0xc8>)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059a8:	4b27      	ldr	r3, [pc, #156]	; (8005a48 <prvAddNewTaskToReadyList+0xc4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d110      	bne.n	80059d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059b0:	f000 fbd4 	bl	800615c <prvInitialiseTaskLists>
 80059b4:	e00d      	b.n	80059d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059b6:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <prvAddNewTaskToReadyList+0xcc>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059be:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <prvAddNewTaskToReadyList+0xc8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d802      	bhi.n	80059d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059cc:	4a1f      	ldr	r2, [pc, #124]	; (8005a4c <prvAddNewTaskToReadyList+0xc8>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059d2:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <prvAddNewTaskToReadyList+0xd0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3301      	adds	r3, #1
 80059d8:	4a1e      	ldr	r2, [pc, #120]	; (8005a54 <prvAddNewTaskToReadyList+0xd0>)
 80059da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059dc:	4b1d      	ldr	r3, [pc, #116]	; (8005a54 <prvAddNewTaskToReadyList+0xd0>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e8:	4b1b      	ldr	r3, [pc, #108]	; (8005a58 <prvAddNewTaskToReadyList+0xd4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d903      	bls.n	80059f8 <prvAddNewTaskToReadyList+0x74>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	4a18      	ldr	r2, [pc, #96]	; (8005a58 <prvAddNewTaskToReadyList+0xd4>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <prvAddNewTaskToReadyList+0xd8>)
 8005a06:	441a      	add	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f7fe ff1b 	bl	800484a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a14:	f001 fb98 	bl	8007148 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a18:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <prvAddNewTaskToReadyList+0xcc>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00e      	beq.n	8005a3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a20:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <prvAddNewTaskToReadyList+0xc8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d207      	bcs.n	8005a3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <prvAddNewTaskToReadyList+0xdc>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000c20 	.word	0x20000c20
 8005a4c:	2000074c 	.word	0x2000074c
 8005a50:	20000c2c 	.word	0x20000c2c
 8005a54:	20000c3c 	.word	0x20000c3c
 8005a58:	20000c28 	.word	0x20000c28
 8005a5c:	20000750 	.word	0x20000750
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a72:	463a      	mov	r2, r7
 8005a74:	1d39      	adds	r1, r7, #4
 8005a76:	f107 0308 	add.w	r3, r7, #8
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fe fe84 	bl	8004788 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	9202      	str	r2, [sp, #8]
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	460a      	mov	r2, r1
 8005a92:	4920      	ldr	r1, [pc, #128]	; (8005b14 <vTaskStartScheduler+0xb0>)
 8005a94:	4820      	ldr	r0, [pc, #128]	; (8005b18 <vTaskStartScheduler+0xb4>)
 8005a96:	f7ff fe47 	bl	8005728 <xTaskCreateStatic>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	4b1f      	ldr	r3, [pc, #124]	; (8005b1c <vTaskStartScheduler+0xb8>)
 8005a9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005aa0:	4b1e      	ldr	r3, [pc, #120]	; (8005b1c <vTaskStartScheduler+0xb8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e001      	b.n	8005ab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d102      	bne.n	8005abe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ab8:	f000 fdf4 	bl	80066a4 <xTimerCreateTimerTask>
 8005abc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d115      	bne.n	8005af0 <vTaskStartScheduler+0x8c>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <vTaskStartScheduler+0xbc>)
 8005ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8005adc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ade:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <vTaskStartScheduler+0xc0>)
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ae4:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <vTaskStartScheduler+0xc4>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005aea:	f001 fa61 	bl	8006fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005aee:	e00d      	b.n	8005b0c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d109      	bne.n	8005b0c <vTaskStartScheduler+0xa8>
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	e7fe      	b.n	8005b0a <vTaskStartScheduler+0xa6>
}
 8005b0c:	bf00      	nop
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	08008f2c 	.word	0x08008f2c
 8005b18:	0800612d 	.word	0x0800612d
 8005b1c:	20000c44 	.word	0x20000c44
 8005b20:	20000c40 	.word	0x20000c40
 8005b24:	20000c2c 	.word	0x20000c2c
 8005b28:	20000c24 	.word	0x20000c24

08005b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b30:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <vTaskSuspendAll+0x18>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3301      	adds	r3, #1
 8005b36:	4a03      	ldr	r2, [pc, #12]	; (8005b44 <vTaskSuspendAll+0x18>)
 8005b38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005b3a:	bf00      	nop
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	20000c48 	.word	0x20000c48

08005b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b56:	4b41      	ldr	r3, [pc, #260]	; (8005c5c <xTaskResumeAll+0x114>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <xTaskResumeAll+0x2a>
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	e7fe      	b.n	8005b70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b72:	f001 fabb 	bl	80070ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b76:	4b39      	ldr	r3, [pc, #228]	; (8005c5c <xTaskResumeAll+0x114>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	4a37      	ldr	r2, [pc, #220]	; (8005c5c <xTaskResumeAll+0x114>)
 8005b7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b80:	4b36      	ldr	r3, [pc, #216]	; (8005c5c <xTaskResumeAll+0x114>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d162      	bne.n	8005c4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b88:	4b35      	ldr	r3, [pc, #212]	; (8005c60 <xTaskResumeAll+0x118>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d05e      	beq.n	8005c4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b90:	e02f      	b.n	8005bf2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b92:	4b34      	ldr	r3, [pc, #208]	; (8005c64 <xTaskResumeAll+0x11c>)
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3318      	adds	r3, #24
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe feb0 	bl	8004904 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe feab 	bl	8004904 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb2:	4b2d      	ldr	r3, [pc, #180]	; (8005c68 <xTaskResumeAll+0x120>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d903      	bls.n	8005bc2 <xTaskResumeAll+0x7a>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	4a2a      	ldr	r2, [pc, #168]	; (8005c68 <xTaskResumeAll+0x120>)
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4a27      	ldr	r2, [pc, #156]	; (8005c6c <xTaskResumeAll+0x124>)
 8005bd0:	441a      	add	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f7fe fe36 	bl	800484a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be2:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <xTaskResumeAll+0x128>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d302      	bcc.n	8005bf2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005bec:	4b21      	ldr	r3, [pc, #132]	; (8005c74 <xTaskResumeAll+0x12c>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <xTaskResumeAll+0x11c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1cb      	bne.n	8005b92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c00:	f000 fb46 	bl	8006290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c04:	4b1c      	ldr	r3, [pc, #112]	; (8005c78 <xTaskResumeAll+0x130>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d010      	beq.n	8005c32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c10:	f000 f846 	bl	8005ca0 <xTaskIncrementTick>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c1a:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <xTaskResumeAll+0x12c>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f1      	bne.n	8005c10 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005c2c:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <xTaskResumeAll+0x130>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c32:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <xTaskResumeAll+0x12c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c3e:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <xTaskResumeAll+0x134>)
 8005c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c4e:	f001 fa7b 	bl	8007148 <vPortExitCritical>

	return xAlreadyYielded;
 8005c52:	68bb      	ldr	r3, [r7, #8]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000c48 	.word	0x20000c48
 8005c60:	20000c20 	.word	0x20000c20
 8005c64:	20000be0 	.word	0x20000be0
 8005c68:	20000c28 	.word	0x20000c28
 8005c6c:	20000750 	.word	0x20000750
 8005c70:	2000074c 	.word	0x2000074c
 8005c74:	20000c34 	.word	0x20000c34
 8005c78:	20000c30 	.word	0x20000c30
 8005c7c:	e000ed04 	.word	0xe000ed04

08005c80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c86:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <xTaskGetTickCount+0x1c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c8c:	687b      	ldr	r3, [r7, #4]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20000c24 	.word	0x20000c24

08005ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005caa:	4b4e      	ldr	r3, [pc, #312]	; (8005de4 <xTaskIncrementTick+0x144>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 8088 	bne.w	8005dc4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cb4:	4b4c      	ldr	r3, [pc, #304]	; (8005de8 <xTaskIncrementTick+0x148>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cbc:	4a4a      	ldr	r2, [pc, #296]	; (8005de8 <xTaskIncrementTick+0x148>)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d11f      	bne.n	8005d08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cc8:	4b48      	ldr	r3, [pc, #288]	; (8005dec <xTaskIncrementTick+0x14c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <xTaskIncrementTick+0x46>
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	e7fe      	b.n	8005ce4 <xTaskIncrementTick+0x44>
 8005ce6:	4b41      	ldr	r3, [pc, #260]	; (8005dec <xTaskIncrementTick+0x14c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	4b40      	ldr	r3, [pc, #256]	; (8005df0 <xTaskIncrementTick+0x150>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a3e      	ldr	r2, [pc, #248]	; (8005dec <xTaskIncrementTick+0x14c>)
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	4a3e      	ldr	r2, [pc, #248]	; (8005df0 <xTaskIncrementTick+0x150>)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b3e      	ldr	r3, [pc, #248]	; (8005df4 <xTaskIncrementTick+0x154>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	4a3c      	ldr	r2, [pc, #240]	; (8005df4 <xTaskIncrementTick+0x154>)
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	f000 fac4 	bl	8006290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d08:	4b3b      	ldr	r3, [pc, #236]	; (8005df8 <xTaskIncrementTick+0x158>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d349      	bcc.n	8005da6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d12:	4b36      	ldr	r3, [pc, #216]	; (8005dec <xTaskIncrementTick+0x14c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d104      	bne.n	8005d26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d1c:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <xTaskIncrementTick+0x158>)
 8005d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d22:	601a      	str	r2, [r3, #0]
					break;
 8005d24:	e03f      	b.n	8005da6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d26:	4b31      	ldr	r3, [pc, #196]	; (8005dec <xTaskIncrementTick+0x14c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d203      	bcs.n	8005d46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d3e:	4a2e      	ldr	r2, [pc, #184]	; (8005df8 <xTaskIncrementTick+0x158>)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d44:	e02f      	b.n	8005da6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe fdda 	bl	8004904 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	3318      	adds	r3, #24
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe fdd1 	bl	8004904 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	4b25      	ldr	r3, [pc, #148]	; (8005dfc <xTaskIncrementTick+0x15c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d903      	bls.n	8005d76 <xTaskIncrementTick+0xd6>
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <xTaskIncrementTick+0x15c>)
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4a1f      	ldr	r2, [pc, #124]	; (8005e00 <xTaskIncrementTick+0x160>)
 8005d84:	441a      	add	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f7fe fd5c 	bl	800484a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d96:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <xTaskIncrementTick+0x164>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d3b8      	bcc.n	8005d12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da4:	e7b5      	b.n	8005d12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005da6:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <xTaskIncrementTick+0x164>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	4914      	ldr	r1, [pc, #80]	; (8005e00 <xTaskIncrementTick+0x160>)
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d907      	bls.n	8005dce <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e004      	b.n	8005dce <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005dc4:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <xTaskIncrementTick+0x168>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	4a0f      	ldr	r2, [pc, #60]	; (8005e08 <xTaskIncrementTick+0x168>)
 8005dcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005dce:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <xTaskIncrementTick+0x16c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005dda:	697b      	ldr	r3, [r7, #20]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000c48 	.word	0x20000c48
 8005de8:	20000c24 	.word	0x20000c24
 8005dec:	20000bd8 	.word	0x20000bd8
 8005df0:	20000bdc 	.word	0x20000bdc
 8005df4:	20000c38 	.word	0x20000c38
 8005df8:	20000c40 	.word	0x20000c40
 8005dfc:	20000c28 	.word	0x20000c28
 8005e00:	20000750 	.word	0x20000750
 8005e04:	2000074c 	.word	0x2000074c
 8005e08:	20000c30 	.word	0x20000c30
 8005e0c:	20000c34 	.word	0x20000c34

08005e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e16:	4b27      	ldr	r3, [pc, #156]	; (8005eb4 <vTaskSwitchContext+0xa4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e1e:	4b26      	ldr	r3, [pc, #152]	; (8005eb8 <vTaskSwitchContext+0xa8>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e24:	e040      	b.n	8005ea8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005e26:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <vTaskSwitchContext+0xa8>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2c:	4b23      	ldr	r3, [pc, #140]	; (8005ebc <vTaskSwitchContext+0xac>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e00f      	b.n	8005e54 <vTaskSwitchContext+0x44>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <vTaskSwitchContext+0x3e>
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	e7fe      	b.n	8005e4c <vTaskSwitchContext+0x3c>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	491a      	ldr	r1, [pc, #104]	; (8005ec0 <vTaskSwitchContext+0xb0>)
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0e5      	beq.n	8005e34 <vTaskSwitchContext+0x24>
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4a13      	ldr	r2, [pc, #76]	; (8005ec0 <vTaskSwitchContext+0xb0>)
 8005e74:	4413      	add	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	3308      	adds	r3, #8
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d104      	bne.n	8005e98 <vTaskSwitchContext+0x88>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	605a      	str	r2, [r3, #4]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <vTaskSwitchContext+0xb4>)
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	4a06      	ldr	r2, [pc, #24]	; (8005ebc <vTaskSwitchContext+0xac>)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6013      	str	r3, [r2, #0]
}
 8005ea8:	bf00      	nop
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	20000c48 	.word	0x20000c48
 8005eb8:	20000c34 	.word	0x20000c34
 8005ebc:	20000c28 	.word	0x20000c28
 8005ec0:	20000750 	.word	0x20000750
 8005ec4:	2000074c 	.word	0x2000074c

08005ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d109      	bne.n	8005eec <vTaskPlaceOnEventList+0x24>
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	e7fe      	b.n	8005eea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <vTaskPlaceOnEventList+0x44>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3318      	adds	r3, #24
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7fe fccc 	bl	8004892 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005efa:	2101      	movs	r1, #1
 8005efc:	6838      	ldr	r0, [r7, #0]
 8005efe:	f000 fb7d 	bl	80065fc <prvAddCurrentTaskToDelayedList>
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	2000074c 	.word	0x2000074c

08005f10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <vTaskPlaceOnEventListRestricted+0x26>
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e7fe      	b.n	8005f34 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f36:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <vTaskPlaceOnEventListRestricted+0x50>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3318      	adds	r3, #24
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7fe fc83 	bl	800484a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	68b8      	ldr	r0, [r7, #8]
 8005f54:	f000 fb52 	bl	80065fc <prvAddCurrentTaskToDelayedList>
	}
 8005f58:	bf00      	nop
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	2000074c 	.word	0x2000074c

08005f64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <xTaskRemoveFromEventList+0x2a>
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	e7fe      	b.n	8005f8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	3318      	adds	r3, #24
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe fcb6 	bl	8004904 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f98:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <xTaskRemoveFromEventList+0xac>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11d      	bne.n	8005fdc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fe fcad 	bl	8004904 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	4b19      	ldr	r3, [pc, #100]	; (8006014 <xTaskRemoveFromEventList+0xb0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d903      	bls.n	8005fbe <xTaskRemoveFromEventList+0x5a>
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	4a16      	ldr	r2, [pc, #88]	; (8006014 <xTaskRemoveFromEventList+0xb0>)
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4a13      	ldr	r2, [pc, #76]	; (8006018 <xTaskRemoveFromEventList+0xb4>)
 8005fcc:	441a      	add	r2, r3
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f7fe fc38 	bl	800484a <vListInsertEnd>
 8005fda:	e005      	b.n	8005fe8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	3318      	adds	r3, #24
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	480e      	ldr	r0, [pc, #56]	; (800601c <xTaskRemoveFromEventList+0xb8>)
 8005fe4:	f7fe fc31 	bl	800484a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fec:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <xTaskRemoveFromEventList+0xbc>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d905      	bls.n	8006002 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <xTaskRemoveFromEventList+0xc0>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	e001      	b.n	8006006 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006006:	697b      	ldr	r3, [r7, #20]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000c48 	.word	0x20000c48
 8006014:	20000c28 	.word	0x20000c28
 8006018:	20000750 	.word	0x20000750
 800601c:	20000be0 	.word	0x20000be0
 8006020:	2000074c 	.word	0x2000074c
 8006024:	20000c34 	.word	0x20000c34

08006028 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006030:	4b06      	ldr	r3, [pc, #24]	; (800604c <vTaskInternalSetTimeOutState+0x24>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <vTaskInternalSetTimeOutState+0x28>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	605a      	str	r2, [r3, #4]
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	20000c38 	.word	0x20000c38
 8006050:	20000c24 	.word	0x20000c24

08006054 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <xTaskCheckForTimeOut+0x24>
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	e7fe      	b.n	8006076 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <xTaskCheckForTimeOut+0x3e>
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	e7fe      	b.n	8006090 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006092:	f001 f82b 	bl	80070ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006096:	4b1d      	ldr	r3, [pc, #116]	; (800610c <xTaskCheckForTimeOut+0xb8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d102      	bne.n	80060b6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	e023      	b.n	80060fe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b15      	ldr	r3, [pc, #84]	; (8006110 <xTaskCheckForTimeOut+0xbc>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d007      	beq.n	80060d2 <xTaskCheckForTimeOut+0x7e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d302      	bcc.n	80060d2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060cc:	2301      	movs	r3, #1
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	e015      	b.n	80060fe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d20b      	bcs.n	80060f4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	1ad2      	subs	r2, r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff ff9d 	bl	8006028 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	e004      	b.n	80060fe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060fa:	2301      	movs	r3, #1
 80060fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060fe:	f001 f823 	bl	8007148 <vPortExitCritical>

	return xReturn;
 8006102:	69fb      	ldr	r3, [r7, #28]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000c24 	.word	0x20000c24
 8006110:	20000c38 	.word	0x20000c38

08006114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006118:	4b03      	ldr	r3, [pc, #12]	; (8006128 <vTaskMissedYield+0x14>)
 800611a:	2201      	movs	r2, #1
 800611c:	601a      	str	r2, [r3, #0]
}
 800611e:	bf00      	nop
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	20000c34 	.word	0x20000c34

0800612c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006134:	f000 f852 	bl	80061dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006138:	4b06      	ldr	r3, [pc, #24]	; (8006154 <prvIdleTask+0x28>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d9f9      	bls.n	8006134 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006140:	4b05      	ldr	r3, [pc, #20]	; (8006158 <prvIdleTask+0x2c>)
 8006142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006150:	e7f0      	b.n	8006134 <prvIdleTask+0x8>
 8006152:	bf00      	nop
 8006154:	20000750 	.word	0x20000750
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006162:	2300      	movs	r3, #0
 8006164:	607b      	str	r3, [r7, #4]
 8006166:	e00c      	b.n	8006182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4a12      	ldr	r2, [pc, #72]	; (80061bc <prvInitialiseTaskLists+0x60>)
 8006174:	4413      	add	r3, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fb3a 	bl	80047f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3301      	adds	r3, #1
 8006180:	607b      	str	r3, [r7, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b37      	cmp	r3, #55	; 0x37
 8006186:	d9ef      	bls.n	8006168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006188:	480d      	ldr	r0, [pc, #52]	; (80061c0 <prvInitialiseTaskLists+0x64>)
 800618a:	f7fe fb31 	bl	80047f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800618e:	480d      	ldr	r0, [pc, #52]	; (80061c4 <prvInitialiseTaskLists+0x68>)
 8006190:	f7fe fb2e 	bl	80047f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006194:	480c      	ldr	r0, [pc, #48]	; (80061c8 <prvInitialiseTaskLists+0x6c>)
 8006196:	f7fe fb2b 	bl	80047f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800619a:	480c      	ldr	r0, [pc, #48]	; (80061cc <prvInitialiseTaskLists+0x70>)
 800619c:	f7fe fb28 	bl	80047f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061a0:	480b      	ldr	r0, [pc, #44]	; (80061d0 <prvInitialiseTaskLists+0x74>)
 80061a2:	f7fe fb25 	bl	80047f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061a6:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <prvInitialiseTaskLists+0x78>)
 80061a8:	4a05      	ldr	r2, [pc, #20]	; (80061c0 <prvInitialiseTaskLists+0x64>)
 80061aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <prvInitialiseTaskLists+0x7c>)
 80061ae:	4a05      	ldr	r2, [pc, #20]	; (80061c4 <prvInitialiseTaskLists+0x68>)
 80061b0:	601a      	str	r2, [r3, #0]
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000750 	.word	0x20000750
 80061c0:	20000bb0 	.word	0x20000bb0
 80061c4:	20000bc4 	.word	0x20000bc4
 80061c8:	20000be0 	.word	0x20000be0
 80061cc:	20000bf4 	.word	0x20000bf4
 80061d0:	20000c0c 	.word	0x20000c0c
 80061d4:	20000bd8 	.word	0x20000bd8
 80061d8:	20000bdc 	.word	0x20000bdc

080061dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061e2:	e019      	b.n	8006218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061e4:	f000 ff82 	bl	80070ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e8:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <prvCheckTasksWaitingTermination+0x4c>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fe fb85 	bl	8004904 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061fa:	4b0c      	ldr	r3, [pc, #48]	; (800622c <prvCheckTasksWaitingTermination+0x50>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3b01      	subs	r3, #1
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <prvCheckTasksWaitingTermination+0x50>)
 8006202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <prvCheckTasksWaitingTermination+0x54>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3b01      	subs	r3, #1
 800620a:	4a09      	ldr	r2, [pc, #36]	; (8006230 <prvCheckTasksWaitingTermination+0x54>)
 800620c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800620e:	f000 ff9b 	bl	8007148 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f80e 	bl	8006234 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006218:	4b05      	ldr	r3, [pc, #20]	; (8006230 <prvCheckTasksWaitingTermination+0x54>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e1      	bne.n	80061e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20000bf4 	.word	0x20000bf4
 800622c:	20000c20 	.word	0x20000c20
 8006230:	20000c08 	.word	0x20000c08

08006234 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006242:	2b00      	cmp	r3, #0
 8006244:	d108      	bne.n	8006258 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	4618      	mov	r0, r3
 800624c:	f001 f92e 	bl	80074ac <vPortFree>
				vPortFree( pxTCB );
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 f92b 	bl	80074ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006256:	e017      	b.n	8006288 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800625e:	2b01      	cmp	r3, #1
 8006260:	d103      	bne.n	800626a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 f922 	bl	80074ac <vPortFree>
	}
 8006268:	e00e      	b.n	8006288 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006270:	2b02      	cmp	r3, #2
 8006272:	d009      	beq.n	8006288 <prvDeleteTCB+0x54>
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e7fe      	b.n	8006286 <prvDeleteTCB+0x52>
	}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <prvResetNextTaskUnblockTime+0x38>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <prvResetNextTaskUnblockTime+0x3c>)
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062a8:	e008      	b.n	80062bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062aa:	4b07      	ldr	r3, [pc, #28]	; (80062c8 <prvResetNextTaskUnblockTime+0x38>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4a04      	ldr	r2, [pc, #16]	; (80062cc <prvResetNextTaskUnblockTime+0x3c>)
 80062ba:	6013      	str	r3, [r2, #0]
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	20000bd8 	.word	0x20000bd8
 80062cc:	20000c40 	.word	0x20000c40

080062d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <xTaskGetCurrentTaskHandle+0x1c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	607b      	str	r3, [r7, #4]

		return xReturn;
 80062dc:	687b      	ldr	r3, [r7, #4]
	}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	2000074c 	.word	0x2000074c

080062f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <xTaskGetSchedulerState+0x34>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062fe:	2301      	movs	r3, #1
 8006300:	607b      	str	r3, [r7, #4]
 8006302:	e008      	b.n	8006316 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006304:	4b08      	ldr	r3, [pc, #32]	; (8006328 <xTaskGetSchedulerState+0x38>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800630c:	2302      	movs	r3, #2
 800630e:	607b      	str	r3, [r7, #4]
 8006310:	e001      	b.n	8006316 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006312:	2300      	movs	r3, #0
 8006314:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006316:	687b      	ldr	r3, [r7, #4]
	}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	20000c2c 	.word	0x20000c2c
 8006328:	20000c48 	.word	0x20000c48

0800632c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d051      	beq.n	80063e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006346:	4b2a      	ldr	r3, [pc, #168]	; (80063f0 <xTaskPriorityInherit+0xc4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	429a      	cmp	r2, r3
 800634e:	d241      	bcs.n	80063d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	2b00      	cmp	r3, #0
 8006356:	db06      	blt.n	8006366 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006358:	4b25      	ldr	r3, [pc, #148]	; (80063f0 <xTaskPriorityInherit+0xc4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6959      	ldr	r1, [r3, #20]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4a1f      	ldr	r2, [pc, #124]	; (80063f4 <xTaskPriorityInherit+0xc8>)
 8006378:	4413      	add	r3, r2
 800637a:	4299      	cmp	r1, r3
 800637c:	d122      	bne.n	80063c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	3304      	adds	r3, #4
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fabe 	bl	8004904 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006388:	4b19      	ldr	r3, [pc, #100]	; (80063f0 <xTaskPriorityInherit+0xc4>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006396:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <xTaskPriorityInherit+0xcc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d903      	bls.n	80063a6 <xTaskPriorityInherit+0x7a>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <xTaskPriorityInherit+0xcc>)
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4a10      	ldr	r2, [pc, #64]	; (80063f4 <xTaskPriorityInherit+0xc8>)
 80063b4:	441a      	add	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	3304      	adds	r3, #4
 80063ba:	4619      	mov	r1, r3
 80063bc:	4610      	mov	r0, r2
 80063be:	f7fe fa44 	bl	800484a <vListInsertEnd>
 80063c2:	e004      	b.n	80063ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <xTaskPriorityInherit+0xc4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80063ce:	2301      	movs	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e008      	b.n	80063e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <xTaskPriorityInherit+0xc4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	429a      	cmp	r2, r3
 80063e0:	d201      	bcs.n	80063e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80063e2:	2301      	movs	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063e6:	68fb      	ldr	r3, [r7, #12]
	}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	2000074c 	.word	0x2000074c
 80063f4:	20000750 	.word	0x20000750
 80063f8:	20000c28 	.word	0x20000c28

080063fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d054      	beq.n	80064bc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006412:	4b2d      	ldr	r3, [pc, #180]	; (80064c8 <xTaskPriorityDisinherit+0xcc>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	429a      	cmp	r2, r3
 800641a:	d009      	beq.n	8006430 <xTaskPriorityDisinherit+0x34>
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	e7fe      	b.n	800642e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006434:	2b00      	cmp	r3, #0
 8006436:	d109      	bne.n	800644c <xTaskPriorityDisinherit+0x50>
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	e7fe      	b.n	800644a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006450:	1e5a      	subs	r2, r3, #1
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645e:	429a      	cmp	r2, r3
 8006460:	d02c      	beq.n	80064bc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006466:	2b00      	cmp	r3, #0
 8006468:	d128      	bne.n	80064bc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	3304      	adds	r3, #4
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fa48 	bl	8004904 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <xTaskPriorityDisinherit+0xd0>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d903      	bls.n	800649c <xTaskPriorityDisinherit+0xa0>
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <xTaskPriorityDisinherit+0xd0>)
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <xTaskPriorityDisinherit+0xd4>)
 80064aa:	441a      	add	r2, r3
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f7fe f9c9 	bl	800484a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064bc:	697b      	ldr	r3, [r7, #20]
	}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	2000074c 	.word	0x2000074c
 80064cc:	20000c28 	.word	0x20000c28
 80064d0:	20000750 	.word	0x20000750

080064d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80064e2:	2301      	movs	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d068      	beq.n	80065be <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d109      	bne.n	8006508 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	e7fe      	b.n	8006506 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d902      	bls.n	8006518 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	e002      	b.n	800651e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	429a      	cmp	r2, r3
 8006526:	d04a      	beq.n	80065be <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	429a      	cmp	r2, r3
 8006530:	d145      	bne.n	80065be <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006532:	4b25      	ldr	r3, [pc, #148]	; (80065c8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	429a      	cmp	r2, r3
 800653a:	d109      	bne.n	8006550 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60bb      	str	r3, [r7, #8]
 800654e:	e7fe      	b.n	800654e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	2b00      	cmp	r3, #0
 8006562:	db04      	blt.n	800656e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	6959      	ldr	r1, [r3, #20]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4a13      	ldr	r2, [pc, #76]	; (80065cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800657e:	4413      	add	r3, r2
 8006580:	4299      	cmp	r1, r3
 8006582:	d11c      	bne.n	80065be <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	3304      	adds	r3, #4
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe f9bb 	bl	8004904 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d903      	bls.n	80065a2 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	4a0c      	ldr	r2, [pc, #48]	; (80065d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4a07      	ldr	r2, [pc, #28]	; (80065cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80065b0:	441a      	add	r2, r3
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7fe f946 	bl	800484a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065be:	bf00      	nop
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	2000074c 	.word	0x2000074c
 80065cc:	20000750 	.word	0x20000750
 80065d0:	20000c28 	.word	0x20000c28

080065d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80065d8:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065e6:	3201      	adds	r2, #1
 80065e8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80065ea:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80065ec:	681b      	ldr	r3, [r3, #0]
	}
 80065ee:	4618      	mov	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	2000074c 	.word	0x2000074c

080065fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006606:	4b21      	ldr	r3, [pc, #132]	; (800668c <prvAddCurrentTaskToDelayedList+0x90>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800660c:	4b20      	ldr	r3, [pc, #128]	; (8006690 <prvAddCurrentTaskToDelayedList+0x94>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3304      	adds	r3, #4
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe f976 	bl	8004904 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d10a      	bne.n	8006636 <prvAddCurrentTaskToDelayedList+0x3a>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006626:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <prvAddCurrentTaskToDelayedList+0x94>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3304      	adds	r3, #4
 800662c:	4619      	mov	r1, r3
 800662e:	4819      	ldr	r0, [pc, #100]	; (8006694 <prvAddCurrentTaskToDelayedList+0x98>)
 8006630:	f7fe f90b 	bl	800484a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006634:	e026      	b.n	8006684 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4413      	add	r3, r2
 800663c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800663e:	4b14      	ldr	r3, [pc, #80]	; (8006690 <prvAddCurrentTaskToDelayedList+0x94>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	429a      	cmp	r2, r3
 800664c:	d209      	bcs.n	8006662 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <prvAddCurrentTaskToDelayedList+0x94>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3304      	adds	r3, #4
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f7fe f919 	bl	8004892 <vListInsert>
}
 8006660:	e010      	b.n	8006684 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006662:	4b0e      	ldr	r3, [pc, #56]	; (800669c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <prvAddCurrentTaskToDelayedList+0x94>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f7fe f90f 	bl	8004892 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006674:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	429a      	cmp	r2, r3
 800667c:	d202      	bcs.n	8006684 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800667e:	4a08      	ldr	r2, [pc, #32]	; (80066a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	6013      	str	r3, [r2, #0]
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	20000c24 	.word	0x20000c24
 8006690:	2000074c 	.word	0x2000074c
 8006694:	20000c0c 	.word	0x20000c0c
 8006698:	20000bdc 	.word	0x20000bdc
 800669c:	20000bd8 	.word	0x20000bd8
 80066a0:	20000c40 	.word	0x20000c40

080066a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08a      	sub	sp, #40	; 0x28
 80066a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066ae:	f000 fb97 	bl	8006de0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066b2:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <xTimerCreateTimerTask+0x80>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d021      	beq.n	80066fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066c2:	1d3a      	adds	r2, r7, #4
 80066c4:	f107 0108 	add.w	r1, r7, #8
 80066c8:	f107 030c 	add.w	r3, r7, #12
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe f875 	bl	80047bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	9202      	str	r2, [sp, #8]
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	2302      	movs	r3, #2
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	2300      	movs	r3, #0
 80066e2:	460a      	mov	r2, r1
 80066e4:	4910      	ldr	r1, [pc, #64]	; (8006728 <xTimerCreateTimerTask+0x84>)
 80066e6:	4811      	ldr	r0, [pc, #68]	; (800672c <xTimerCreateTimerTask+0x88>)
 80066e8:	f7ff f81e 	bl	8005728 <xTaskCreateStatic>
 80066ec:	4602      	mov	r2, r0
 80066ee:	4b10      	ldr	r3, [pc, #64]	; (8006730 <xTimerCreateTimerTask+0x8c>)
 80066f0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066f2:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <xTimerCreateTimerTask+0x8c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066fa:	2301      	movs	r3, #1
 80066fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <xTimerCreateTimerTask+0x74>
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e7fe      	b.n	8006716 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006718:	697b      	ldr	r3, [r7, #20]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20000c7c 	.word	0x20000c7c
 8006728:	08008f34 	.word	0x08008f34
 800672c:	08006995 	.word	0x08006995
 8006730:	20000c80 	.word	0x20000c80

08006734 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006742:	202c      	movs	r0, #44	; 0x2c
 8006744:	f000 fdec 	bl	8007320 <pvPortMalloc>
 8006748:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00d      	beq.n	800676c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f841 	bl	80067ee <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800676c:	697b      	ldr	r3, [r7, #20]
	}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006776:	b580      	push	{r7, lr}
 8006778:	b08a      	sub	sp, #40	; 0x28
 800677a:	af02      	add	r7, sp, #8
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006784:	232c      	movs	r3, #44	; 0x2c
 8006786:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b2c      	cmp	r3, #44	; 0x2c
 800678c:	d009      	beq.n	80067a2 <xTimerCreateStatic+0x2c>
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	61bb      	str	r3, [r7, #24]
 80067a0:	e7fe      	b.n	80067a0 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <xTimerCreateStatic+0x48>
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e7fe      	b.n	80067bc <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00d      	beq.n	80067e4 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 f805 	bl	80067ee <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80067e4:	69fb      	ldr	r3, [r7, #28]
	}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3720      	adds	r7, #32
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b086      	sub	sp, #24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <prvInitialiseNewTimer+0x28>
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	e7fe      	b.n	8006814 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01e      	beq.n	800685a <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800681c:	f000 fae0 	bl	8006de0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	6a3a      	ldr	r2, [r7, #32]
 8006836:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	3304      	adds	r3, #4
 800683c:	4618      	mov	r0, r3
 800683e:	f7fd fff7 	bl	8004830 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800684e:	f043 0304 	orr.w	r3, r3, #4
 8006852:	b2da      	uxtb	r2, r3
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800685a:	bf00      	nop
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	; 0x28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006872:	2300      	movs	r3, #0
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d109      	bne.n	8006890 <xTimerGenericCommand+0x2c>
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	623b      	str	r3, [r7, #32]
 800688e:	e7fe      	b.n	800688e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006890:	4b19      	ldr	r3, [pc, #100]	; (80068f8 <xTimerGenericCommand+0x94>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d02a      	beq.n	80068ee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	dc18      	bgt.n	80068dc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068aa:	f7ff fd21 	bl	80062f0 <xTaskGetSchedulerState>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d109      	bne.n	80068c8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068b4:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <xTimerGenericCommand+0x94>)
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	f107 0110 	add.w	r1, r7, #16
 80068bc:	2300      	movs	r3, #0
 80068be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c0:	f7fe fa3c 	bl	8004d3c <xQueueGenericSend>
 80068c4:	6278      	str	r0, [r7, #36]	; 0x24
 80068c6:	e012      	b.n	80068ee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068c8:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <xTimerGenericCommand+0x94>)
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	f107 0110 	add.w	r1, r7, #16
 80068d0:	2300      	movs	r3, #0
 80068d2:	2200      	movs	r2, #0
 80068d4:	f7fe fa32 	bl	8004d3c <xQueueGenericSend>
 80068d8:	6278      	str	r0, [r7, #36]	; 0x24
 80068da:	e008      	b.n	80068ee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <xTimerGenericCommand+0x94>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	f107 0110 	add.w	r1, r7, #16
 80068e4:	2300      	movs	r3, #0
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	f7fe fb22 	bl	8004f30 <xQueueGenericSendFromISR>
 80068ec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3728      	adds	r7, #40	; 0x28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000c7c 	.word	0x20000c7c

080068fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af02      	add	r7, sp, #8
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006906:	4b22      	ldr	r3, [pc, #136]	; (8006990 <prvProcessExpiredTimer+0x94>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3304      	adds	r3, #4
 8006914:	4618      	mov	r0, r3
 8006916:	f7fd fff5 	bl	8004904 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	d021      	beq.n	800696c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	699a      	ldr	r2, [r3, #24]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	18d1      	adds	r1, r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	6978      	ldr	r0, [r7, #20]
 8006936:	f000 f8d1 	bl	8006adc <prvInsertTimerInActiveList>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01e      	beq.n	800697e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006940:	2300      	movs	r3, #0
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	2100      	movs	r1, #0
 800694a:	6978      	ldr	r0, [r7, #20]
 800694c:	f7ff ff8a 	bl	8006864 <xTimerGenericCommand>
 8006950:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d112      	bne.n	800697e <prvProcessExpiredTimer+0x82>
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	e7fe      	b.n	800696a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006972:	f023 0301 	bic.w	r3, r3, #1
 8006976:	b2da      	uxtb	r2, r3
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	6978      	ldr	r0, [r7, #20]
 8006984:	4798      	blx	r3
}
 8006986:	bf00      	nop
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20000c74 	.word	0x20000c74

08006994 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 f857 	bl	8006a54 <prvGetNextExpireTime>
 80069a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4619      	mov	r1, r3
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f803 	bl	80069b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069b2:	f000 f8d5 	bl	8006b60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069b6:	e7f1      	b.n	800699c <prvTimerTask+0x8>

080069b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069c2:	f7ff f8b3 	bl	8005b2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 f866 	bl	8006a9c <prvSampleTimeNow>
 80069d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d130      	bne.n	8006a3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <prvProcessTimerOrBlockTask+0x3c>
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d806      	bhi.n	80069f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069e6:	f7ff f8af 	bl	8005b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069ea:	68f9      	ldr	r1, [r7, #12]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff ff85 	bl	80068fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069f2:	e024      	b.n	8006a3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <prvProcessTimerOrBlockTask+0x90>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <prvProcessTimerOrBlockTask+0x50>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <prvProcessTimerOrBlockTask+0x52>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <prvProcessTimerOrBlockTask+0x94>)
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	f7fe fe51 	bl	80056c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a1e:	f7ff f893 	bl	8005b48 <xTaskResumeAll>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10a      	bne.n	8006a3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a28:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <prvProcessTimerOrBlockTask+0x98>)
 8006a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	f3bf 8f6f 	isb	sy
}
 8006a38:	e001      	b.n	8006a3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a3a:	f7ff f885 	bl	8005b48 <xTaskResumeAll>
}
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000c78 	.word	0x20000c78
 8006a4c:	20000c7c 	.word	0x20000c7c
 8006a50:	e000ed04 	.word	0xe000ed04

08006a54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a5c:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <prvGetNextExpireTime+0x44>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <prvGetNextExpireTime+0x16>
 8006a66:	2201      	movs	r2, #1
 8006a68:	e000      	b.n	8006a6c <prvGetNextExpireTime+0x18>
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d105      	bne.n	8006a84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a78:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <prvGetNextExpireTime+0x44>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e001      	b.n	8006a88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a88:	68fb      	ldr	r3, [r7, #12]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	20000c74 	.word	0x20000c74

08006a9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006aa4:	f7ff f8ec 	bl	8005c80 <xTaskGetTickCount>
 8006aa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <prvSampleTimeNow+0x3c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d205      	bcs.n	8006ac0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ab4:	f000 f930 	bl	8006d18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	e002      	b.n	8006ac6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ac6:	4a04      	ldr	r2, [pc, #16]	; (8006ad8 <prvSampleTimeNow+0x3c>)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006acc:	68fb      	ldr	r3, [r7, #12]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000c84 	.word	0x20000c84

08006adc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d812      	bhi.n	8006b28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	1ad2      	subs	r2, r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d302      	bcc.n	8006b16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b10:	2301      	movs	r3, #1
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e01b      	b.n	8006b4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b16:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <prvInsertTimerInActiveList+0x7c>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f7fd feb6 	bl	8004892 <vListInsert>
 8006b26:	e012      	b.n	8006b4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d206      	bcs.n	8006b3e <prvInsertTimerInActiveList+0x62>
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d302      	bcc.n	8006b3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	e007      	b.n	8006b4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b3e:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <prvInsertTimerInActiveList+0x80>)
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f7fd fea2 	bl	8004892 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b4e:	697b      	ldr	r3, [r7, #20]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20000c78 	.word	0x20000c78
 8006b5c:	20000c74 	.word	0x20000c74

08006b60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08e      	sub	sp, #56	; 0x38
 8006b64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b66:	e0c6      	b.n	8006cf6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	da17      	bge.n	8006b9e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b6e:	1d3b      	adds	r3, r7, #4
 8006b70:	3304      	adds	r3, #4
 8006b72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <prvProcessReceivedCommands+0x2e>
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	61fb      	str	r3, [r7, #28]
 8006b8c:	e7fe      	b.n	8006b8c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b94:	6850      	ldr	r0, [r2, #4]
 8006b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b98:	6892      	ldr	r2, [r2, #8]
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f2c0 80a7 	blt.w	8006cf4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fd fea4 	bl	8004904 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff ff6c 	bl	8006a9c <prvSampleTimeNow>
 8006bc4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b09      	cmp	r3, #9
 8006bca:	f200 8094 	bhi.w	8006cf6 <prvProcessReceivedCommands+0x196>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <prvProcessReceivedCommands+0x74>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006bfd 	.word	0x08006bfd
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006bfd 	.word	0x08006bfd
 8006be0:	08006c6f 	.word	0x08006c6f
 8006be4:	08006c83 	.word	0x08006c83
 8006be8:	08006ccb 	.word	0x08006ccb
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006bfd 	.word	0x08006bfd
 8006bf4:	08006c6f 	.word	0x08006c6f
 8006bf8:	08006c83 	.word	0x08006c83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c02:	f043 0301 	orr.w	r3, r3, #1
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	18d1      	adds	r1, r2, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c1c:	f7ff ff5e 	bl	8006adc <prvInsertTimerInActiveList>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d067      	beq.n	8006cf6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d05c      	beq.n	8006cf6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	441a      	add	r2, r3
 8006c44:	2300      	movs	r3, #0
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c4e:	f7ff fe09 	bl	8006864 <xTimerGenericCommand>
 8006c52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d14d      	bne.n	8006cf6 <prvProcessReceivedCommands+0x196>
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	61bb      	str	r3, [r7, #24]
 8006c6c:	e7fe      	b.n	8006c6c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c74:	f023 0301 	bic.w	r3, r3, #1
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006c80:	e039      	b.n	8006cf6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d109      	bne.n	8006cb6 <prvProcessReceivedCommands+0x156>
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	e7fe      	b.n	8006cb4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	18d1      	adds	r1, r2, r3
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc4:	f7ff ff0a 	bl	8006adc <prvInsertTimerInActiveList>
					break;
 8006cc8:	e015      	b.n	8006cf6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d103      	bne.n	8006ce0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cda:	f000 fbe7 	bl	80074ac <vPortFree>
 8006cde:	e00a      	b.n	8006cf6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006cf2:	e000      	b.n	8006cf6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006cf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cf6:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <prvProcessReceivedCommands+0x1b4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	1d39      	adds	r1, r7, #4
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fe f9aa 	bl	8005058 <xQueueReceive>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f47f af2e 	bne.w	8006b68 <prvProcessReceivedCommands+0x8>
	}
}
 8006d0c:	bf00      	nop
 8006d0e:	3730      	adds	r7, #48	; 0x30
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000c7c 	.word	0x20000c7c

08006d18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d1e:	e047      	b.n	8006db0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d20:	4b2d      	ldr	r3, [pc, #180]	; (8006dd8 <prvSwitchTimerLists+0xc0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d2a:	4b2b      	ldr	r3, [pc, #172]	; (8006dd8 <prvSwitchTimerLists+0xc0>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fd fde3 	bl	8004904 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d02d      	beq.n	8006db0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d90e      	bls.n	8006d84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d72:	4b19      	ldr	r3, [pc, #100]	; (8006dd8 <prvSwitchTimerLists+0xc0>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	f7fd fd88 	bl	8004892 <vListInsert>
 8006d82:	e015      	b.n	8006db0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d84:	2300      	movs	r3, #0
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff fd68 	bl	8006864 <xTimerGenericCommand>
 8006d94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <prvSwitchTimerLists+0x98>
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	e7fe      	b.n	8006dae <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006db0:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <prvSwitchTimerLists+0xc0>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1b2      	bne.n	8006d20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dba:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <prvSwitchTimerLists+0xc0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <prvSwitchTimerLists+0xc4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a04      	ldr	r2, [pc, #16]	; (8006dd8 <prvSwitchTimerLists+0xc0>)
 8006dc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006dc8:	4a04      	ldr	r2, [pc, #16]	; (8006ddc <prvSwitchTimerLists+0xc4>)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	6013      	str	r3, [r2, #0]
}
 8006dce:	bf00      	nop
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000c74 	.word	0x20000c74
 8006ddc:	20000c78 	.word	0x20000c78

08006de0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006de6:	f000 f981 	bl	80070ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <prvCheckForValidListAndQueue+0x60>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d120      	bne.n	8006e34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006df2:	4814      	ldr	r0, [pc, #80]	; (8006e44 <prvCheckForValidListAndQueue+0x64>)
 8006df4:	f7fd fcfc 	bl	80047f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006df8:	4813      	ldr	r0, [pc, #76]	; (8006e48 <prvCheckForValidListAndQueue+0x68>)
 8006dfa:	f7fd fcf9 	bl	80047f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <prvCheckForValidListAndQueue+0x6c>)
 8006e00:	4a10      	ldr	r2, [pc, #64]	; (8006e44 <prvCheckForValidListAndQueue+0x64>)
 8006e02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e04:	4b12      	ldr	r3, [pc, #72]	; (8006e50 <prvCheckForValidListAndQueue+0x70>)
 8006e06:	4a10      	ldr	r2, [pc, #64]	; (8006e48 <prvCheckForValidListAndQueue+0x68>)
 8006e08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <prvCheckForValidListAndQueue+0x74>)
 8006e10:	4a11      	ldr	r2, [pc, #68]	; (8006e58 <prvCheckForValidListAndQueue+0x78>)
 8006e12:	2110      	movs	r1, #16
 8006e14:	200a      	movs	r0, #10
 8006e16:	f7fd fe07 	bl	8004a28 <xQueueGenericCreateStatic>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <prvCheckForValidListAndQueue+0x60>)
 8006e1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <prvCheckForValidListAndQueue+0x60>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <prvCheckForValidListAndQueue+0x60>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	490b      	ldr	r1, [pc, #44]	; (8006e5c <prvCheckForValidListAndQueue+0x7c>)
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fc1e 	bl	8005670 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e34:	f000 f988 	bl	8007148 <vPortExitCritical>
}
 8006e38:	bf00      	nop
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000c7c 	.word	0x20000c7c
 8006e44:	20000c4c 	.word	0x20000c4c
 8006e48:	20000c60 	.word	0x20000c60
 8006e4c:	20000c74 	.word	0x20000c74
 8006e50:	20000c78 	.word	0x20000c78
 8006e54:	20000d28 	.word	0x20000d28
 8006e58:	20000c88 	.word	0x20000c88
 8006e5c:	08008f3c 	.word	0x08008f3c

08006e60 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <pvTimerGetTimerID+0x26>
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	e7fe      	b.n	8006e84 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8006e86:	f000 f931 	bl	80070ec <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006e90:	f000 f95a 	bl	8007148 <vPortExitCritical>

	return pvReturn;
 8006e94:	693b      	ldr	r3, [r7, #16]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3b04      	subs	r3, #4
 8006eb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3b04      	subs	r3, #4
 8006ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f023 0201 	bic.w	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b04      	subs	r3, #4
 8006ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ed0:	4a0c      	ldr	r2, [pc, #48]	; (8006f04 <pxPortInitialiseStack+0x64>)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3b14      	subs	r3, #20
 8006eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3b04      	subs	r3, #4
 8006ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f06f 0202 	mvn.w	r2, #2
 8006eee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3b20      	subs	r3, #32
 8006ef4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	08006f09 	.word	0x08006f09

08006f08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f12:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <prvTaskExitError+0x50>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	d009      	beq.n	8006f30 <prvTaskExitError+0x28>
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	e7fe      	b.n	8006f2e <prvTaskExitError+0x26>
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f42:	bf00      	nop
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0fc      	beq.n	8006f44 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000008 	.word	0x20000008
 8006f5c:	00000000 	.word	0x00000000

08006f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <pxCurrentTCBConst2>)
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	f380 8809 	msr	PSP, r0
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8811 	msr	BASEPRI, r0
 8006f7a:	4770      	bx	lr
 8006f7c:	f3af 8000 	nop.w

08006f80 <pxCurrentTCBConst2>:
 8006f80:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop

08006f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f88:	4808      	ldr	r0, [pc, #32]	; (8006fac <prvPortStartFirstTask+0x24>)
 8006f8a:	6800      	ldr	r0, [r0, #0]
 8006f8c:	6800      	ldr	r0, [r0, #0]
 8006f8e:	f380 8808 	msr	MSP, r0
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8814 	msr	CONTROL, r0
 8006f9a:	b662      	cpsie	i
 8006f9c:	b661      	cpsie	f
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	df00      	svc	0
 8006fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006faa:	bf00      	nop
 8006fac:	e000ed08 	.word	0xe000ed08

08006fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fb6:	4b44      	ldr	r3, [pc, #272]	; (80070c8 <xPortStartScheduler+0x118>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a44      	ldr	r2, [pc, #272]	; (80070cc <xPortStartScheduler+0x11c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d109      	bne.n	8006fd4 <xPortStartScheduler+0x24>
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	e7fe      	b.n	8006fd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fd4:	4b3c      	ldr	r3, [pc, #240]	; (80070c8 <xPortStartScheduler+0x118>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a3d      	ldr	r2, [pc, #244]	; (80070d0 <xPortStartScheduler+0x120>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d109      	bne.n	8006ff2 <xPortStartScheduler+0x42>
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e7fe      	b.n	8006ff0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ff2:	4b38      	ldr	r3, [pc, #224]	; (80070d4 <xPortStartScheduler+0x124>)
 8006ff4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	22ff      	movs	r2, #255	; 0xff
 8007002:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4b30      	ldr	r3, [pc, #192]	; (80070d8 <xPortStartScheduler+0x128>)
 8007018:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800701a:	4b30      	ldr	r3, [pc, #192]	; (80070dc <xPortStartScheduler+0x12c>)
 800701c:	2207      	movs	r2, #7
 800701e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007020:	e009      	b.n	8007036 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007022:	4b2e      	ldr	r3, [pc, #184]	; (80070dc <xPortStartScheduler+0x12c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3b01      	subs	r3, #1
 8007028:	4a2c      	ldr	r2, [pc, #176]	; (80070dc <xPortStartScheduler+0x12c>)
 800702a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	b2db      	uxtb	r3, r3
 8007034:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b80      	cmp	r3, #128	; 0x80
 8007040:	d0ef      	beq.n	8007022 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007042:	4b26      	ldr	r3, [pc, #152]	; (80070dc <xPortStartScheduler+0x12c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f1c3 0307 	rsb	r3, r3, #7
 800704a:	2b04      	cmp	r3, #4
 800704c:	d009      	beq.n	8007062 <xPortStartScheduler+0xb2>
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	60bb      	str	r3, [r7, #8]
 8007060:	e7fe      	b.n	8007060 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007062:	4b1e      	ldr	r3, [pc, #120]	; (80070dc <xPortStartScheduler+0x12c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	4a1c      	ldr	r2, [pc, #112]	; (80070dc <xPortStartScheduler+0x12c>)
 800706a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800706c:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <xPortStartScheduler+0x12c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007074:	4a19      	ldr	r2, [pc, #100]	; (80070dc <xPortStartScheduler+0x12c>)
 8007076:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007080:	4b17      	ldr	r3, [pc, #92]	; (80070e0 <xPortStartScheduler+0x130>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <xPortStartScheduler+0x130>)
 8007086:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800708a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800708c:	4b14      	ldr	r3, [pc, #80]	; (80070e0 <xPortStartScheduler+0x130>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <xPortStartScheduler+0x130>)
 8007092:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007096:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007098:	f000 f8d6 	bl	8007248 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800709c:	4b11      	ldr	r3, [pc, #68]	; (80070e4 <xPortStartScheduler+0x134>)
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070a2:	f000 f8f5 	bl	8007290 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070a6:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <xPortStartScheduler+0x138>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a0f      	ldr	r2, [pc, #60]	; (80070e8 <xPortStartScheduler+0x138>)
 80070ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070b2:	f7ff ff69 	bl	8006f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070b6:	f7fe feab 	bl	8005e10 <vTaskSwitchContext>
	prvTaskExitError();
 80070ba:	f7ff ff25 	bl	8006f08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	e000ed00 	.word	0xe000ed00
 80070cc:	410fc271 	.word	0x410fc271
 80070d0:	410fc270 	.word	0x410fc270
 80070d4:	e000e400 	.word	0xe000e400
 80070d8:	20000d78 	.word	0x20000d78
 80070dc:	20000d7c 	.word	0x20000d7c
 80070e0:	e000ed20 	.word	0xe000ed20
 80070e4:	20000008 	.word	0x20000008
 80070e8:	e000ef34 	.word	0xe000ef34

080070ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <vPortEnterCritical+0x54>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3301      	adds	r3, #1
 800710a:	4a0d      	ldr	r2, [pc, #52]	; (8007140 <vPortEnterCritical+0x54>)
 800710c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800710e:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <vPortEnterCritical+0x54>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10e      	bne.n	8007134 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <vPortEnterCritical+0x58>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <vPortEnterCritical+0x48>
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	e7fe      	b.n	8007132 <vPortEnterCritical+0x46>
	}
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	20000008 	.word	0x20000008
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800714e:	4b11      	ldr	r3, [pc, #68]	; (8007194 <vPortExitCritical+0x4c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <vPortExitCritical+0x22>
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	607b      	str	r3, [r7, #4]
 8007168:	e7fe      	b.n	8007168 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800716a:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <vPortExitCritical+0x4c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3b01      	subs	r3, #1
 8007170:	4a08      	ldr	r2, [pc, #32]	; (8007194 <vPortExitCritical+0x4c>)
 8007172:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007174:	4b07      	ldr	r3, [pc, #28]	; (8007194 <vPortExitCritical+0x4c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <vPortExitCritical+0x3e>
 800717c:	2300      	movs	r3, #0
 800717e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	20000008 	.word	0x20000008
	...

080071a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071a0:	f3ef 8009 	mrs	r0, PSP
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4b15      	ldr	r3, [pc, #84]	; (8007200 <pxCurrentTCBConst>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f01e 0f10 	tst.w	lr, #16
 80071b0:	bf08      	it	eq
 80071b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071c4:	f380 8811 	msr	BASEPRI, r0
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f7fe fe1e 	bl	8005e10 <vTaskSwitchContext>
 80071d4:	f04f 0000 	mov.w	r0, #0
 80071d8:	f380 8811 	msr	BASEPRI, r0
 80071dc:	bc09      	pop	{r0, r3}
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e6:	f01e 0f10 	tst.w	lr, #16
 80071ea:	bf08      	it	eq
 80071ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071f0:	f380 8809 	msr	PSP, r0
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w

08007200 <pxCurrentTCBConst>:
 8007200:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop

08007208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007220:	f7fe fd3e 	bl	8005ca0 <xTaskIncrementTick>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800722a:	4b06      	ldr	r3, [pc, #24]	; (8007244 <SysTick_Handler+0x3c>)
 800722c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	2300      	movs	r3, #0
 8007234:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	e000ed04 	.word	0xe000ed04

08007248 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800724c:	4b0b      	ldr	r3, [pc, #44]	; (800727c <vPortSetupTimerInterrupt+0x34>)
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007252:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <vPortSetupTimerInterrupt+0x38>)
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007258:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <vPortSetupTimerInterrupt+0x3c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a0a      	ldr	r2, [pc, #40]	; (8007288 <vPortSetupTimerInterrupt+0x40>)
 800725e:	fba2 2303 	umull	r2, r3, r2, r3
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	4a09      	ldr	r2, [pc, #36]	; (800728c <vPortSetupTimerInterrupt+0x44>)
 8007266:	3b01      	subs	r3, #1
 8007268:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800726a:	4b04      	ldr	r3, [pc, #16]	; (800727c <vPortSetupTimerInterrupt+0x34>)
 800726c:	2207      	movs	r2, #7
 800726e:	601a      	str	r2, [r3, #0]
}
 8007270:	bf00      	nop
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	e000e010 	.word	0xe000e010
 8007280:	e000e018 	.word	0xe000e018
 8007284:	2000000c 	.word	0x2000000c
 8007288:	51eb851f 	.word	0x51eb851f
 800728c:	e000e014 	.word	0xe000e014

08007290 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007290:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072a0 <vPortEnableVFP+0x10>
 8007294:	6801      	ldr	r1, [r0, #0]
 8007296:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800729a:	6001      	str	r1, [r0, #0]
 800729c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800729e:	bf00      	nop
 80072a0:	e000ed88 	.word	0xe000ed88

080072a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072aa:	f3ef 8305 	mrs	r3, IPSR
 80072ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b0f      	cmp	r3, #15
 80072b4:	d913      	bls.n	80072de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072b6:	4a16      	ldr	r2, [pc, #88]	; (8007310 <vPortValidateInterruptPriority+0x6c>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072c0:	4b14      	ldr	r3, [pc, #80]	; (8007314 <vPortValidateInterruptPriority+0x70>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	7afa      	ldrb	r2, [r7, #11]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d209      	bcs.n	80072de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	607b      	str	r3, [r7, #4]
 80072dc:	e7fe      	b.n	80072dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072de:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <vPortValidateInterruptPriority+0x74>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072e6:	4b0d      	ldr	r3, [pc, #52]	; (800731c <vPortValidateInterruptPriority+0x78>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d909      	bls.n	8007302 <vPortValidateInterruptPriority+0x5e>
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	e7fe      	b.n	8007300 <vPortValidateInterruptPriority+0x5c>
	}
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	e000e3f0 	.word	0xe000e3f0
 8007314:	20000d78 	.word	0x20000d78
 8007318:	e000ed0c 	.word	0xe000ed0c
 800731c:	20000d7c 	.word	0x20000d7c

08007320 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007328:	2300      	movs	r3, #0
 800732a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800732c:	f7fe fbfe 	bl	8005b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007330:	4b59      	ldr	r3, [pc, #356]	; (8007498 <pvPortMalloc+0x178>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007338:	f000 f910 	bl	800755c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800733c:	4b57      	ldr	r3, [pc, #348]	; (800749c <pvPortMalloc+0x17c>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4013      	ands	r3, r2
 8007344:	2b00      	cmp	r3, #0
 8007346:	f040 808c 	bne.w	8007462 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01c      	beq.n	800738a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007350:	2208      	movs	r2, #8
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4413      	add	r3, r2
 8007356:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	2b00      	cmp	r3, #0
 8007360:	d013      	beq.n	800738a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f023 0307 	bic.w	r3, r3, #7
 8007368:	3308      	adds	r3, #8
 800736a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	2b00      	cmp	r3, #0
 8007374:	d009      	beq.n	800738a <pvPortMalloc+0x6a>
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	e7fe      	b.n	8007388 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d068      	beq.n	8007462 <pvPortMalloc+0x142>
 8007390:	4b43      	ldr	r3, [pc, #268]	; (80074a0 <pvPortMalloc+0x180>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	429a      	cmp	r2, r3
 8007398:	d863      	bhi.n	8007462 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800739a:	4b42      	ldr	r3, [pc, #264]	; (80074a4 <pvPortMalloc+0x184>)
 800739c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800739e:	4b41      	ldr	r3, [pc, #260]	; (80074a4 <pvPortMalloc+0x184>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073a4:	e004      	b.n	80073b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d903      	bls.n	80073c2 <pvPortMalloc+0xa2>
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1f1      	bne.n	80073a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073c2:	4b35      	ldr	r3, [pc, #212]	; (8007498 <pvPortMalloc+0x178>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d04a      	beq.n	8007462 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2208      	movs	r2, #8
 80073d2:	4413      	add	r3, r2
 80073d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	1ad2      	subs	r2, r2, r3
 80073e6:	2308      	movs	r3, #8
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d91e      	bls.n	800742c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4413      	add	r3, r2
 80073f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d009      	beq.n	8007414 <pvPortMalloc+0xf4>
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	e7fe      	b.n	8007412 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	1ad2      	subs	r2, r2, r3
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007426:	69b8      	ldr	r0, [r7, #24]
 8007428:	f000 f8fa 	bl	8007620 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800742c:	4b1c      	ldr	r3, [pc, #112]	; (80074a0 <pvPortMalloc+0x180>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	4a1a      	ldr	r2, [pc, #104]	; (80074a0 <pvPortMalloc+0x180>)
 8007438:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800743a:	4b19      	ldr	r3, [pc, #100]	; (80074a0 <pvPortMalloc+0x180>)
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <pvPortMalloc+0x188>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d203      	bcs.n	800744e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007446:	4b16      	ldr	r3, [pc, #88]	; (80074a0 <pvPortMalloc+0x180>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a17      	ldr	r2, [pc, #92]	; (80074a8 <pvPortMalloc+0x188>)
 800744c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	4b12      	ldr	r3, [pc, #72]	; (800749c <pvPortMalloc+0x17c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	431a      	orrs	r2, r3
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007462:	f7fe fb71 	bl	8005b48 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800746c:	f7fd f984 	bl	8004778 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	2b00      	cmp	r3, #0
 8007478:	d009      	beq.n	800748e <pvPortMalloc+0x16e>
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e7fe      	b.n	800748c <pvPortMalloc+0x16c>
	return pvReturn;
 800748e:	69fb      	ldr	r3, [r7, #28]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3728      	adds	r7, #40	; 0x28
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	200024f8 	.word	0x200024f8
 800749c:	20002504 	.word	0x20002504
 80074a0:	200024fc 	.word	0x200024fc
 80074a4:	200024f0 	.word	0x200024f0
 80074a8:	20002500 	.word	0x20002500

080074ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d046      	beq.n	800754c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074be:	2308      	movs	r3, #8
 80074c0:	425b      	negs	r3, r3
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4413      	add	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	4b20      	ldr	r3, [pc, #128]	; (8007554 <vPortFree+0xa8>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4013      	ands	r3, r2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d109      	bne.n	80074ee <vPortFree+0x42>
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	e7fe      	b.n	80074ec <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <vPortFree+0x5e>
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	60bb      	str	r3, [r7, #8]
 8007508:	e7fe      	b.n	8007508 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	4b11      	ldr	r3, [pc, #68]	; (8007554 <vPortFree+0xa8>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4013      	ands	r3, r2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d019      	beq.n	800754c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d115      	bne.n	800754c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <vPortFree+0xa8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	43db      	mvns	r3, r3
 800752a:	401a      	ands	r2, r3
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007530:	f7fe fafc 	bl	8005b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	4b07      	ldr	r3, [pc, #28]	; (8007558 <vPortFree+0xac>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4413      	add	r3, r2
 800753e:	4a06      	ldr	r2, [pc, #24]	; (8007558 <vPortFree+0xac>)
 8007540:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007542:	6938      	ldr	r0, [r7, #16]
 8007544:	f000 f86c 	bl	8007620 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007548:	f7fe fafe 	bl	8005b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800754c:	bf00      	nop
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	20002504 	.word	0x20002504
 8007558:	200024fc 	.word	0x200024fc

0800755c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007562:	f241 7370 	movw	r3, #6000	; 0x1770
 8007566:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007568:	4b27      	ldr	r3, [pc, #156]	; (8007608 <prvHeapInit+0xac>)
 800756a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00c      	beq.n	8007590 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3307      	adds	r3, #7
 800757a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0307 	bic.w	r3, r3, #7
 8007582:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <prvHeapInit+0xac>)
 800758c:	4413      	add	r3, r2
 800758e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007594:	4a1d      	ldr	r2, [pc, #116]	; (800760c <prvHeapInit+0xb0>)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800759a:	4b1c      	ldr	r3, [pc, #112]	; (800760c <prvHeapInit+0xb0>)
 800759c:	2200      	movs	r2, #0
 800759e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	4413      	add	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075a8:	2208      	movs	r2, #8
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	1a9b      	subs	r3, r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0307 	bic.w	r3, r3, #7
 80075b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4a15      	ldr	r2, [pc, #84]	; (8007610 <prvHeapInit+0xb4>)
 80075bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075be:	4b14      	ldr	r3, [pc, #80]	; (8007610 <prvHeapInit+0xb4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2200      	movs	r2, #0
 80075c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075c6:	4b12      	ldr	r3, [pc, #72]	; (8007610 <prvHeapInit+0xb4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	1ad2      	subs	r2, r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075dc:	4b0c      	ldr	r3, [pc, #48]	; (8007610 <prvHeapInit+0xb4>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	4a0a      	ldr	r2, [pc, #40]	; (8007614 <prvHeapInit+0xb8>)
 80075ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	4a09      	ldr	r2, [pc, #36]	; (8007618 <prvHeapInit+0xbc>)
 80075f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075f4:	4b09      	ldr	r3, [pc, #36]	; (800761c <prvHeapInit+0xc0>)
 80075f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075fa:	601a      	str	r2, [r3, #0]
}
 80075fc:	bf00      	nop
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	20000d80 	.word	0x20000d80
 800760c:	200024f0 	.word	0x200024f0
 8007610:	200024f8 	.word	0x200024f8
 8007614:	20002500 	.word	0x20002500
 8007618:	200024fc 	.word	0x200024fc
 800761c:	20002504 	.word	0x20002504

08007620 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007628:	4b28      	ldr	r3, [pc, #160]	; (80076cc <prvInsertBlockIntoFreeList+0xac>)
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	e002      	b.n	8007634 <prvInsertBlockIntoFreeList+0x14>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	429a      	cmp	r2, r3
 800763c:	d8f7      	bhi.n	800762e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	4413      	add	r3, r2
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	429a      	cmp	r2, r3
 800764e:	d108      	bne.n	8007662 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	441a      	add	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	441a      	add	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d118      	bne.n	80076a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <prvInsertBlockIntoFreeList+0xb0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d00d      	beq.n	800769e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	441a      	add	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	e008      	b.n	80076b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800769e:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <prvInsertBlockIntoFreeList+0xb0>)
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e003      	b.n	80076b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d002      	beq.n	80076be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	200024f0 	.word	0x200024f0
 80076d0:	200024f8 	.word	0x200024f8

080076d4 <UART_print>:
#include <stdlib.h>
#include <string.h>

extern int Rx_data[];

void UART_print(int integer) {
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b094      	sub	sp, #80	; 0x50
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
	uint8_t buffer[64];
	int n = sprintf((char *)buffer, "%d", integer);
 80076dc:	f107 030c 	add.w	r3, r7, #12
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	4909      	ldr	r1, [pc, #36]	; (8007708 <UART_print+0x34>)
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 f8d1 	bl	800888c <siprintf>
 80076ea:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, buffer, n, HAL_MAX_DELAY);
 80076ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	f107 010c 	add.w	r1, r7, #12
 80076f4:	f04f 33ff 	mov.w	r3, #4294967295
 80076f8:	4804      	ldr	r0, [pc, #16]	; (800770c <UART_print+0x38>)
 80076fa:	f7fb fcdd 	bl	80030b8 <HAL_UART_Transmit>
}
 80076fe:	bf00      	nop
 8007700:	3750      	adds	r7, #80	; 0x50
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	08008f44 	.word	0x08008f44
 800770c:	20002824 	.word	0x20002824

08007710 <UART_printlnf>:
	uint8_t buffer[64];
	int n = sprintf((char *)buffer, "%d\r\n", integer);
	HAL_UART_Transmit(&huart2, buffer, n, HAL_MAX_DELAY);
}

void UART_printlnf(float integer) {
 8007710:	b590      	push	{r4, r7, lr}
 8007712:	b095      	sub	sp, #84	; 0x54
 8007714:	af00      	add	r7, sp, #0
 8007716:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t buffer[64];
	int n = sprintf((char *)buffer, "%f\r\n", integer);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7f8 ff0c 	bl	8000538 <__aeabi_f2d>
 8007720:	4603      	mov	r3, r0
 8007722:	460c      	mov	r4, r1
 8007724:	f107 000c 	add.w	r0, r7, #12
 8007728:	461a      	mov	r2, r3
 800772a:	4623      	mov	r3, r4
 800772c:	4908      	ldr	r1, [pc, #32]	; (8007750 <UART_printlnf+0x40>)
 800772e:	f001 f8ad 	bl	800888c <siprintf>
 8007732:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, buffer, n, HAL_MAX_DELAY);
 8007734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007736:	b29a      	uxth	r2, r3
 8007738:	f107 010c 	add.w	r1, r7, #12
 800773c:	f04f 33ff 	mov.w	r3, #4294967295
 8007740:	4804      	ldr	r0, [pc, #16]	; (8007754 <UART_printlnf+0x44>)
 8007742:	f7fb fcb9 	bl	80030b8 <HAL_UART_Transmit>
}
 8007746:	bf00      	nop
 8007748:	3754      	adds	r7, #84	; 0x54
 800774a:	46bd      	mov	sp, r7
 800774c:	bd90      	pop	{r4, r7, pc}
 800774e:	bf00      	nop
 8007750:	08008f50 	.word	0x08008f50
 8007754:	20002824 	.word	0x20002824

08007758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800775e:	f7f9 fb25 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007762:	f000 f87b 	bl	800785c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007766:	f000 f949 	bl	80079fc <MX_GPIO_Init>
  MX_RNG_Init();
 800776a:	f000 f903 	bl	8007974 <MX_RNG_Init>
  MX_USART2_UART_Init();
 800776e:	f000 f915 	bl	800799c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, Rx_data, 1);
 8007772:	2201      	movs	r2, #1
 8007774:	4922      	ldr	r1, [pc, #136]	; (8007800 <main+0xa8>)
 8007776:	4823      	ldr	r0, [pc, #140]	; (8007804 <main+0xac>)
 8007778:	f7fb fd32 	bl	80031e0 <HAL_UART_Receive_IT>
	int id = 1;
 800777c:	2301      	movs	r3, #1
 800777e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8007780:	f7fc fd08 	bl	8004194 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of m_teller1 */
  m_teller1Handle = osMutexNew(&m_teller1_attributes);
 8007784:	4820      	ldr	r0, [pc, #128]	; (8007808 <main+0xb0>)
 8007786:	f7fc feaf 	bl	80044e8 <osMutexNew>
 800778a:	4602      	mov	r2, r0
 800778c:	4b1f      	ldr	r3, [pc, #124]	; (800780c <main+0xb4>)
 800778e:	601a      	str	r2, [r3, #0]

  /* creation of m_teller2 */
  m_teller2Handle = osMutexNew(&m_teller2_attributes);
 8007790:	481f      	ldr	r0, [pc, #124]	; (8007810 <main+0xb8>)
 8007792:	f7fc fea9 	bl	80044e8 <osMutexNew>
 8007796:	4602      	mov	r2, r0
 8007798:	4b1e      	ldr	r3, [pc, #120]	; (8007814 <main+0xbc>)
 800779a:	601a      	str	r2, [r3, #0]

  /* creation of m_teller3 */
  m_teller3Handle = osMutexNew(&m_teller3_attributes);
 800779c:	481e      	ldr	r0, [pc, #120]	; (8007818 <main+0xc0>)
 800779e:	f7fc fea3 	bl	80044e8 <osMutexNew>
 80077a2:	4602      	mov	r2, r0
 80077a4:	4b1d      	ldr	r3, [pc, #116]	; (800781c <main+0xc4>)
 80077a6:	601a      	str	r2, [r3, #0]
//  Clock_SHandle
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osTimerNew(HeartbeatTimerCB, osTimerPeriodic, NULL, &Heartbeat_attributes);
 80077a8:	4b1d      	ldr	r3, [pc, #116]	; (8007820 <main+0xc8>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	2101      	movs	r1, #1
 80077ae:	481d      	ldr	r0, [pc, #116]	; (8007824 <main+0xcc>)
 80077b0:	f7fc fe16 	bl	80043e0 <osTimerNew>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4b1c      	ldr	r3, [pc, #112]	; (8007828 <main+0xd0>)
 80077b8:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80077ba:	4a1c      	ldr	r2, [pc, #112]	; (800782c <main+0xd4>)
 80077bc:	2100      	movs	r1, #0
 80077be:	481c      	ldr	r0, [pc, #112]	; (8007830 <main+0xd8>)
 80077c0:	f7fc fd52 	bl	8004268 <osThreadNew>
 80077c4:	4602      	mov	r2, r0
 80077c6:	4b1b      	ldr	r3, [pc, #108]	; (8007834 <main+0xdc>)
 80077c8:	601a      	str	r2, [r3, #0]

  /* creation of Teller1 */
  Teller1Handle = osThreadNew(StartTeller, NULL, &Teller1_attributes);
 80077ca:	4a1b      	ldr	r2, [pc, #108]	; (8007838 <main+0xe0>)
 80077cc:	2100      	movs	r1, #0
 80077ce:	481b      	ldr	r0, [pc, #108]	; (800783c <main+0xe4>)
 80077d0:	f7fc fd4a 	bl	8004268 <osThreadNew>
 80077d4:	4602      	mov	r2, r0
 80077d6:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <main+0xe8>)
 80077d8:	601a      	str	r2, [r3, #0]

  /* creation of Teller2 */
  Teller2Handle = osThreadNew(StartTeller2, NULL, &Teller2_attributes);
 80077da:	4a1a      	ldr	r2, [pc, #104]	; (8007844 <main+0xec>)
 80077dc:	2100      	movs	r1, #0
 80077de:	481a      	ldr	r0, [pc, #104]	; (8007848 <main+0xf0>)
 80077e0:	f7fc fd42 	bl	8004268 <osThreadNew>
 80077e4:	4602      	mov	r2, r0
 80077e6:	4b19      	ldr	r3, [pc, #100]	; (800784c <main+0xf4>)
 80077e8:	601a      	str	r2, [r3, #0]

  /* creation of Teller3 */
  Teller3Handle = osThreadNew(StartTeller3, NULL, &Teller3_attributes);
 80077ea:	4a19      	ldr	r2, [pc, #100]	; (8007850 <main+0xf8>)
 80077ec:	2100      	movs	r1, #0
 80077ee:	4819      	ldr	r0, [pc, #100]	; (8007854 <main+0xfc>)
 80077f0:	f7fc fd3a 	bl	8004268 <osThreadNew>
 80077f4:	4602      	mov	r2, r0
 80077f6:	4b18      	ldr	r3, [pc, #96]	; (8007858 <main+0x100>)
 80077f8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80077fa:	f7fc fcff 	bl	80041fc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80077fe:	e7fe      	b.n	80077fe <main+0xa6>
 8007800:	200027c4 	.word	0x200027c4
 8007804:	20002824 	.word	0x20002824
 8007808:	080091ec 	.word	0x080091ec
 800780c:	200028a4 	.word	0x200028a4
 8007810:	080091fc 	.word	0x080091fc
 8007814:	200027d0 	.word	0x200027d0
 8007818:	0800920c 	.word	0x0800920c
 800781c:	200028b4 	.word	0x200028b4
 8007820:	080091dc 	.word	0x080091dc
 8007824:	08008191 	.word	0x08008191
 8007828:	20002820 	.word	0x20002820
 800782c:	0800914c 	.word	0x0800914c
 8007830:	08007b41 	.word	0x08007b41
 8007834:	200027bc 	.word	0x200027bc
 8007838:	08009170 	.word	0x08009170
 800783c:	08007f8d 	.word	0x08007f8d
 8007840:	200027cc 	.word	0x200027cc
 8007844:	08009194 	.word	0x08009194
 8007848:	08008039 	.word	0x08008039
 800784c:	200027c0 	.word	0x200027c0
 8007850:	080091b8 	.word	0x080091b8
 8007854:	080080e5 	.word	0x080080e5
 8007858:	200027c8 	.word	0x200027c8

0800785c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b0b8      	sub	sp, #224	; 0xe0
 8007860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007862:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007866:	2244      	movs	r2, #68	; 0x44
 8007868:	2100      	movs	r1, #0
 800786a:	4618      	mov	r0, r3
 800786c:	f000 ff4d 	bl	800870a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007870:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	60da      	str	r2, [r3, #12]
 800787e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007880:	463b      	mov	r3, r7
 8007882:	2288      	movs	r2, #136	; 0x88
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f000 ff3f 	bl	800870a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800788c:	2310      	movs	r3, #16
 800788e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007892:	2301      	movs	r3, #1
 8007894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800789e:	2360      	movs	r3, #96	; 0x60
 80078a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80078a4:	2302      	movs	r3, #2
 80078a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80078b6:	2328      	movs	r3, #40	; 0x28
 80078b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80078bc:	2307      	movs	r3, #7
 80078be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80078c2:	2302      	movs	r3, #2
 80078c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80078c8:	2302      	movs	r3, #2
 80078ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80078ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7f9 fdd8 	bl	8001488 <HAL_RCC_OscConfig>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80078de:	f000 fc97 	bl	8008210 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80078e2:	230f      	movs	r3, #15
 80078e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80078e8:	2303      	movs	r3, #3
 80078ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80078ee:	2300      	movs	r3, #0
 80078f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007900:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007904:	2104      	movs	r1, #4
 8007906:	4618      	mov	r0, r3
 8007908:	f7fa f9a4 	bl	8001c54 <HAL_RCC_ClockConfig>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8007912:	f000 fc7d 	bl	8008210 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RNG;
 8007916:	4b16      	ldr	r3, [pc, #88]	; (8007970 <SystemClock_Config+0x114>)
 8007918:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800791a:	2300      	movs	r3, #0
 800791c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800791e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007922:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007924:	2301      	movs	r3, #1
 8007926:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007928:	2301      	movs	r3, #1
 800792a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800792c:	2310      	movs	r3, #16
 800792e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8007930:	2307      	movs	r3, #7
 8007932:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007934:	2302      	movs	r3, #2
 8007936:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007938:	2302      	movs	r3, #2
 800793a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800793c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007940:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007942:	463b      	mov	r3, r7
 8007944:	4618      	mov	r0, r3
 8007946:	f7fa fbbb 	bl	80020c0 <HAL_RCCEx_PeriphCLKConfig>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8007950:	f000 fc5e 	bl	8008210 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007954:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007958:	f7f9 fd40 	bl	80013dc <HAL_PWREx_ControlVoltageScaling>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8007962:	f000 fc55 	bl	8008210 <Error_Handler>
  }
}
 8007966:	bf00      	nop
 8007968:	37e0      	adds	r7, #224	; 0xe0
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	00040002 	.word	0x00040002

08007974 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8007978:	4b06      	ldr	r3, [pc, #24]	; (8007994 <MX_RNG_Init+0x20>)
 800797a:	4a07      	ldr	r2, [pc, #28]	; (8007998 <MX_RNG_Init+0x24>)
 800797c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800797e:	4805      	ldr	r0, [pc, #20]	; (8007994 <MX_RNG_Init+0x20>)
 8007980:	f7fb f84e 	bl	8002a20 <HAL_RNG_Init>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800798a:	f000 fc41 	bl	8008210 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800798e:	bf00      	nop
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	200027d4 	.word	0x200027d4
 8007998:	50060800 	.word	0x50060800

0800799c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80079a0:	4b14      	ldr	r3, [pc, #80]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079a2:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <MX_USART2_UART_Init+0x5c>)
 80079a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80079a6:	4b13      	ldr	r3, [pc, #76]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80079ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80079ae:	4b11      	ldr	r3, [pc, #68]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80079b4:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80079ba:	4b0e      	ldr	r3, [pc, #56]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079bc:	2200      	movs	r2, #0
 80079be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80079c0:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079c2:	220c      	movs	r2, #12
 80079c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079c6:	4b0b      	ldr	r3, [pc, #44]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80079cc:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80079d8:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079da:	2200      	movs	r2, #0
 80079dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80079de:	4805      	ldr	r0, [pc, #20]	; (80079f4 <MX_USART2_UART_Init+0x58>)
 80079e0:	f7fb fb1c 	bl	800301c <HAL_UART_Init>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80079ea:	f000 fc11 	bl	8008210 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80079ee:	bf00      	nop
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20002824 	.word	0x20002824
 80079f8:	40004400 	.word	0x40004400

080079fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a02:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <MX_GPIO_Init+0x2c>)
 8007a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a06:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <MX_GPIO_Init+0x2c>)
 8007a08:	f043 0308 	orr.w	r3, r3, #8
 8007a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a0e:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <MX_GPIO_Init+0x2c>)
 8007a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	607b      	str	r3, [r7, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]

}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40021000 	.word	0x40021000

08007a2c <print_info>:

/* USER CODE BEGIN 4 */
void print_info(queue *q, int my_time) {
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, "Time: ", strlen("Time: "), HAL_MAX_DELAY);
 8007a36:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3a:	2206      	movs	r2, #6
 8007a3c:	492d      	ldr	r1, [pc, #180]	; (8007af4 <print_info+0xc8>)
 8007a3e:	482e      	ldr	r0, [pc, #184]	; (8007af8 <print_info+0xcc>)
 8007a40:	f7fb fb3a 	bl	80030b8 <HAL_UART_Transmit>
	UART_print(my_time);
 8007a44:	6838      	ldr	r0, [r7, #0]
 8007a46:	f7ff fe45 	bl	80076d4 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\nQueue Size: ", strlen("\r\nQueue Size: "),
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4e:	220e      	movs	r2, #14
 8007a50:	492a      	ldr	r1, [pc, #168]	; (8007afc <print_info+0xd0>)
 8007a52:	4829      	ldr	r0, [pc, #164]	; (8007af8 <print_info+0xcc>)
 8007a54:	f7fb fb30 	bl	80030b8 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	UART_print(get_size(q));
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fc45 	bl	80082e8 <get_size>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff fe37 	bl	80076d4 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\nTeller 1: ", strlen("\r\nTeller 1: "),
 8007a66:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6a:	220c      	movs	r2, #12
 8007a6c:	4924      	ldr	r1, [pc, #144]	; (8007b00 <print_info+0xd4>)
 8007a6e:	4822      	ldr	r0, [pc, #136]	; (8007af8 <print_info+0xcc>)
 8007a70:	f7fb fb22 	bl	80030b8 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	UART_prints(tellers[0].state ? "Busy" : "Idle");
 8007a74:	4b23      	ldr	r3, [pc, #140]	; (8007b04 <print_info+0xd8>)
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <print_info+0x54>
 8007a7c:	4922      	ldr	r1, [pc, #136]	; (8007b08 <print_info+0xdc>)
 8007a7e:	e000      	b.n	8007a82 <print_info+0x56>
 8007a80:	4922      	ldr	r1, [pc, #136]	; (8007b0c <print_info+0xe0>)
 8007a82:	f04f 33ff 	mov.w	r3, #4294967295
 8007a86:	2204      	movs	r2, #4
 8007a88:	481b      	ldr	r0, [pc, #108]	; (8007af8 <print_info+0xcc>)
 8007a8a:	f7fb fb15 	bl	80030b8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\nTeller 2: ", strlen("\r\nTeller 2: "),
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a92:	220c      	movs	r2, #12
 8007a94:	491e      	ldr	r1, [pc, #120]	; (8007b10 <print_info+0xe4>)
 8007a96:	4818      	ldr	r0, [pc, #96]	; (8007af8 <print_info+0xcc>)
 8007a98:	f7fb fb0e 	bl	80030b8 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	UART_prints(tellers[1].state ? "Busy" : "Idle");
 8007a9c:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <print_info+0xd8>)
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <print_info+0x7c>
 8007aa4:	4918      	ldr	r1, [pc, #96]	; (8007b08 <print_info+0xdc>)
 8007aa6:	e000      	b.n	8007aaa <print_info+0x7e>
 8007aa8:	4918      	ldr	r1, [pc, #96]	; (8007b0c <print_info+0xe0>)
 8007aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007aae:	2204      	movs	r2, #4
 8007ab0:	4811      	ldr	r0, [pc, #68]	; (8007af8 <print_info+0xcc>)
 8007ab2:	f7fb fb01 	bl	80030b8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\nTeller 3: ", strlen("\r\nTeller 3: "),
 8007ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aba:	220c      	movs	r2, #12
 8007abc:	4915      	ldr	r1, [pc, #84]	; (8007b14 <print_info+0xe8>)
 8007abe:	480e      	ldr	r0, [pc, #56]	; (8007af8 <print_info+0xcc>)
 8007ac0:	f7fb fafa 	bl	80030b8 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	UART_prints(tellers[2].state ? "Busy" : "Idle");
 8007ac4:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <print_info+0xd8>)
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <print_info+0xa4>
 8007acc:	490e      	ldr	r1, [pc, #56]	; (8007b08 <print_info+0xdc>)
 8007ace:	e000      	b.n	8007ad2 <print_info+0xa6>
 8007ad0:	490e      	ldr	r1, [pc, #56]	; (8007b0c <print_info+0xe0>)
 8007ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	4807      	ldr	r0, [pc, #28]	; (8007af8 <print_info+0xcc>)
 8007ada:	f7fb faed 	bl	80030b8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\n-----------------------------\r\n",
 8007ade:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae2:	2221      	movs	r2, #33	; 0x21
 8007ae4:	490c      	ldr	r1, [pc, #48]	; (8007b18 <print_info+0xec>)
 8007ae6:	4804      	ldr	r0, [pc, #16]	; (8007af8 <print_info+0xcc>)
 8007ae8:	f7fb fae6 	bl	80030b8 <HAL_UART_Transmit>
			strlen("\r\n-----------------------------\r\n"), HAL_MAX_DELAY);
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	08008fac 	.word	0x08008fac
 8007af8:	20002824 	.word	0x20002824
 8007afc:	08008fb4 	.word	0x08008fb4
 8007b00:	08008fc4 	.word	0x08008fc4
 8007b04:	200027e4 	.word	0x200027e4
 8007b08:	08008fd4 	.word	0x08008fd4
 8007b0c:	08008fdc 	.word	0x08008fdc
 8007b10:	08008fe4 	.word	0x08008fe4
 8007b14:	08008ff4 	.word	0x08008ff4
 8007b18:	08009004 	.word	0x08009004

08007b1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, Rx_data, 1);
 8007b24:	2201      	movs	r2, #1
 8007b26:	4904      	ldr	r1, [pc, #16]	; (8007b38 <HAL_UART_RxCpltCallback+0x1c>)
 8007b28:	4804      	ldr	r0, [pc, #16]	; (8007b3c <HAL_UART_RxCpltCallback+0x20>)
 8007b2a:	f7fb fb59 	bl	80031e0 <HAL_UART_Receive_IT>
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	200027c4 	.word	0x200027c4
 8007b3c:	20002824 	.word	0x20002824

08007b40 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007b40:	b5b0      	push	{r4, r5, r7, lr}
 8007b42:	b08e      	sub	sp, #56	; 0x38
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Create Queue
//	queue *q;
//	q = malloc(sizeof(queue));
	initialize(&q);
 8007b48:	483f      	ldr	r0, [pc, #252]	; (8007c48 <StartDefaultTask+0x108>)
 8007b4a:	f000 fb68 	bl	800821e <initialize>

	// Start Timer
//	osTimerStart(HeartbeatHandle, 1000);

	int my_time = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_RNG_GenerateRandomNumber(&hrng, &randvar);
 8007b52:	493e      	ldr	r1, [pc, #248]	; (8007c4c <StartDefaultTask+0x10c>)
 8007b54:	483e      	ldr	r0, [pc, #248]	; (8007c50 <StartDefaultTask+0x110>)
 8007b56:	f7fa ffb3 	bl	8002ac0 <HAL_RNG_GenerateRandomNumber>
	int spawn_time_left = randvar % 4 + 1; // 1->4
 8007b5a:	4b3c      	ldr	r3, [pc, #240]	; (8007c4c <StartDefaultTask+0x10c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	3301      	adds	r3, #1
 8007b64:	633b      	str	r3, [r7, #48]	; 0x30
	int total_queue_time = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c
	int max_queue_time = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	62bb      	str	r3, [r7, #40]	; 0x28
	int open_for_business = 1;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24

	for (;;) {

		// Timer
		while (my_time < display_timer) {
 8007b72:	e1db      	b.n	8007f2c <StartDefaultTask+0x3ec>
			print_info(&q, my_time);
 8007b74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b76:	4834      	ldr	r0, [pc, #208]	; (8007c48 <StartDefaultTask+0x108>)
 8007b78:	f7ff ff58 	bl	8007a2c <print_info>
			if (!isEmpty(&q)) {
 8007b7c:	4832      	ldr	r0, [pc, #200]	; (8007c48 <StartDefaultTask+0x108>)
 8007b7e:	f000 fb61 	bl	8008244 <isEmpty>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10d      	bne.n	8007ba4 <StartDefaultTask+0x64>
				// Add wait time to all customers
				Customer *n = q.front;
 8007b88:	4b2f      	ldr	r3, [pc, #188]	; (8007c48 <StartDefaultTask+0x108>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	623b      	str	r3, [r7, #32]
				do {
					n->queue_wait_time++;
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	605a      	str	r2, [r3, #4]
					n = n->next;
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	623b      	str	r3, [r7, #32]
				} while (n != NULL);
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1f4      	bne.n	8007b8e <StartDefaultTask+0x4e>
			}

			// New Customer Arrived
			if (!spawn_time_left && open_for_business) { // = 0
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d147      	bne.n	8007c3a <StartDefaultTask+0xfa>
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d044      	beq.n	8007c3a <StartDefaultTask+0xfa>
//				Customer *c;
//				c = (Customer*) malloc(sizeof(Customer));
				int available = 1;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	61fb      	str	r3, [r7, #28]
				int customer_id = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61bb      	str	r3, [r7, #24]
				int tries = 5;
 8007bb8:	2305      	movs	r3, #5
 8007bba:	617b      	str	r3, [r7, #20]
				while (available == 1) {
 8007bbc:	e019      	b.n	8007bf2 <StartDefaultTask+0xb2>
					if (tries-- == 0)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	1e5a      	subs	r2, r3, #1
 8007bc2:	617a      	str	r2, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d03a      	beq.n	8007c3e <StartDefaultTask+0xfe>
						goto qskip;
					HAL_RNG_GenerateRandomNumber(&hrng, &randvar);
 8007bc8:	4920      	ldr	r1, [pc, #128]	; (8007c4c <StartDefaultTask+0x10c>)
 8007bca:	4821      	ldr	r0, [pc, #132]	; (8007c50 <StartDefaultTask+0x110>)
 8007bcc:	f7fa ff78 	bl	8002ac0 <HAL_RNG_GenerateRandomNumber>
					customer_id = (randvar % 30); // 1->4
 8007bd0:	4b1e      	ldr	r3, [pc, #120]	; (8007c4c <StartDefaultTask+0x10c>)
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	4b1f      	ldr	r3, [pc, #124]	; (8007c54 <StartDefaultTask+0x114>)
 8007bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8007bda:	091a      	lsrs	r2, r3, #4
 8007bdc:	4613      	mov	r3, r2
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	1a9b      	subs	r3, r3, r2
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	1aca      	subs	r2, r1, r3
 8007be6:	61ba      	str	r2, [r7, #24]
					available = clist_id[customer_id];
 8007be8:	4a1b      	ldr	r2, [pc, #108]	; (8007c58 <StartDefaultTask+0x118>)
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf0:	61fb      	str	r3, [r7, #28]
				while (available == 1) {
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d0e2      	beq.n	8007bbe <StartDefaultTask+0x7e>
				}
				clist_id[customer_id] = 1; // Taken
 8007bf8:	4a17      	ldr	r2, [pc, #92]	; (8007c58 <StartDefaultTask+0x118>)
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Customer *c = &clist[customer_id];
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	011b      	lsls	r3, r3, #4
 8007c06:	4a15      	ldr	r2, [pc, #84]	; (8007c5c <StartDefaultTask+0x11c>)
 8007c08:	4413      	add	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

				init_customer(c);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 fcf1 	bl	80085f4 <init_customer>
				enqueue(&q, c);
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	480c      	ldr	r0, [pc, #48]	; (8007c48 <StartDefaultTask+0x108>)
 8007c16:	f000 fb26 	bl	8008266 <enqueue>
				HAL_RNG_GenerateRandomNumber(&hrng, &randvar);
 8007c1a:	490c      	ldr	r1, [pc, #48]	; (8007c4c <StartDefaultTask+0x10c>)
 8007c1c:	480c      	ldr	r0, [pc, #48]	; (8007c50 <StartDefaultTask+0x110>)
 8007c1e:	f7fa ff4f 	bl	8002ac0 <HAL_RNG_GenerateRandomNumber>
				spawn_time_left = randvar % 4 + 1; // 1->4
 8007c22:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <StartDefaultTask+0x10c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	633b      	str	r3, [r7, #48]	; 0x30
				total_customers++;
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <StartDefaultTask+0x120>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3301      	adds	r3, #1
 8007c34:	4a0a      	ldr	r2, [pc, #40]	; (8007c60 <StartDefaultTask+0x120>)
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	e002      	b.n	8007c40 <StartDefaultTask+0x100>
			}
qskip:
 8007c3a:	bf00      	nop
 8007c3c:	e000      	b.n	8007c40 <StartDefaultTask+0x100>
						goto qskip;
 8007c3e:	bf00      	nop
			// Check if Teller is empty and send customer to them
			for (int i = 0; i < NUM_OF_TELLERS; i++) {
 8007c40:	2300      	movs	r3, #0
 8007c42:	613b      	str	r3, [r7, #16]
 8007c44:	e0be      	b.n	8007dc4 <StartDefaultTask+0x284>
 8007c46:	bf00      	nop
 8007c48:	200028b8 	.word	0x200028b8
 8007c4c:	20002510 	.word	0x20002510
 8007c50:	200027d4 	.word	0x200027d4
 8007c54:	88888889 	.word	0x88888889
 8007c58:	200026f4 	.word	0x200026f4
 8007c5c:	20002514 	.word	0x20002514
 8007c60:	2000250c 	.word	0x2000250c
				if (!isEmpty(&q)) {
 8007c64:	48b5      	ldr	r0, [pc, #724]	; (8007f3c <StartDefaultTask+0x3fc>)
 8007c66:	f000 faed 	bl	8008244 <isEmpty>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f040 80a6 	bne.w	8007dbe <StartDefaultTask+0x27e>
					if (tellers[i].state == 0) {
 8007c72:	49b3      	ldr	r1, [pc, #716]	; (8007f40 <StartDefaultTask+0x400>)
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	440b      	add	r3, r1
 8007c80:	3304      	adds	r3, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f040 809a 	bne.w	8007dbe <StartDefaultTask+0x27e>
						int q_wait_time = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60bb      	str	r3, [r7, #8]
						HAL_RNG_GenerateRandomNumber(&hrng, &randvar);
 8007c8e:	49ad      	ldr	r1, [pc, #692]	; (8007f44 <StartDefaultTask+0x404>)
 8007c90:	48ad      	ldr	r0, [pc, #692]	; (8007f48 <StartDefaultTask+0x408>)
 8007c92:	f7fa ff15 	bl	8002ac0 <HAL_RNG_GenerateRandomNumber>
						osMutexAcquire(mutexes[i], osWaitForever);
 8007c96:	4aad      	ldr	r2, [pc, #692]	; (8007f4c <StartDefaultTask+0x40c>)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fc fcba 	bl	800461c <osMutexAcquire>
						tellers[i].c = dequeue(&q);
 8007ca8:	48a4      	ldr	r0, [pc, #656]	; (8007f3c <StartDefaultTask+0x3fc>)
 8007caa:	f000 fb06 	bl	80082ba <dequeue>
 8007cae:	49a4      	ldr	r1, [pc, #656]	; (8007f40 <StartDefaultTask+0x400>)
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	440b      	add	r3, r1
 8007cbc:	6018      	str	r0, [r3, #0]
						tellers[i].c->teller_wait_time = randvar % 7 + 1; // 1 -> 8
 8007cbe:	4ba1      	ldr	r3, [pc, #644]	; (8007f44 <StartDefaultTask+0x404>)
 8007cc0:	6819      	ldr	r1, [r3, #0]
 8007cc2:	4ba3      	ldr	r3, [pc, #652]	; (8007f50 <StartDefaultTask+0x410>)
 8007cc4:	fba3 2301 	umull	r2, r3, r3, r1
 8007cc8:	1aca      	subs	r2, r1, r3
 8007cca:	0852      	lsrs	r2, r2, #1
 8007ccc:	4413      	add	r3, r2
 8007cce:	089a      	lsrs	r2, r3, #2
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	1a9b      	subs	r3, r3, r2
 8007cd6:	1aca      	subs	r2, r1, r3
 8007cd8:	1c50      	adds	r0, r2, #1
 8007cda:	4999      	ldr	r1, [pc, #612]	; (8007f40 <StartDefaultTask+0x400>)
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4602      	mov	r2, r0
 8007cec:	609a      	str	r2, [r3, #8]
						q_wait_time = tellers[i].c->queue_wait_time;
 8007cee:	4994      	ldr	r1, [pc, #592]	; (8007f40 <StartDefaultTask+0x400>)
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	440b      	add	r3, r1
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	60bb      	str	r3, [r7, #8]
						tellers[i].customers_serverd++;
 8007d02:	498f      	ldr	r1, [pc, #572]	; (8007f40 <StartDefaultTask+0x400>)
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	3308      	adds	r3, #8
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	1c59      	adds	r1, r3, #1
 8007d16:	488a      	ldr	r0, [pc, #552]	; (8007f40 <StartDefaultTask+0x400>)
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4403      	add	r3, r0
 8007d24:	3308      	adds	r3, #8
 8007d26:	6019      	str	r1, [r3, #0]
						if (tellers[i].wait_for_customers
 8007d28:	4985      	ldr	r1, [pc, #532]	; (8007f40 <StartDefaultTask+0x400>)
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	330c      	adds	r3, #12
 8007d38:	6819      	ldr	r1, [r3, #0]
								> tellers[i].max_wait_for_customers) {
 8007d3a:	4881      	ldr	r0, [pc, #516]	; (8007f40 <StartDefaultTask+0x400>)
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4403      	add	r3, r0
 8007d48:	3310      	adds	r3, #16
 8007d4a:	681b      	ldr	r3, [r3, #0]
						if (tellers[i].wait_for_customers
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	dd1b      	ble.n	8007d88 <StartDefaultTask+0x248>
							tellers[i].max_wait_for_customers =
									tellers[i].wait_for_customers;
 8007d50:	497b      	ldr	r1, [pc, #492]	; (8007f40 <StartDefaultTask+0x400>)
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4613      	mov	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	330c      	adds	r3, #12
 8007d60:	6819      	ldr	r1, [r3, #0]
							tellers[i].max_wait_for_customers =
 8007d62:	4877      	ldr	r0, [pc, #476]	; (8007f40 <StartDefaultTask+0x400>)
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4403      	add	r3, r0
 8007d70:	3310      	adds	r3, #16
 8007d72:	6019      	str	r1, [r3, #0]
							tellers[i].wait_for_customers = 0;
 8007d74:	4972      	ldr	r1, [pc, #456]	; (8007f40 <StartDefaultTask+0x400>)
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	330c      	adds	r3, #12
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
						}
						tellers[i].state = 1; // Busy
 8007d88:	496d      	ldr	r1, [pc, #436]	; (8007f40 <StartDefaultTask+0x400>)
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	3304      	adds	r3, #4
 8007d98:	2201      	movs	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
						osMutexRelease(mutexes[i]);
 8007d9c:	4a6b      	ldr	r2, [pc, #428]	; (8007f4c <StartDefaultTask+0x40c>)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fc fc97 	bl	80046d8 <osMutexRelease>

						// Metrics
						total_queue_time += q_wait_time;
 8007daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	4413      	add	r3, r2
 8007db0:	62fb      	str	r3, [r7, #44]	; 0x2c
						if (q_wait_time > max_queue_time) {
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	429a      	cmp	r2, r3
 8007db8:	dd01      	ble.n	8007dbe <StartDefaultTask+0x27e>
							max_queue_time = q_wait_time;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = 0; i < NUM_OF_TELLERS; i++) {
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	f77f af4c 	ble.w	8007c64 <StartDefaultTask+0x124>

					}
				}
			}

			spawn_time_left--;
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	633b      	str	r3, [r7, #48]	; 0x30
			my_time++;
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	637b      	str	r3, [r7, #52]	; 0x34
			if (my_time >= 420) {
 8007dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dda:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8007dde:	f2c0 80a5 	blt.w	8007f2c <StartDefaultTask+0x3ec>
				open_for_business = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
				// make sure all customers have left
				if (q.count == 0 && tellers[0].state == 0
 8007de6:	4b55      	ldr	r3, [pc, #340]	; (8007f3c <StartDefaultTask+0x3fc>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f040 809e 	bne.w	8007f2c <StartDefaultTask+0x3ec>
 8007df0:	4b53      	ldr	r3, [pc, #332]	; (8007f40 <StartDefaultTask+0x400>)
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f040 8099 	bne.w	8007f2c <StartDefaultTask+0x3ec>
						&& tellers[1].state == 0 && tellers[2].state == 0) {
 8007dfa:	4b51      	ldr	r3, [pc, #324]	; (8007f40 <StartDefaultTask+0x400>)
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f040 8094 	bne.w	8007f2c <StartDefaultTask+0x3ec>
 8007e04:	4b4e      	ldr	r3, [pc, #312]	; (8007f40 <StartDefaultTask+0x400>)
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f040 808f 	bne.w	8007f2c <StartDefaultTask+0x3ec>
					// We are done
					HAL_UART_Transmit(&huart2, "\r\n\n\nTotal Customers: ", strlen("\r\n\n\nTotal Customers: "), HAL_MAX_DELAY);
 8007e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e12:	2215      	movs	r2, #21
 8007e14:	494f      	ldr	r1, [pc, #316]	; (8007f54 <StartDefaultTask+0x414>)
 8007e16:	4850      	ldr	r0, [pc, #320]	; (8007f58 <StartDefaultTask+0x418>)
 8007e18:	f7fb f94e 	bl	80030b8 <HAL_UART_Transmit>
					UART_print(total_customers);
 8007e1c:	4b4f      	ldr	r3, [pc, #316]	; (8007f5c <StartDefaultTask+0x41c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff fc57 	bl	80076d4 <UART_print>
					HAL_UART_Transmit(&huart2, "\r\nTeller 1 Customers: ", strlen("\r\nTeller 1 Customers: "), HAL_MAX_DELAY);
 8007e26:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2a:	2216      	movs	r2, #22
 8007e2c:	494c      	ldr	r1, [pc, #304]	; (8007f60 <StartDefaultTask+0x420>)
 8007e2e:	484a      	ldr	r0, [pc, #296]	; (8007f58 <StartDefaultTask+0x418>)
 8007e30:	f7fb f942 	bl	80030b8 <HAL_UART_Transmit>
					UART_print(tellers[0].customers_serverd);
 8007e34:	4b42      	ldr	r3, [pc, #264]	; (8007f40 <StartDefaultTask+0x400>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7ff fc4b 	bl	80076d4 <UART_print>
					HAL_UART_Transmit(&huart2, "\r\nTeller 2 Customers: ", strlen("\r\nTeller 2 Customers: "), HAL_MAX_DELAY);
 8007e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e42:	2216      	movs	r2, #22
 8007e44:	4947      	ldr	r1, [pc, #284]	; (8007f64 <StartDefaultTask+0x424>)
 8007e46:	4844      	ldr	r0, [pc, #272]	; (8007f58 <StartDefaultTask+0x418>)
 8007e48:	f7fb f936 	bl	80030b8 <HAL_UART_Transmit>
					UART_print(tellers[1].customers_serverd);
 8007e4c:	4b3c      	ldr	r3, [pc, #240]	; (8007f40 <StartDefaultTask+0x400>)
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff fc3f 	bl	80076d4 <UART_print>
					HAL_UART_Transmit(&huart2, "\r\nTeller 3 Customers: ", strlen("\r\nTeller 3 Customers: "), HAL_MAX_DELAY);
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5a:	2216      	movs	r2, #22
 8007e5c:	4942      	ldr	r1, [pc, #264]	; (8007f68 <StartDefaultTask+0x428>)
 8007e5e:	483e      	ldr	r0, [pc, #248]	; (8007f58 <StartDefaultTask+0x418>)
 8007e60:	f7fb f92a 	bl	80030b8 <HAL_UART_Transmit>
					UART_print(tellers[2].customers_serverd);
 8007e64:	4b36      	ldr	r3, [pc, #216]	; (8007f40 <StartDefaultTask+0x400>)
 8007e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff fc33 	bl	80076d4 <UART_print>
					HAL_UART_Transmit(&huart2, "\r\nMax Customer Wait Time: ", strlen("\r\nMax Customer Wait Time: "), HAL_MAX_DELAY);
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e72:	221a      	movs	r2, #26
 8007e74:	493d      	ldr	r1, [pc, #244]	; (8007f6c <StartDefaultTask+0x42c>)
 8007e76:	4838      	ldr	r0, [pc, #224]	; (8007f58 <StartDefaultTask+0x418>)
 8007e78:	f7fb f91e 	bl	80030b8 <HAL_UART_Transmit>
					UART_print(max_queue_time);
 8007e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e7e:	f7ff fc29 	bl	80076d4 <UART_print>
					HAL_UART_Transmit(&huart2, "\r\nMax Teller Wait Time: ", strlen("\r\nMax Teller Wait Time: "), HAL_MAX_DELAY);
 8007e82:	f04f 33ff 	mov.w	r3, #4294967295
 8007e86:	2218      	movs	r2, #24
 8007e88:	4939      	ldr	r1, [pc, #228]	; (8007f70 <StartDefaultTask+0x430>)
 8007e8a:	4833      	ldr	r0, [pc, #204]	; (8007f58 <StartDefaultTask+0x418>)
 8007e8c:	f7fb f914 	bl	80030b8 <HAL_UART_Transmit>
					UART_print(max_queue_time);
 8007e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e92:	f7ff fc1f 	bl	80076d4 <UART_print>
					HAL_UART_Transmit(&huart2, "\r\nMax Transaction Time: ", strlen("\r\nMax Transaction Time: "), HAL_MAX_DELAY);
 8007e96:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9a:	2218      	movs	r2, #24
 8007e9c:	4935      	ldr	r1, [pc, #212]	; (8007f74 <StartDefaultTask+0x434>)
 8007e9e:	482e      	ldr	r0, [pc, #184]	; (8007f58 <StartDefaultTask+0x418>)
 8007ea0:	f7fb f90a 	bl	80030b8 <HAL_UART_Transmit>
					UART_print(max_queue_time);
 8007ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea6:	f7ff fc15 	bl	80076d4 <UART_print>
					HAL_UART_Transmit(&huart2, "\r\nLongest Queue: ", strlen("\r\nLongest Queue: "), HAL_MAX_DELAY);
 8007eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007eae:	2211      	movs	r2, #17
 8007eb0:	4931      	ldr	r1, [pc, #196]	; (8007f78 <StartDefaultTask+0x438>)
 8007eb2:	4829      	ldr	r0, [pc, #164]	; (8007f58 <StartDefaultTask+0x418>)
 8007eb4:	f7fb f900 	bl	80030b8 <HAL_UART_Transmit>
					UART_print(max_queue_time);
 8007eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eba:	f7ff fc0b 	bl	80076d4 <UART_print>
					HAL_UART_Transmit(&huart2, "\r\nAvg Customer Wait Time: ", strlen("\r\nAvg Customer Wait Time: "), HAL_MAX_DELAY);
 8007ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec2:	221a      	movs	r2, #26
 8007ec4:	492d      	ldr	r1, [pc, #180]	; (8007f7c <StartDefaultTask+0x43c>)
 8007ec6:	4824      	ldr	r0, [pc, #144]	; (8007f58 <StartDefaultTask+0x418>)
 8007ec8:	f7fb f8f6 	bl	80030b8 <HAL_UART_Transmit>
					UART_printlnf((double)(total_queue_time)/(double)(total_customers));
 8007ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ece:	f7f8 fb21 	bl	8000514 <__aeabi_i2d>
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	4b21      	ldr	r3, [pc, #132]	; (8007f5c <StartDefaultTask+0x41c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7f8 fb1a 	bl	8000514 <__aeabi_i2d>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	f7f8 fca8 	bl	800083c <__aeabi_ddiv>
 8007eec:	4603      	mov	r3, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	f7f8 fd8a 	bl	8000a0c <__aeabi_d2f>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	ee00 3a10 	vmov	s0, r3
 8007efe:	f7ff fc07 	bl	8007710 <UART_printlnf>
					HAL_UART_Transmit(&huart2, "\r\nAvg Transaction Time: ", strlen("\r\nAvg Transaction Time: "), HAL_MAX_DELAY);
 8007f02:	f04f 33ff 	mov.w	r3, #4294967295
 8007f06:	2218      	movs	r2, #24
 8007f08:	491d      	ldr	r1, [pc, #116]	; (8007f80 <StartDefaultTask+0x440>)
 8007f0a:	4813      	ldr	r0, [pc, #76]	; (8007f58 <StartDefaultTask+0x418>)
 8007f0c:	f7fb f8d4 	bl	80030b8 <HAL_UART_Transmit>
					UART_print(max_queue_time);
 8007f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f12:	f7ff fbdf 	bl	80076d4 <UART_print>
					HAL_UART_Transmit(&huart2, "\r\nAvg Wait Time: ", strlen("\r\nAvg Wait Time: "), HAL_MAX_DELAY);
 8007f16:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1a:	2211      	movs	r2, #17
 8007f1c:	4919      	ldr	r1, [pc, #100]	; (8007f84 <StartDefaultTask+0x444>)
 8007f1e:	480e      	ldr	r0, [pc, #56]	; (8007f58 <StartDefaultTask+0x418>)
 8007f20:	f7fb f8ca 	bl	80030b8 <HAL_UART_Transmit>
					UART_print(max_queue_time);
 8007f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f26:	f7ff fbd5 	bl	80076d4 <UART_print>


					while(1);
 8007f2a:	e7fe      	b.n	8007f2a <StartDefaultTask+0x3ea>
		while (my_time < display_timer) {
 8007f2c:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <StartDefaultTask+0x448>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f32:	429a      	cmp	r2, r3
 8007f34:	f6ff ae1e 	blt.w	8007b74 <StartDefaultTask+0x34>
 8007f38:	e7f8      	b.n	8007f2c <StartDefaultTask+0x3ec>
 8007f3a:	bf00      	nop
 8007f3c:	200028b8 	.word	0x200028b8
 8007f40:	200027e4 	.word	0x200027e4
 8007f44:	20002510 	.word	0x20002510
 8007f48:	200027d4 	.word	0x200027d4
 8007f4c:	200028a8 	.word	0x200028a8
 8007f50:	24924925 	.word	0x24924925
 8007f54:	08009028 	.word	0x08009028
 8007f58:	20002824 	.word	0x20002824
 8007f5c:	2000250c 	.word	0x2000250c
 8007f60:	08009040 	.word	0x08009040
 8007f64:	08009058 	.word	0x08009058
 8007f68:	08009070 	.word	0x08009070
 8007f6c:	08009088 	.word	0x08009088
 8007f70:	080090a4 	.word	0x080090a4
 8007f74:	080090c0 	.word	0x080090c0
 8007f78:	080090dc 	.word	0x080090dc
 8007f7c:	080090f0 	.word	0x080090f0
 8007f80:	0800910c 	.word	0x0800910c
 8007f84:	08009128 	.word	0x08009128
 8007f88:	20002508 	.word	0x20002508

08007f8c <StartTeller>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTeller */
void StartTeller(void *argument)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller */
	// Create New Teller
	int id = 0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	613b      	str	r3, [r7, #16]
	Teller *t = &tellers[id];
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4a21      	ldr	r2, [pc, #132]	; (8008028 <StartTeller+0x9c>)
 8007fa4:	4413      	add	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
	init_teller(t);
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 fb36 	bl	800861a <init_teller>

	/* Infinite loop */
	int my_time = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
	while (1) {
		//Generates Random Time for customer
		//Processes customer

		while (my_time < display_timer) {
 8007fb2:	e033      	b.n	800801c <StartTeller+0x90>
			my_time++;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	617b      	str	r3, [r7, #20]
			// If no customer
			if (t->c == NULL) {
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d115      	bne.n	8007fee <StartTeller+0x62>
				osMutexAcquire(mutexes[id], osWaitForever);
 8007fc2:	4a1a      	ldr	r2, [pc, #104]	; (800802c <StartTeller+0xa0>)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fca:	f04f 31ff 	mov.w	r1, #4294967295
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fc fb24 	bl	800461c <osMutexAcquire>
				t->wait_for_customers++;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	60da      	str	r2, [r3, #12]
				osMutexRelease(mutexes[id]);
 8007fde:	4a13      	ldr	r2, [pc, #76]	; (800802c <StartTeller+0xa0>)
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fc fb76 	bl	80046d8 <osMutexRelease>
 8007fec:	e016      	b.n	800801c <StartTeller+0x90>
			} else if (t->c->teller_wait_time == 0) {
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10c      	bne.n	8008012 <StartTeller+0x86>
				// Customer is done
				int cid = t->c->id;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	60bb      	str	r3, [r7, #8]
				clist_id[cid] = 0; // Free Customer
 8008000:	4a0b      	ldr	r2, [pc, #44]	; (8008030 <StartTeller+0xa4>)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2100      	movs	r1, #0
 8008006:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				t->state = 0; // Free Teller
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	605a      	str	r2, [r3, #4]
 8008010:	e004      	b.n	800801c <StartTeller+0x90>
			}

			else {
				t->c->teller_wait_time--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	3a01      	subs	r2, #1
 800801a:	609a      	str	r2, [r3, #8]
		while (my_time < display_timer) {
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <StartTeller+0xa8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	429a      	cmp	r2, r3
 8008024:	dbc6      	blt.n	8007fb4 <StartTeller+0x28>
 8008026:	e7f9      	b.n	800801c <StartTeller+0x90>
 8008028:	200027e4 	.word	0x200027e4
 800802c:	200028a8 	.word	0x200028a8
 8008030:	200026f4 	.word	0x200026f4
 8008034:	20002508 	.word	0x20002508

08008038 <StartTeller2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTeller2 */
void StartTeller2(void *argument)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller2 */
	// Create New Teller
	int id = 1;
 8008040:	2301      	movs	r3, #1
 8008042:	613b      	str	r3, [r7, #16]
	Teller *t = &tellers[id];
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4a21      	ldr	r2, [pc, #132]	; (80080d4 <StartTeller2+0x9c>)
 8008050:	4413      	add	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]
	init_teller(t);
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 fae0 	bl	800861a <init_teller>

	/* Infinite loop */
	int my_time = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	617b      	str	r3, [r7, #20]
	while (1) {
		//Generates Random Time for customer
		//Processes customer

		while (my_time < display_timer) {
 800805e:	e033      	b.n	80080c8 <StartTeller2+0x90>
			my_time++;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	3301      	adds	r3, #1
 8008064:	617b      	str	r3, [r7, #20]
			// If no customer
			if (t->c == NULL) {
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d115      	bne.n	800809a <StartTeller2+0x62>
				osMutexAcquire(mutexes[id], osWaitForever);
 800806e:	4a1a      	ldr	r2, [pc, #104]	; (80080d8 <StartTeller2+0xa0>)
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008076:	f04f 31ff 	mov.w	r1, #4294967295
 800807a:	4618      	mov	r0, r3
 800807c:	f7fc face 	bl	800461c <osMutexAcquire>
				t->wait_for_customers++;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	60da      	str	r2, [r3, #12]
				osMutexRelease(mutexes[id]);
 800808a:	4a13      	ldr	r2, [pc, #76]	; (80080d8 <StartTeller2+0xa0>)
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008092:	4618      	mov	r0, r3
 8008094:	f7fc fb20 	bl	80046d8 <osMutexRelease>
 8008098:	e016      	b.n	80080c8 <StartTeller2+0x90>
			} else if (t->c->teller_wait_time == 0) {
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10c      	bne.n	80080be <StartTeller2+0x86>
				// Customer is done
				int cid = t->c->id;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60bb      	str	r3, [r7, #8]
				clist_id[cid] = 0; // Free Customer
 80080ac:	4a0b      	ldr	r2, [pc, #44]	; (80080dc <StartTeller2+0xa4>)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2100      	movs	r1, #0
 80080b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				t->state = 0; // Free Teller
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	605a      	str	r2, [r3, #4]
 80080bc:	e004      	b.n	80080c8 <StartTeller2+0x90>
			}

			else {
				t->c->teller_wait_time--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	3a01      	subs	r2, #1
 80080c6:	609a      	str	r2, [r3, #8]
		while (my_time < display_timer) {
 80080c8:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <StartTeller2+0xa8>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	dbc6      	blt.n	8008060 <StartTeller2+0x28>
 80080d2:	e7f9      	b.n	80080c8 <StartTeller2+0x90>
 80080d4:	200027e4 	.word	0x200027e4
 80080d8:	200028a8 	.word	0x200028a8
 80080dc:	200026f4 	.word	0x200026f4
 80080e0:	20002508 	.word	0x20002508

080080e4 <StartTeller3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTeller3 */
void StartTeller3(void *argument)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller3 */
	// Create New Teller
	int id = 2;
 80080ec:	2302      	movs	r3, #2
 80080ee:	613b      	str	r3, [r7, #16]
	Teller *t = &tellers[id];
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4613      	mov	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4a21      	ldr	r2, [pc, #132]	; (8008180 <StartTeller3+0x9c>)
 80080fc:	4413      	add	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
	init_teller(t);
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fa8a 	bl	800861a <init_teller>

	/* Infinite loop */
	int my_time = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	617b      	str	r3, [r7, #20]
	while (1) {
		//Generates Random Time for customer
		//Processes customer

		while (my_time < display_timer) {
 800810a:	e033      	b.n	8008174 <StartTeller3+0x90>
			my_time++;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	3301      	adds	r3, #1
 8008110:	617b      	str	r3, [r7, #20]
			// If no customer
			if (t->c == NULL) {
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d115      	bne.n	8008146 <StartTeller3+0x62>
				osMutexAcquire(mutexes[id], osWaitForever);
 800811a:	4a1a      	ldr	r2, [pc, #104]	; (8008184 <StartTeller3+0xa0>)
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008122:	f04f 31ff 	mov.w	r1, #4294967295
 8008126:	4618      	mov	r0, r3
 8008128:	f7fc fa78 	bl	800461c <osMutexAcquire>
				t->wait_for_customers++;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	60da      	str	r2, [r3, #12]
				osMutexRelease(mutexes[id]);
 8008136:	4a13      	ldr	r2, [pc, #76]	; (8008184 <StartTeller3+0xa0>)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813e:	4618      	mov	r0, r3
 8008140:	f7fc faca 	bl	80046d8 <osMutexRelease>
 8008144:	e016      	b.n	8008174 <StartTeller3+0x90>
			} else if (t->c->teller_wait_time == 0) {
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10c      	bne.n	800816a <StartTeller3+0x86>
				// Customer is done
				int cid = t->c->id;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60bb      	str	r3, [r7, #8]
				clist_id[cid] = 0; // Free Customer
 8008158:	4a0b      	ldr	r2, [pc, #44]	; (8008188 <StartTeller3+0xa4>)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2100      	movs	r1, #0
 800815e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				t->state = 0; // Free Teller
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	605a      	str	r2, [r3, #4]
 8008168:	e004      	b.n	8008174 <StartTeller3+0x90>
			}

			else {
				t->c->teller_wait_time--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689a      	ldr	r2, [r3, #8]
 8008170:	3a01      	subs	r2, #1
 8008172:	609a      	str	r2, [r3, #8]
		while (my_time < display_timer) {
 8008174:	4b05      	ldr	r3, [pc, #20]	; (800818c <StartTeller3+0xa8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	429a      	cmp	r2, r3
 800817c:	dbc6      	blt.n	800810c <StartTeller3+0x28>
 800817e:	e7f9      	b.n	8008174 <StartTeller3+0x90>
 8008180:	200027e4 	.word	0x200027e4
 8008184:	200028a8 	.word	0x200028a8
 8008188:	200026f4 	.word	0x200026f4
 800818c:	20002508 	.word	0x20002508

08008190 <HeartbeatTimerCB>:
  /* USER CODE END StartTeller3 */
}

/* HeartbeatTimerCB function */
void HeartbeatTimerCB(void *argument)
{
 8008190:	b590      	push	{r4, r7, lr}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HeartbeatTimerCB */
	display_timer++;
 8008198:	4b0b      	ldr	r3, [pc, #44]	; (80081c8 <HeartbeatTimerCB+0x38>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3301      	adds	r3, #1
 800819e:	4a0a      	ldr	r2, [pc, #40]	; (80081c8 <HeartbeatTimerCB+0x38>)
 80081a0:	6013      	str	r3, [r2, #0]
	uint8_t buffer[13] = "Hello World\n\r";
 80081a2:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <HeartbeatTimerCB+0x3c>)
 80081a4:	f107 0408 	add.w	r4, r7, #8
 80081a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081aa:	c407      	stmia	r4!, {r0, r1, r2}
 80081ac:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, buffer, 13, HAL_MAX_DELAY);
 80081ae:	f107 0108 	add.w	r1, r7, #8
 80081b2:	f04f 33ff 	mov.w	r3, #4294967295
 80081b6:	220d      	movs	r2, #13
 80081b8:	4805      	ldr	r0, [pc, #20]	; (80081d0 <HeartbeatTimerCB+0x40>)
 80081ba:	f7fa ff7d 	bl	80030b8 <HAL_UART_Transmit>
  /* USER CODE END HeartbeatTimerCB */
}
 80081be:	bf00      	nop
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd90      	pop	{r4, r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20002508 	.word	0x20002508
 80081cc:	0800913c 	.word	0x0800913c
 80081d0:	20002824 	.word	0x20002824

080081d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM6) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a09      	ldr	r2, [pc, #36]	; (8008208 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d104      	bne.n	80081f0 <HAL_TIM_PeriodElapsedCallback+0x1c>
//		if (reducer == 0) {
//			reducer = 10;
//			display_timer++;
//		}
//		reducer--;
		display_timer++;
 80081e6:	4b09      	ldr	r3, [pc, #36]	; (800820c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	4a07      	ldr	r2, [pc, #28]	; (800820c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80081ee:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a04      	ldr	r2, [pc, #16]	; (8008208 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d101      	bne.n	80081fe <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 80081fa:	f7f8 fdf7 	bl	8000dec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	40001000 	.word	0x40001000
 800820c:	20002508 	.word	0x20002508

08008210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008214:	bf00      	nop
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <initialize>:
#define FALSE 0
#define FULL 100


void initialize(queue *q)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
    q->count = 0;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
    q->front = NULL;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	605a      	str	r2, [r3, #4]
    q->rear = NULL;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	609a      	str	r2, [r3, #8]
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <isEmpty>:

int isEmpty(queue *q)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
//    return (q->rear == NULL);
	return q->count == 0;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	bf0c      	ite	eq
 8008254:	2301      	moveq	r3, #1
 8008256:	2300      	movne	r3, #0
 8008258:	b2db      	uxtb	r3, r3
}
 800825a:	4618      	mov	r0, r3
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <enqueue>:

void enqueue(queue *q, Customer *c)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
    if (q->count < FULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b63      	cmp	r3, #99	; 0x63
 8008276:	dc1c      	bgt.n	80082b2 <enqueue+0x4c>
    {
//        node *tmp;
//        tmp = malloc(sizeof(node));
//        tmp->c = c;
//        tmp->next = NULL;
        c->next = NULL;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2200      	movs	r2, #0
 800827c:	60da      	str	r2, [r3, #12]

        if(!isEmpty(q))
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff ffe0 	bl	8008244 <isEmpty>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d107      	bne.n	800829a <enqueue+0x34>
        {
            q->rear->next = c;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	60da      	str	r2, [r3, #12]
            q->rear = c;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	609a      	str	r2, [r3, #8]
 8008298:	e006      	b.n	80082a8 <enqueue+0x42>
        }
        else
        {
            q->front = q->rear = c;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	609a      	str	r2, [r3, #8]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	605a      	str	r2, [r3, #4]
        }
        q->count++;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	601a      	str	r2, [r3, #0]
    }

}
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <dequeue>:

Customer* dequeue(queue *q)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
//    node *tmp;
    Customer *n = q->front;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	60fb      	str	r3, [r7, #12]
//    tmp = q->front;
    q->front = n->next;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	68da      	ldr	r2, [r3, #12]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	605a      	str	r2, [r3, #4]
    q->count--;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	1e5a      	subs	r2, r3, #1
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	601a      	str	r2, [r3, #0]
//    free(tmp);
    return(n);
 80082da:	68fb      	ldr	r3, [r7, #12]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <get_size>:

int get_size(queue *q){
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
	return q->count;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008306:	4b11      	ldr	r3, [pc, #68]	; (800834c <HAL_MspInit+0x4c>)
 8008308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800830a:	4a10      	ldr	r2, [pc, #64]	; (800834c <HAL_MspInit+0x4c>)
 800830c:	f043 0301 	orr.w	r3, r3, #1
 8008310:	6613      	str	r3, [r2, #96]	; 0x60
 8008312:	4b0e      	ldr	r3, [pc, #56]	; (800834c <HAL_MspInit+0x4c>)
 8008314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	607b      	str	r3, [r7, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800831e:	4b0b      	ldr	r3, [pc, #44]	; (800834c <HAL_MspInit+0x4c>)
 8008320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008322:	4a0a      	ldr	r2, [pc, #40]	; (800834c <HAL_MspInit+0x4c>)
 8008324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008328:	6593      	str	r3, [r2, #88]	; 0x58
 800832a:	4b08      	ldr	r3, [pc, #32]	; (800834c <HAL_MspInit+0x4c>)
 800832c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008336:	2200      	movs	r2, #0
 8008338:	210f      	movs	r1, #15
 800833a:	f06f 0001 	mvn.w	r0, #1
 800833e:	f7f8 fe2b 	bl	8000f98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	40021000 	.word	0x40021000

08008350 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a0a      	ldr	r2, [pc, #40]	; (8008388 <HAL_RNG_MspInit+0x38>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d10b      	bne.n	800837a <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8008362:	4b0a      	ldr	r3, [pc, #40]	; (800838c <HAL_RNG_MspInit+0x3c>)
 8008364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008366:	4a09      	ldr	r2, [pc, #36]	; (800838c <HAL_RNG_MspInit+0x3c>)
 8008368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800836c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800836e:	4b07      	ldr	r3, [pc, #28]	; (800838c <HAL_RNG_MspInit+0x3c>)
 8008370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800837a:	bf00      	nop
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	50060800 	.word	0x50060800
 800838c:	40021000 	.word	0x40021000

08008390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08a      	sub	sp, #40	; 0x28
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008398:	f107 0314 	add.w	r3, r7, #20
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	605a      	str	r2, [r3, #4]
 80083a2:	609a      	str	r2, [r3, #8]
 80083a4:	60da      	str	r2, [r3, #12]
 80083a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1b      	ldr	r2, [pc, #108]	; (800841c <HAL_UART_MspInit+0x8c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d12f      	bne.n	8008412 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80083b2:	4b1b      	ldr	r3, [pc, #108]	; (8008420 <HAL_UART_MspInit+0x90>)
 80083b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b6:	4a1a      	ldr	r2, [pc, #104]	; (8008420 <HAL_UART_MspInit+0x90>)
 80083b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083bc:	6593      	str	r3, [r2, #88]	; 0x58
 80083be:	4b18      	ldr	r3, [pc, #96]	; (8008420 <HAL_UART_MspInit+0x90>)
 80083c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80083ca:	4b15      	ldr	r3, [pc, #84]	; (8008420 <HAL_UART_MspInit+0x90>)
 80083cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ce:	4a14      	ldr	r2, [pc, #80]	; (8008420 <HAL_UART_MspInit+0x90>)
 80083d0:	f043 0308 	orr.w	r3, r3, #8
 80083d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083d6:	4b12      	ldr	r3, [pc, #72]	; (8008420 <HAL_UART_MspInit+0x90>)
 80083d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083da:	f003 0308 	and.w	r3, r3, #8
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80083e2:	2360      	movs	r3, #96	; 0x60
 80083e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e6:	2302      	movs	r3, #2
 80083e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083ee:	2303      	movs	r3, #3
 80083f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80083f2:	2307      	movs	r3, #7
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083f6:	f107 0314 	add.w	r3, r7, #20
 80083fa:	4619      	mov	r1, r3
 80083fc:	4809      	ldr	r0, [pc, #36]	; (8008424 <HAL_UART_MspInit+0x94>)
 80083fe:	f7f8 fe37 	bl	8001070 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8008402:	2200      	movs	r2, #0
 8008404:	2105      	movs	r1, #5
 8008406:	2026      	movs	r0, #38	; 0x26
 8008408:	f7f8 fdc6 	bl	8000f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800840c:	2026      	movs	r0, #38	; 0x26
 800840e:	f7f8 fddf 	bl	8000fd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008412:	bf00      	nop
 8008414:	3728      	adds	r7, #40	; 0x28
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	40004400 	.word	0x40004400
 8008420:	40021000 	.word	0x40021000
 8008424:	48000c00 	.word	0x48000c00

08008428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08c      	sub	sp, #48	; 0x30
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8008438:	2200      	movs	r2, #0
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	2036      	movs	r0, #54	; 0x36
 800843e:	f7f8 fdab 	bl	8000f98 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8008442:	2036      	movs	r0, #54	; 0x36
 8008444:	f7f8 fdc4 	bl	8000fd0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008448:	4b1e      	ldr	r3, [pc, #120]	; (80084c4 <HAL_InitTick+0x9c>)
 800844a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844c:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <HAL_InitTick+0x9c>)
 800844e:	f043 0310 	orr.w	r3, r3, #16
 8008452:	6593      	str	r3, [r2, #88]	; 0x58
 8008454:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <HAL_InitTick+0x9c>)
 8008456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008460:	f107 0210 	add.w	r2, r7, #16
 8008464:	f107 0314 	add.w	r3, r7, #20
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7f9 fd96 	bl	8001f9c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008470:	f7f9 fd68 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8008474:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008478:	4a13      	ldr	r2, [pc, #76]	; (80084c8 <HAL_InitTick+0xa0>)
 800847a:	fba2 2303 	umull	r2, r3, r2, r3
 800847e:	0c9b      	lsrs	r3, r3, #18
 8008480:	3b01      	subs	r3, #1
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008484:	4b11      	ldr	r3, [pc, #68]	; (80084cc <HAL_InitTick+0xa4>)
 8008486:	4a12      	ldr	r2, [pc, #72]	; (80084d0 <HAL_InitTick+0xa8>)
 8008488:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800848a:	4b10      	ldr	r3, [pc, #64]	; (80084cc <HAL_InitTick+0xa4>)
 800848c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008490:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008492:	4a0e      	ldr	r2, [pc, #56]	; (80084cc <HAL_InitTick+0xa4>)
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008498:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <HAL_InitTick+0xa4>)
 800849a:	2200      	movs	r2, #0
 800849c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800849e:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <HAL_InitTick+0xa4>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80084a4:	4809      	ldr	r0, [pc, #36]	; (80084cc <HAL_InitTick+0xa4>)
 80084a6:	f7fa fb5a 	bl	8002b5e <HAL_TIM_Base_Init>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d104      	bne.n	80084ba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80084b0:	4806      	ldr	r0, [pc, #24]	; (80084cc <HAL_InitTick+0xa4>)
 80084b2:	f7fa fb89 	bl	8002bc8 <HAL_TIM_Base_Start_IT>
 80084b6:	4603      	mov	r3, r0
 80084b8:	e000      	b.n	80084bc <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3730      	adds	r7, #48	; 0x30
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	40021000 	.word	0x40021000
 80084c8:	431bde83 	.word	0x431bde83
 80084cc:	200028c4 	.word	0x200028c4
 80084d0:	40001000 	.word	0x40001000

080084d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80084d8:	bf00      	nop
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80084e2:	b480      	push	{r7}
 80084e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084e6:	e7fe      	b.n	80084e6 <HardFault_Handler+0x4>

080084e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80084ec:	e7fe      	b.n	80084ec <MemManage_Handler+0x4>

080084ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80084ee:	b480      	push	{r7}
 80084f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80084f2:	e7fe      	b.n	80084f2 <BusFault_Handler+0x4>

080084f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084f8:	e7fe      	b.n	80084f8 <UsageFault_Handler+0x4>

080084fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084fa:	b480      	push	{r7}
 80084fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80084fe:	bf00      	nop
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800850c:	4802      	ldr	r0, [pc, #8]	; (8008518 <USART2_IRQHandler+0x10>)
 800850e:	f7fa ff09 	bl	8003324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008512:	bf00      	nop
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20002824 	.word	0x20002824

0800851c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008520:	4802      	ldr	r0, [pc, #8]	; (800852c <TIM6_DAC_IRQHandler+0x10>)
 8008522:	f7fa fb7b 	bl	8002c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008526:	bf00      	nop
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	200028c4 	.word	0x200028c4

08008530 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008538:	4b11      	ldr	r3, [pc, #68]	; (8008580 <_sbrk+0x50>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d102      	bne.n	8008546 <_sbrk+0x16>
		heap_end = &end;
 8008540:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <_sbrk+0x50>)
 8008542:	4a10      	ldr	r2, [pc, #64]	; (8008584 <_sbrk+0x54>)
 8008544:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008546:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <_sbrk+0x50>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800854c:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <_sbrk+0x50>)
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4413      	add	r3, r2
 8008554:	466a      	mov	r2, sp
 8008556:	4293      	cmp	r3, r2
 8008558:	d907      	bls.n	800856a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800855a:	f000 f8a1 	bl	80086a0 <__errno>
 800855e:	4602      	mov	r2, r0
 8008560:	230c      	movs	r3, #12
 8008562:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008564:	f04f 33ff 	mov.w	r3, #4294967295
 8008568:	e006      	b.n	8008578 <_sbrk+0x48>
	}

	heap_end += incr;
 800856a:	4b05      	ldr	r3, [pc, #20]	; (8008580 <_sbrk+0x50>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4413      	add	r3, r2
 8008572:	4a03      	ldr	r2, [pc, #12]	; (8008580 <_sbrk+0x50>)
 8008574:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008576:	68fb      	ldr	r3, [r7, #12]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	2000276c 	.word	0x2000276c
 8008584:	20002908 	.word	0x20002908

08008588 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800858c:	4b17      	ldr	r3, [pc, #92]	; (80085ec <SystemInit+0x64>)
 800858e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008592:	4a16      	ldr	r2, [pc, #88]	; (80085ec <SystemInit+0x64>)
 8008594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800859c:	4b14      	ldr	r3, [pc, #80]	; (80085f0 <SystemInit+0x68>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a13      	ldr	r2, [pc, #76]	; (80085f0 <SystemInit+0x68>)
 80085a2:	f043 0301 	orr.w	r3, r3, #1
 80085a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80085a8:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <SystemInit+0x68>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80085ae:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <SystemInit+0x68>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a0f      	ldr	r2, [pc, #60]	; (80085f0 <SystemInit+0x68>)
 80085b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80085b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80085bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80085be:	4b0c      	ldr	r3, [pc, #48]	; (80085f0 <SystemInit+0x68>)
 80085c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80085c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80085c6:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <SystemInit+0x68>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <SystemInit+0x68>)
 80085cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80085d2:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <SystemInit+0x68>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80085d8:	4b04      	ldr	r3, [pc, #16]	; (80085ec <SystemInit+0x64>)
 80085da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085de:	609a      	str	r2, [r3, #8]
#endif
}
 80085e0:	bf00      	nop
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	e000ed00 	.word	0xe000ed00
 80085f0:	40021000 	.word	0x40021000

080085f4 <init_customer>:

#include "types.h"
#include <stdio.h>
#include <stdlib.h>

void init_customer(Customer *c){
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	c->id = 0;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]
	c->queue_wait_time = 0;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	605a      	str	r2, [r3, #4]
	c->teller_wait_time = 0;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	609a      	str	r2, [r3, #8]
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <init_teller>:

void send_to_teller(Customer *c, Teller *t){

}

void init_teller(Teller *t){
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
	t->c = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]
	t->state = 0;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	605a      	str	r2, [r3, #4]
	t->customers_serverd = 0;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	609a      	str	r2, [r3, #8]
	t->wait_for_customers = 0;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	60da      	str	r2, [r3, #12]
	t->max_wait_for_customers = 0;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	611a      	str	r2, [r3, #16]
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800864c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008684 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008650:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008652:	e003      	b.n	800865c <LoopCopyDataInit>

08008654 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008654:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008656:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008658:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800865a:	3104      	adds	r1, #4

0800865c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800865c:	480b      	ldr	r0, [pc, #44]	; (800868c <LoopForever+0xa>)
	ldr	r3, =_edata
 800865e:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008660:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008662:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008664:	d3f6      	bcc.n	8008654 <CopyDataInit>
	ldr	r2, =_sbss
 8008666:	4a0b      	ldr	r2, [pc, #44]	; (8008694 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008668:	e002      	b.n	8008670 <LoopFillZerobss>

0800866a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800866a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800866c:	f842 3b04 	str.w	r3, [r2], #4

08008670 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008670:	4b09      	ldr	r3, [pc, #36]	; (8008698 <LoopForever+0x16>)
	cmp	r2, r3
 8008672:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008674:	d3f9      	bcc.n	800866a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008676:	f7ff ff87 	bl	8008588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800867a:	f000 f817 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800867e:	f7ff f86b 	bl	8007758 <main>

08008682 <LoopForever>:

LoopForever:
    b LoopForever
 8008682:	e7fe      	b.n	8008682 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008684:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8008688:	080092a8 	.word	0x080092a8
	ldr	r0, =_sdata
 800868c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008690:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8008694:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8008698:	20002908 	.word	0x20002908

0800869c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800869c:	e7fe      	b.n	800869c <ADC1_2_IRQHandler>
	...

080086a0 <__errno>:
 80086a0:	4b01      	ldr	r3, [pc, #4]	; (80086a8 <__errno+0x8>)
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000010 	.word	0x20000010

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4e0d      	ldr	r6, [pc, #52]	; (80086e4 <__libc_init_array+0x38>)
 80086b0:	4c0d      	ldr	r4, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b2:	1ba4      	subs	r4, r4, r6
 80086b4:	10a4      	asrs	r4, r4, #2
 80086b6:	2500      	movs	r5, #0
 80086b8:	42a5      	cmp	r5, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	4e0b      	ldr	r6, [pc, #44]	; (80086ec <__libc_init_array+0x40>)
 80086be:	4c0c      	ldr	r4, [pc, #48]	; (80086f0 <__libc_init_array+0x44>)
 80086c0:	f000 fc28 	bl	8008f14 <_init>
 80086c4:	1ba4      	subs	r4, r4, r6
 80086c6:	10a4      	asrs	r4, r4, #2
 80086c8:	2500      	movs	r5, #0
 80086ca:	42a5      	cmp	r5, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086d4:	4798      	blx	r3
 80086d6:	3501      	adds	r5, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086de:	4798      	blx	r3
 80086e0:	3501      	adds	r5, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	080092a0 	.word	0x080092a0
 80086e8:	080092a0 	.word	0x080092a0
 80086ec:	080092a0 	.word	0x080092a0
 80086f0:	080092a4 	.word	0x080092a4

080086f4 <memcpy>:
 80086f4:	b510      	push	{r4, lr}
 80086f6:	1e43      	subs	r3, r0, #1
 80086f8:	440a      	add	r2, r1
 80086fa:	4291      	cmp	r1, r2
 80086fc:	d100      	bne.n	8008700 <memcpy+0xc>
 80086fe:	bd10      	pop	{r4, pc}
 8008700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008708:	e7f7      	b.n	80086fa <memcpy+0x6>

0800870a <memset>:
 800870a:	4402      	add	r2, r0
 800870c:	4603      	mov	r3, r0
 800870e:	4293      	cmp	r3, r2
 8008710:	d100      	bne.n	8008714 <memset+0xa>
 8008712:	4770      	bx	lr
 8008714:	f803 1b01 	strb.w	r1, [r3], #1
 8008718:	e7f9      	b.n	800870e <memset+0x4>
	...

0800871c <_free_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4605      	mov	r5, r0
 8008720:	2900      	cmp	r1, #0
 8008722:	d045      	beq.n	80087b0 <_free_r+0x94>
 8008724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008728:	1f0c      	subs	r4, r1, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	bfb8      	it	lt
 800872e:	18e4      	addlt	r4, r4, r3
 8008730:	f000 f8cc 	bl	80088cc <__malloc_lock>
 8008734:	4a1f      	ldr	r2, [pc, #124]	; (80087b4 <_free_r+0x98>)
 8008736:	6813      	ldr	r3, [r2, #0]
 8008738:	4610      	mov	r0, r2
 800873a:	b933      	cbnz	r3, 800874a <_free_r+0x2e>
 800873c:	6063      	str	r3, [r4, #4]
 800873e:	6014      	str	r4, [r2, #0]
 8008740:	4628      	mov	r0, r5
 8008742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008746:	f000 b8c2 	b.w	80088ce <__malloc_unlock>
 800874a:	42a3      	cmp	r3, r4
 800874c:	d90c      	bls.n	8008768 <_free_r+0x4c>
 800874e:	6821      	ldr	r1, [r4, #0]
 8008750:	1862      	adds	r2, r4, r1
 8008752:	4293      	cmp	r3, r2
 8008754:	bf04      	itt	eq
 8008756:	681a      	ldreq	r2, [r3, #0]
 8008758:	685b      	ldreq	r3, [r3, #4]
 800875a:	6063      	str	r3, [r4, #4]
 800875c:	bf04      	itt	eq
 800875e:	1852      	addeq	r2, r2, r1
 8008760:	6022      	streq	r2, [r4, #0]
 8008762:	6004      	str	r4, [r0, #0]
 8008764:	e7ec      	b.n	8008740 <_free_r+0x24>
 8008766:	4613      	mov	r3, r2
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	b10a      	cbz	r2, 8008770 <_free_r+0x54>
 800876c:	42a2      	cmp	r2, r4
 800876e:	d9fa      	bls.n	8008766 <_free_r+0x4a>
 8008770:	6819      	ldr	r1, [r3, #0]
 8008772:	1858      	adds	r0, r3, r1
 8008774:	42a0      	cmp	r0, r4
 8008776:	d10b      	bne.n	8008790 <_free_r+0x74>
 8008778:	6820      	ldr	r0, [r4, #0]
 800877a:	4401      	add	r1, r0
 800877c:	1858      	adds	r0, r3, r1
 800877e:	4282      	cmp	r2, r0
 8008780:	6019      	str	r1, [r3, #0]
 8008782:	d1dd      	bne.n	8008740 <_free_r+0x24>
 8008784:	6810      	ldr	r0, [r2, #0]
 8008786:	6852      	ldr	r2, [r2, #4]
 8008788:	605a      	str	r2, [r3, #4]
 800878a:	4401      	add	r1, r0
 800878c:	6019      	str	r1, [r3, #0]
 800878e:	e7d7      	b.n	8008740 <_free_r+0x24>
 8008790:	d902      	bls.n	8008798 <_free_r+0x7c>
 8008792:	230c      	movs	r3, #12
 8008794:	602b      	str	r3, [r5, #0]
 8008796:	e7d3      	b.n	8008740 <_free_r+0x24>
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	1821      	adds	r1, r4, r0
 800879c:	428a      	cmp	r2, r1
 800879e:	bf04      	itt	eq
 80087a0:	6811      	ldreq	r1, [r2, #0]
 80087a2:	6852      	ldreq	r2, [r2, #4]
 80087a4:	6062      	str	r2, [r4, #4]
 80087a6:	bf04      	itt	eq
 80087a8:	1809      	addeq	r1, r1, r0
 80087aa:	6021      	streq	r1, [r4, #0]
 80087ac:	605c      	str	r4, [r3, #4]
 80087ae:	e7c7      	b.n	8008740 <_free_r+0x24>
 80087b0:	bd38      	pop	{r3, r4, r5, pc}
 80087b2:	bf00      	nop
 80087b4:	20002770 	.word	0x20002770

080087b8 <_malloc_r>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	1ccd      	adds	r5, r1, #3
 80087bc:	f025 0503 	bic.w	r5, r5, #3
 80087c0:	3508      	adds	r5, #8
 80087c2:	2d0c      	cmp	r5, #12
 80087c4:	bf38      	it	cc
 80087c6:	250c      	movcc	r5, #12
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	4606      	mov	r6, r0
 80087cc:	db01      	blt.n	80087d2 <_malloc_r+0x1a>
 80087ce:	42a9      	cmp	r1, r5
 80087d0:	d903      	bls.n	80087da <_malloc_r+0x22>
 80087d2:	230c      	movs	r3, #12
 80087d4:	6033      	str	r3, [r6, #0]
 80087d6:	2000      	movs	r0, #0
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	f000 f877 	bl	80088cc <__malloc_lock>
 80087de:	4a21      	ldr	r2, [pc, #132]	; (8008864 <_malloc_r+0xac>)
 80087e0:	6814      	ldr	r4, [r2, #0]
 80087e2:	4621      	mov	r1, r4
 80087e4:	b991      	cbnz	r1, 800880c <_malloc_r+0x54>
 80087e6:	4c20      	ldr	r4, [pc, #128]	; (8008868 <_malloc_r+0xb0>)
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	b91b      	cbnz	r3, 80087f4 <_malloc_r+0x3c>
 80087ec:	4630      	mov	r0, r6
 80087ee:	f000 f83d 	bl	800886c <_sbrk_r>
 80087f2:	6020      	str	r0, [r4, #0]
 80087f4:	4629      	mov	r1, r5
 80087f6:	4630      	mov	r0, r6
 80087f8:	f000 f838 	bl	800886c <_sbrk_r>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d124      	bne.n	800884a <_malloc_r+0x92>
 8008800:	230c      	movs	r3, #12
 8008802:	6033      	str	r3, [r6, #0]
 8008804:	4630      	mov	r0, r6
 8008806:	f000 f862 	bl	80088ce <__malloc_unlock>
 800880a:	e7e4      	b.n	80087d6 <_malloc_r+0x1e>
 800880c:	680b      	ldr	r3, [r1, #0]
 800880e:	1b5b      	subs	r3, r3, r5
 8008810:	d418      	bmi.n	8008844 <_malloc_r+0x8c>
 8008812:	2b0b      	cmp	r3, #11
 8008814:	d90f      	bls.n	8008836 <_malloc_r+0x7e>
 8008816:	600b      	str	r3, [r1, #0]
 8008818:	50cd      	str	r5, [r1, r3]
 800881a:	18cc      	adds	r4, r1, r3
 800881c:	4630      	mov	r0, r6
 800881e:	f000 f856 	bl	80088ce <__malloc_unlock>
 8008822:	f104 000b 	add.w	r0, r4, #11
 8008826:	1d23      	adds	r3, r4, #4
 8008828:	f020 0007 	bic.w	r0, r0, #7
 800882c:	1ac3      	subs	r3, r0, r3
 800882e:	d0d3      	beq.n	80087d8 <_malloc_r+0x20>
 8008830:	425a      	negs	r2, r3
 8008832:	50e2      	str	r2, [r4, r3]
 8008834:	e7d0      	b.n	80087d8 <_malloc_r+0x20>
 8008836:	428c      	cmp	r4, r1
 8008838:	684b      	ldr	r3, [r1, #4]
 800883a:	bf16      	itet	ne
 800883c:	6063      	strne	r3, [r4, #4]
 800883e:	6013      	streq	r3, [r2, #0]
 8008840:	460c      	movne	r4, r1
 8008842:	e7eb      	b.n	800881c <_malloc_r+0x64>
 8008844:	460c      	mov	r4, r1
 8008846:	6849      	ldr	r1, [r1, #4]
 8008848:	e7cc      	b.n	80087e4 <_malloc_r+0x2c>
 800884a:	1cc4      	adds	r4, r0, #3
 800884c:	f024 0403 	bic.w	r4, r4, #3
 8008850:	42a0      	cmp	r0, r4
 8008852:	d005      	beq.n	8008860 <_malloc_r+0xa8>
 8008854:	1a21      	subs	r1, r4, r0
 8008856:	4630      	mov	r0, r6
 8008858:	f000 f808 	bl	800886c <_sbrk_r>
 800885c:	3001      	adds	r0, #1
 800885e:	d0cf      	beq.n	8008800 <_malloc_r+0x48>
 8008860:	6025      	str	r5, [r4, #0]
 8008862:	e7db      	b.n	800881c <_malloc_r+0x64>
 8008864:	20002770 	.word	0x20002770
 8008868:	20002774 	.word	0x20002774

0800886c <_sbrk_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4c06      	ldr	r4, [pc, #24]	; (8008888 <_sbrk_r+0x1c>)
 8008870:	2300      	movs	r3, #0
 8008872:	4605      	mov	r5, r0
 8008874:	4608      	mov	r0, r1
 8008876:	6023      	str	r3, [r4, #0]
 8008878:	f7ff fe5a 	bl	8008530 <_sbrk>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d102      	bne.n	8008886 <_sbrk_r+0x1a>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	b103      	cbz	r3, 8008886 <_sbrk_r+0x1a>
 8008884:	602b      	str	r3, [r5, #0]
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	20002904 	.word	0x20002904

0800888c <siprintf>:
 800888c:	b40e      	push	{r1, r2, r3}
 800888e:	b500      	push	{lr}
 8008890:	b09c      	sub	sp, #112	; 0x70
 8008892:	ab1d      	add	r3, sp, #116	; 0x74
 8008894:	9002      	str	r0, [sp, #8]
 8008896:	9006      	str	r0, [sp, #24]
 8008898:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800889c:	4809      	ldr	r0, [pc, #36]	; (80088c4 <siprintf+0x38>)
 800889e:	9107      	str	r1, [sp, #28]
 80088a0:	9104      	str	r1, [sp, #16]
 80088a2:	4909      	ldr	r1, [pc, #36]	; (80088c8 <siprintf+0x3c>)
 80088a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a8:	9105      	str	r1, [sp, #20]
 80088aa:	6800      	ldr	r0, [r0, #0]
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	a902      	add	r1, sp, #8
 80088b0:	f000 f868 	bl	8008984 <_svfiprintf_r>
 80088b4:	9b02      	ldr	r3, [sp, #8]
 80088b6:	2200      	movs	r2, #0
 80088b8:	701a      	strb	r2, [r3, #0]
 80088ba:	b01c      	add	sp, #112	; 0x70
 80088bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c0:	b003      	add	sp, #12
 80088c2:	4770      	bx	lr
 80088c4:	20000010 	.word	0x20000010
 80088c8:	ffff0208 	.word	0xffff0208

080088cc <__malloc_lock>:
 80088cc:	4770      	bx	lr

080088ce <__malloc_unlock>:
 80088ce:	4770      	bx	lr

080088d0 <__ssputs_r>:
 80088d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d4:	688e      	ldr	r6, [r1, #8]
 80088d6:	429e      	cmp	r6, r3
 80088d8:	4682      	mov	sl, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	4690      	mov	r8, r2
 80088de:	4699      	mov	r9, r3
 80088e0:	d837      	bhi.n	8008952 <__ssputs_r+0x82>
 80088e2:	898a      	ldrh	r2, [r1, #12]
 80088e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088e8:	d031      	beq.n	800894e <__ssputs_r+0x7e>
 80088ea:	6825      	ldr	r5, [r4, #0]
 80088ec:	6909      	ldr	r1, [r1, #16]
 80088ee:	1a6f      	subs	r7, r5, r1
 80088f0:	6965      	ldr	r5, [r4, #20]
 80088f2:	2302      	movs	r3, #2
 80088f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80088fc:	f109 0301 	add.w	r3, r9, #1
 8008900:	443b      	add	r3, r7
 8008902:	429d      	cmp	r5, r3
 8008904:	bf38      	it	cc
 8008906:	461d      	movcc	r5, r3
 8008908:	0553      	lsls	r3, r2, #21
 800890a:	d530      	bpl.n	800896e <__ssputs_r+0x9e>
 800890c:	4629      	mov	r1, r5
 800890e:	f7ff ff53 	bl	80087b8 <_malloc_r>
 8008912:	4606      	mov	r6, r0
 8008914:	b950      	cbnz	r0, 800892c <__ssputs_r+0x5c>
 8008916:	230c      	movs	r3, #12
 8008918:	f8ca 3000 	str.w	r3, [sl]
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892c:	463a      	mov	r2, r7
 800892e:	6921      	ldr	r1, [r4, #16]
 8008930:	f7ff fee0 	bl	80086f4 <memcpy>
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800893a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	6126      	str	r6, [r4, #16]
 8008942:	6165      	str	r5, [r4, #20]
 8008944:	443e      	add	r6, r7
 8008946:	1bed      	subs	r5, r5, r7
 8008948:	6026      	str	r6, [r4, #0]
 800894a:	60a5      	str	r5, [r4, #8]
 800894c:	464e      	mov	r6, r9
 800894e:	454e      	cmp	r6, r9
 8008950:	d900      	bls.n	8008954 <__ssputs_r+0x84>
 8008952:	464e      	mov	r6, r9
 8008954:	4632      	mov	r2, r6
 8008956:	4641      	mov	r1, r8
 8008958:	6820      	ldr	r0, [r4, #0]
 800895a:	f000 fa93 	bl	8008e84 <memmove>
 800895e:	68a3      	ldr	r3, [r4, #8]
 8008960:	1b9b      	subs	r3, r3, r6
 8008962:	60a3      	str	r3, [r4, #8]
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	441e      	add	r6, r3
 8008968:	6026      	str	r6, [r4, #0]
 800896a:	2000      	movs	r0, #0
 800896c:	e7dc      	b.n	8008928 <__ssputs_r+0x58>
 800896e:	462a      	mov	r2, r5
 8008970:	f000 faa1 	bl	8008eb6 <_realloc_r>
 8008974:	4606      	mov	r6, r0
 8008976:	2800      	cmp	r0, #0
 8008978:	d1e2      	bne.n	8008940 <__ssputs_r+0x70>
 800897a:	6921      	ldr	r1, [r4, #16]
 800897c:	4650      	mov	r0, sl
 800897e:	f7ff fecd 	bl	800871c <_free_r>
 8008982:	e7c8      	b.n	8008916 <__ssputs_r+0x46>

08008984 <_svfiprintf_r>:
 8008984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	461d      	mov	r5, r3
 800898a:	898b      	ldrh	r3, [r1, #12]
 800898c:	061f      	lsls	r7, r3, #24
 800898e:	b09d      	sub	sp, #116	; 0x74
 8008990:	4680      	mov	r8, r0
 8008992:	460c      	mov	r4, r1
 8008994:	4616      	mov	r6, r2
 8008996:	d50f      	bpl.n	80089b8 <_svfiprintf_r+0x34>
 8008998:	690b      	ldr	r3, [r1, #16]
 800899a:	b96b      	cbnz	r3, 80089b8 <_svfiprintf_r+0x34>
 800899c:	2140      	movs	r1, #64	; 0x40
 800899e:	f7ff ff0b 	bl	80087b8 <_malloc_r>
 80089a2:	6020      	str	r0, [r4, #0]
 80089a4:	6120      	str	r0, [r4, #16]
 80089a6:	b928      	cbnz	r0, 80089b4 <_svfiprintf_r+0x30>
 80089a8:	230c      	movs	r3, #12
 80089aa:	f8c8 3000 	str.w	r3, [r8]
 80089ae:	f04f 30ff 	mov.w	r0, #4294967295
 80089b2:	e0c8      	b.n	8008b46 <_svfiprintf_r+0x1c2>
 80089b4:	2340      	movs	r3, #64	; 0x40
 80089b6:	6163      	str	r3, [r4, #20]
 80089b8:	2300      	movs	r3, #0
 80089ba:	9309      	str	r3, [sp, #36]	; 0x24
 80089bc:	2320      	movs	r3, #32
 80089be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089c2:	2330      	movs	r3, #48	; 0x30
 80089c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089c8:	9503      	str	r5, [sp, #12]
 80089ca:	f04f 0b01 	mov.w	fp, #1
 80089ce:	4637      	mov	r7, r6
 80089d0:	463d      	mov	r5, r7
 80089d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80089d6:	b10b      	cbz	r3, 80089dc <_svfiprintf_r+0x58>
 80089d8:	2b25      	cmp	r3, #37	; 0x25
 80089da:	d13e      	bne.n	8008a5a <_svfiprintf_r+0xd6>
 80089dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80089e0:	d00b      	beq.n	80089fa <_svfiprintf_r+0x76>
 80089e2:	4653      	mov	r3, sl
 80089e4:	4632      	mov	r2, r6
 80089e6:	4621      	mov	r1, r4
 80089e8:	4640      	mov	r0, r8
 80089ea:	f7ff ff71 	bl	80088d0 <__ssputs_r>
 80089ee:	3001      	adds	r0, #1
 80089f0:	f000 80a4 	beq.w	8008b3c <_svfiprintf_r+0x1b8>
 80089f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f6:	4453      	add	r3, sl
 80089f8:	9309      	str	r3, [sp, #36]	; 0x24
 80089fa:	783b      	ldrb	r3, [r7, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 809d 	beq.w	8008b3c <_svfiprintf_r+0x1b8>
 8008a02:	2300      	movs	r3, #0
 8008a04:	f04f 32ff 	mov.w	r2, #4294967295
 8008a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a0c:	9304      	str	r3, [sp, #16]
 8008a0e:	9307      	str	r3, [sp, #28]
 8008a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a14:	931a      	str	r3, [sp, #104]	; 0x68
 8008a16:	462f      	mov	r7, r5
 8008a18:	2205      	movs	r2, #5
 8008a1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008a1e:	4850      	ldr	r0, [pc, #320]	; (8008b60 <_svfiprintf_r+0x1dc>)
 8008a20:	f7f7 fbd6 	bl	80001d0 <memchr>
 8008a24:	9b04      	ldr	r3, [sp, #16]
 8008a26:	b9d0      	cbnz	r0, 8008a5e <_svfiprintf_r+0xda>
 8008a28:	06d9      	lsls	r1, r3, #27
 8008a2a:	bf44      	itt	mi
 8008a2c:	2220      	movmi	r2, #32
 8008a2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a32:	071a      	lsls	r2, r3, #28
 8008a34:	bf44      	itt	mi
 8008a36:	222b      	movmi	r2, #43	; 0x2b
 8008a38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a3c:	782a      	ldrb	r2, [r5, #0]
 8008a3e:	2a2a      	cmp	r2, #42	; 0x2a
 8008a40:	d015      	beq.n	8008a6e <_svfiprintf_r+0xea>
 8008a42:	9a07      	ldr	r2, [sp, #28]
 8008a44:	462f      	mov	r7, r5
 8008a46:	2000      	movs	r0, #0
 8008a48:	250a      	movs	r5, #10
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a50:	3b30      	subs	r3, #48	; 0x30
 8008a52:	2b09      	cmp	r3, #9
 8008a54:	d94d      	bls.n	8008af2 <_svfiprintf_r+0x16e>
 8008a56:	b1b8      	cbz	r0, 8008a88 <_svfiprintf_r+0x104>
 8008a58:	e00f      	b.n	8008a7a <_svfiprintf_r+0xf6>
 8008a5a:	462f      	mov	r7, r5
 8008a5c:	e7b8      	b.n	80089d0 <_svfiprintf_r+0x4c>
 8008a5e:	4a40      	ldr	r2, [pc, #256]	; (8008b60 <_svfiprintf_r+0x1dc>)
 8008a60:	1a80      	subs	r0, r0, r2
 8008a62:	fa0b f000 	lsl.w	r0, fp, r0
 8008a66:	4318      	orrs	r0, r3
 8008a68:	9004      	str	r0, [sp, #16]
 8008a6a:	463d      	mov	r5, r7
 8008a6c:	e7d3      	b.n	8008a16 <_svfiprintf_r+0x92>
 8008a6e:	9a03      	ldr	r2, [sp, #12]
 8008a70:	1d11      	adds	r1, r2, #4
 8008a72:	6812      	ldr	r2, [r2, #0]
 8008a74:	9103      	str	r1, [sp, #12]
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	db01      	blt.n	8008a7e <_svfiprintf_r+0xfa>
 8008a7a:	9207      	str	r2, [sp, #28]
 8008a7c:	e004      	b.n	8008a88 <_svfiprintf_r+0x104>
 8008a7e:	4252      	negs	r2, r2
 8008a80:	f043 0302 	orr.w	r3, r3, #2
 8008a84:	9207      	str	r2, [sp, #28]
 8008a86:	9304      	str	r3, [sp, #16]
 8008a88:	783b      	ldrb	r3, [r7, #0]
 8008a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a8c:	d10c      	bne.n	8008aa8 <_svfiprintf_r+0x124>
 8008a8e:	787b      	ldrb	r3, [r7, #1]
 8008a90:	2b2a      	cmp	r3, #42	; 0x2a
 8008a92:	d133      	bne.n	8008afc <_svfiprintf_r+0x178>
 8008a94:	9b03      	ldr	r3, [sp, #12]
 8008a96:	1d1a      	adds	r2, r3, #4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	9203      	str	r2, [sp, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	bfb8      	it	lt
 8008aa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aa4:	3702      	adds	r7, #2
 8008aa6:	9305      	str	r3, [sp, #20]
 8008aa8:	4d2e      	ldr	r5, [pc, #184]	; (8008b64 <_svfiprintf_r+0x1e0>)
 8008aaa:	7839      	ldrb	r1, [r7, #0]
 8008aac:	2203      	movs	r2, #3
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f7f7 fb8e 	bl	80001d0 <memchr>
 8008ab4:	b138      	cbz	r0, 8008ac6 <_svfiprintf_r+0x142>
 8008ab6:	2340      	movs	r3, #64	; 0x40
 8008ab8:	1b40      	subs	r0, r0, r5
 8008aba:	fa03 f000 	lsl.w	r0, r3, r0
 8008abe:	9b04      	ldr	r3, [sp, #16]
 8008ac0:	4303      	orrs	r3, r0
 8008ac2:	3701      	adds	r7, #1
 8008ac4:	9304      	str	r3, [sp, #16]
 8008ac6:	7839      	ldrb	r1, [r7, #0]
 8008ac8:	4827      	ldr	r0, [pc, #156]	; (8008b68 <_svfiprintf_r+0x1e4>)
 8008aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ace:	2206      	movs	r2, #6
 8008ad0:	1c7e      	adds	r6, r7, #1
 8008ad2:	f7f7 fb7d 	bl	80001d0 <memchr>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d038      	beq.n	8008b4c <_svfiprintf_r+0x1c8>
 8008ada:	4b24      	ldr	r3, [pc, #144]	; (8008b6c <_svfiprintf_r+0x1e8>)
 8008adc:	bb13      	cbnz	r3, 8008b24 <_svfiprintf_r+0x1a0>
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	3307      	adds	r3, #7
 8008ae2:	f023 0307 	bic.w	r3, r3, #7
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	9303      	str	r3, [sp, #12]
 8008aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aec:	444b      	add	r3, r9
 8008aee:	9309      	str	r3, [sp, #36]	; 0x24
 8008af0:	e76d      	b.n	80089ce <_svfiprintf_r+0x4a>
 8008af2:	fb05 3202 	mla	r2, r5, r2, r3
 8008af6:	2001      	movs	r0, #1
 8008af8:	460f      	mov	r7, r1
 8008afa:	e7a6      	b.n	8008a4a <_svfiprintf_r+0xc6>
 8008afc:	2300      	movs	r3, #0
 8008afe:	3701      	adds	r7, #1
 8008b00:	9305      	str	r3, [sp, #20]
 8008b02:	4619      	mov	r1, r3
 8008b04:	250a      	movs	r5, #10
 8008b06:	4638      	mov	r0, r7
 8008b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b0c:	3a30      	subs	r2, #48	; 0x30
 8008b0e:	2a09      	cmp	r2, #9
 8008b10:	d903      	bls.n	8008b1a <_svfiprintf_r+0x196>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0c8      	beq.n	8008aa8 <_svfiprintf_r+0x124>
 8008b16:	9105      	str	r1, [sp, #20]
 8008b18:	e7c6      	b.n	8008aa8 <_svfiprintf_r+0x124>
 8008b1a:	fb05 2101 	mla	r1, r5, r1, r2
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4607      	mov	r7, r0
 8008b22:	e7f0      	b.n	8008b06 <_svfiprintf_r+0x182>
 8008b24:	ab03      	add	r3, sp, #12
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	4622      	mov	r2, r4
 8008b2a:	4b11      	ldr	r3, [pc, #68]	; (8008b70 <_svfiprintf_r+0x1ec>)
 8008b2c:	a904      	add	r1, sp, #16
 8008b2e:	4640      	mov	r0, r8
 8008b30:	f3af 8000 	nop.w
 8008b34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b38:	4681      	mov	r9, r0
 8008b3a:	d1d6      	bne.n	8008aea <_svfiprintf_r+0x166>
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	065b      	lsls	r3, r3, #25
 8008b40:	f53f af35 	bmi.w	80089ae <_svfiprintf_r+0x2a>
 8008b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b46:	b01d      	add	sp, #116	; 0x74
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	ab03      	add	r3, sp, #12
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	4622      	mov	r2, r4
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <_svfiprintf_r+0x1ec>)
 8008b54:	a904      	add	r1, sp, #16
 8008b56:	4640      	mov	r0, r8
 8008b58:	f000 f882 	bl	8008c60 <_printf_i>
 8008b5c:	e7ea      	b.n	8008b34 <_svfiprintf_r+0x1b0>
 8008b5e:	bf00      	nop
 8008b60:	08009264 	.word	0x08009264
 8008b64:	0800926a 	.word	0x0800926a
 8008b68:	0800926e 	.word	0x0800926e
 8008b6c:	00000000 	.word	0x00000000
 8008b70:	080088d1 	.word	0x080088d1

08008b74 <_printf_common>:
 8008b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b78:	4691      	mov	r9, r2
 8008b7a:	461f      	mov	r7, r3
 8008b7c:	688a      	ldr	r2, [r1, #8]
 8008b7e:	690b      	ldr	r3, [r1, #16]
 8008b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b84:	4293      	cmp	r3, r2
 8008b86:	bfb8      	it	lt
 8008b88:	4613      	movlt	r3, r2
 8008b8a:	f8c9 3000 	str.w	r3, [r9]
 8008b8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b92:	4606      	mov	r6, r0
 8008b94:	460c      	mov	r4, r1
 8008b96:	b112      	cbz	r2, 8008b9e <_printf_common+0x2a>
 8008b98:	3301      	adds	r3, #1
 8008b9a:	f8c9 3000 	str.w	r3, [r9]
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	0699      	lsls	r1, r3, #26
 8008ba2:	bf42      	ittt	mi
 8008ba4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ba8:	3302      	addmi	r3, #2
 8008baa:	f8c9 3000 	strmi.w	r3, [r9]
 8008bae:	6825      	ldr	r5, [r4, #0]
 8008bb0:	f015 0506 	ands.w	r5, r5, #6
 8008bb4:	d107      	bne.n	8008bc6 <_printf_common+0x52>
 8008bb6:	f104 0a19 	add.w	sl, r4, #25
 8008bba:	68e3      	ldr	r3, [r4, #12]
 8008bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8008bc0:	1a9b      	subs	r3, r3, r2
 8008bc2:	42ab      	cmp	r3, r5
 8008bc4:	dc28      	bgt.n	8008c18 <_printf_common+0xa4>
 8008bc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008bca:	6822      	ldr	r2, [r4, #0]
 8008bcc:	3300      	adds	r3, #0
 8008bce:	bf18      	it	ne
 8008bd0:	2301      	movne	r3, #1
 8008bd2:	0692      	lsls	r2, r2, #26
 8008bd4:	d42d      	bmi.n	8008c32 <_printf_common+0xbe>
 8008bd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bda:	4639      	mov	r1, r7
 8008bdc:	4630      	mov	r0, r6
 8008bde:	47c0      	blx	r8
 8008be0:	3001      	adds	r0, #1
 8008be2:	d020      	beq.n	8008c26 <_printf_common+0xb2>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	68e5      	ldr	r5, [r4, #12]
 8008be8:	f8d9 2000 	ldr.w	r2, [r9]
 8008bec:	f003 0306 	and.w	r3, r3, #6
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	bf08      	it	eq
 8008bf4:	1aad      	subeq	r5, r5, r2
 8008bf6:	68a3      	ldr	r3, [r4, #8]
 8008bf8:	6922      	ldr	r2, [r4, #16]
 8008bfa:	bf0c      	ite	eq
 8008bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c00:	2500      	movne	r5, #0
 8008c02:	4293      	cmp	r3, r2
 8008c04:	bfc4      	itt	gt
 8008c06:	1a9b      	subgt	r3, r3, r2
 8008c08:	18ed      	addgt	r5, r5, r3
 8008c0a:	f04f 0900 	mov.w	r9, #0
 8008c0e:	341a      	adds	r4, #26
 8008c10:	454d      	cmp	r5, r9
 8008c12:	d11a      	bne.n	8008c4a <_printf_common+0xd6>
 8008c14:	2000      	movs	r0, #0
 8008c16:	e008      	b.n	8008c2a <_printf_common+0xb6>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	4652      	mov	r2, sl
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	4630      	mov	r0, r6
 8008c20:	47c0      	blx	r8
 8008c22:	3001      	adds	r0, #1
 8008c24:	d103      	bne.n	8008c2e <_printf_common+0xba>
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2e:	3501      	adds	r5, #1
 8008c30:	e7c3      	b.n	8008bba <_printf_common+0x46>
 8008c32:	18e1      	adds	r1, r4, r3
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	2030      	movs	r0, #48	; 0x30
 8008c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c3c:	4422      	add	r2, r4
 8008c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c46:	3302      	adds	r3, #2
 8008c48:	e7c5      	b.n	8008bd6 <_printf_common+0x62>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4639      	mov	r1, r7
 8008c50:	4630      	mov	r0, r6
 8008c52:	47c0      	blx	r8
 8008c54:	3001      	adds	r0, #1
 8008c56:	d0e6      	beq.n	8008c26 <_printf_common+0xb2>
 8008c58:	f109 0901 	add.w	r9, r9, #1
 8008c5c:	e7d8      	b.n	8008c10 <_printf_common+0x9c>
	...

08008c60 <_printf_i>:
 8008c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c68:	460c      	mov	r4, r1
 8008c6a:	7e09      	ldrb	r1, [r1, #24]
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	296e      	cmp	r1, #110	; 0x6e
 8008c70:	4617      	mov	r7, r2
 8008c72:	4606      	mov	r6, r0
 8008c74:	4698      	mov	r8, r3
 8008c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c78:	f000 80b3 	beq.w	8008de2 <_printf_i+0x182>
 8008c7c:	d822      	bhi.n	8008cc4 <_printf_i+0x64>
 8008c7e:	2963      	cmp	r1, #99	; 0x63
 8008c80:	d036      	beq.n	8008cf0 <_printf_i+0x90>
 8008c82:	d80a      	bhi.n	8008c9a <_printf_i+0x3a>
 8008c84:	2900      	cmp	r1, #0
 8008c86:	f000 80b9 	beq.w	8008dfc <_printf_i+0x19c>
 8008c8a:	2958      	cmp	r1, #88	; 0x58
 8008c8c:	f000 8083 	beq.w	8008d96 <_printf_i+0x136>
 8008c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c98:	e032      	b.n	8008d00 <_printf_i+0xa0>
 8008c9a:	2964      	cmp	r1, #100	; 0x64
 8008c9c:	d001      	beq.n	8008ca2 <_printf_i+0x42>
 8008c9e:	2969      	cmp	r1, #105	; 0x69
 8008ca0:	d1f6      	bne.n	8008c90 <_printf_i+0x30>
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	6813      	ldr	r3, [r2, #0]
 8008ca6:	0605      	lsls	r5, r0, #24
 8008ca8:	f103 0104 	add.w	r1, r3, #4
 8008cac:	d52a      	bpl.n	8008d04 <_printf_i+0xa4>
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6011      	str	r1, [r2, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	da03      	bge.n	8008cbe <_printf_i+0x5e>
 8008cb6:	222d      	movs	r2, #45	; 0x2d
 8008cb8:	425b      	negs	r3, r3
 8008cba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008cbe:	486f      	ldr	r0, [pc, #444]	; (8008e7c <_printf_i+0x21c>)
 8008cc0:	220a      	movs	r2, #10
 8008cc2:	e039      	b.n	8008d38 <_printf_i+0xd8>
 8008cc4:	2973      	cmp	r1, #115	; 0x73
 8008cc6:	f000 809d 	beq.w	8008e04 <_printf_i+0x1a4>
 8008cca:	d808      	bhi.n	8008cde <_printf_i+0x7e>
 8008ccc:	296f      	cmp	r1, #111	; 0x6f
 8008cce:	d020      	beq.n	8008d12 <_printf_i+0xb2>
 8008cd0:	2970      	cmp	r1, #112	; 0x70
 8008cd2:	d1dd      	bne.n	8008c90 <_printf_i+0x30>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	f043 0320 	orr.w	r3, r3, #32
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	e003      	b.n	8008ce6 <_printf_i+0x86>
 8008cde:	2975      	cmp	r1, #117	; 0x75
 8008ce0:	d017      	beq.n	8008d12 <_printf_i+0xb2>
 8008ce2:	2978      	cmp	r1, #120	; 0x78
 8008ce4:	d1d4      	bne.n	8008c90 <_printf_i+0x30>
 8008ce6:	2378      	movs	r3, #120	; 0x78
 8008ce8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cec:	4864      	ldr	r0, [pc, #400]	; (8008e80 <_printf_i+0x220>)
 8008cee:	e055      	b.n	8008d9c <_printf_i+0x13c>
 8008cf0:	6813      	ldr	r3, [r2, #0]
 8008cf2:	1d19      	adds	r1, r3, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6011      	str	r1, [r2, #0]
 8008cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d00:	2301      	movs	r3, #1
 8008d02:	e08c      	b.n	8008e1e <_printf_i+0x1be>
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6011      	str	r1, [r2, #0]
 8008d08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d0c:	bf18      	it	ne
 8008d0e:	b21b      	sxthne	r3, r3
 8008d10:	e7cf      	b.n	8008cb2 <_printf_i+0x52>
 8008d12:	6813      	ldr	r3, [r2, #0]
 8008d14:	6825      	ldr	r5, [r4, #0]
 8008d16:	1d18      	adds	r0, r3, #4
 8008d18:	6010      	str	r0, [r2, #0]
 8008d1a:	0628      	lsls	r0, r5, #24
 8008d1c:	d501      	bpl.n	8008d22 <_printf_i+0xc2>
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	e002      	b.n	8008d28 <_printf_i+0xc8>
 8008d22:	0668      	lsls	r0, r5, #25
 8008d24:	d5fb      	bpl.n	8008d1e <_printf_i+0xbe>
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	4854      	ldr	r0, [pc, #336]	; (8008e7c <_printf_i+0x21c>)
 8008d2a:	296f      	cmp	r1, #111	; 0x6f
 8008d2c:	bf14      	ite	ne
 8008d2e:	220a      	movne	r2, #10
 8008d30:	2208      	moveq	r2, #8
 8008d32:	2100      	movs	r1, #0
 8008d34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d38:	6865      	ldr	r5, [r4, #4]
 8008d3a:	60a5      	str	r5, [r4, #8]
 8008d3c:	2d00      	cmp	r5, #0
 8008d3e:	f2c0 8095 	blt.w	8008e6c <_printf_i+0x20c>
 8008d42:	6821      	ldr	r1, [r4, #0]
 8008d44:	f021 0104 	bic.w	r1, r1, #4
 8008d48:	6021      	str	r1, [r4, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d13d      	bne.n	8008dca <_printf_i+0x16a>
 8008d4e:	2d00      	cmp	r5, #0
 8008d50:	f040 808e 	bne.w	8008e70 <_printf_i+0x210>
 8008d54:	4665      	mov	r5, ip
 8008d56:	2a08      	cmp	r2, #8
 8008d58:	d10b      	bne.n	8008d72 <_printf_i+0x112>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	07db      	lsls	r3, r3, #31
 8008d5e:	d508      	bpl.n	8008d72 <_printf_i+0x112>
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	6862      	ldr	r2, [r4, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	bfde      	ittt	le
 8008d68:	2330      	movle	r3, #48	; 0x30
 8008d6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d72:	ebac 0305 	sub.w	r3, ip, r5
 8008d76:	6123      	str	r3, [r4, #16]
 8008d78:	f8cd 8000 	str.w	r8, [sp]
 8008d7c:	463b      	mov	r3, r7
 8008d7e:	aa03      	add	r2, sp, #12
 8008d80:	4621      	mov	r1, r4
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7ff fef6 	bl	8008b74 <_printf_common>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d14d      	bne.n	8008e28 <_printf_i+0x1c8>
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	b005      	add	sp, #20
 8008d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d96:	4839      	ldr	r0, [pc, #228]	; (8008e7c <_printf_i+0x21c>)
 8008d98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d9c:	6813      	ldr	r3, [r2, #0]
 8008d9e:	6821      	ldr	r1, [r4, #0]
 8008da0:	1d1d      	adds	r5, r3, #4
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6015      	str	r5, [r2, #0]
 8008da6:	060a      	lsls	r2, r1, #24
 8008da8:	d50b      	bpl.n	8008dc2 <_printf_i+0x162>
 8008daa:	07ca      	lsls	r2, r1, #31
 8008dac:	bf44      	itt	mi
 8008dae:	f041 0120 	orrmi.w	r1, r1, #32
 8008db2:	6021      	strmi	r1, [r4, #0]
 8008db4:	b91b      	cbnz	r3, 8008dbe <_printf_i+0x15e>
 8008db6:	6822      	ldr	r2, [r4, #0]
 8008db8:	f022 0220 	bic.w	r2, r2, #32
 8008dbc:	6022      	str	r2, [r4, #0]
 8008dbe:	2210      	movs	r2, #16
 8008dc0:	e7b7      	b.n	8008d32 <_printf_i+0xd2>
 8008dc2:	064d      	lsls	r5, r1, #25
 8008dc4:	bf48      	it	mi
 8008dc6:	b29b      	uxthmi	r3, r3
 8008dc8:	e7ef      	b.n	8008daa <_printf_i+0x14a>
 8008dca:	4665      	mov	r5, ip
 8008dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dd0:	fb02 3311 	mls	r3, r2, r1, r3
 8008dd4:	5cc3      	ldrb	r3, [r0, r3]
 8008dd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008dda:	460b      	mov	r3, r1
 8008ddc:	2900      	cmp	r1, #0
 8008dde:	d1f5      	bne.n	8008dcc <_printf_i+0x16c>
 8008de0:	e7b9      	b.n	8008d56 <_printf_i+0xf6>
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	6825      	ldr	r5, [r4, #0]
 8008de6:	6961      	ldr	r1, [r4, #20]
 8008de8:	1d18      	adds	r0, r3, #4
 8008dea:	6010      	str	r0, [r2, #0]
 8008dec:	0628      	lsls	r0, r5, #24
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	d501      	bpl.n	8008df6 <_printf_i+0x196>
 8008df2:	6019      	str	r1, [r3, #0]
 8008df4:	e002      	b.n	8008dfc <_printf_i+0x19c>
 8008df6:	066a      	lsls	r2, r5, #25
 8008df8:	d5fb      	bpl.n	8008df2 <_printf_i+0x192>
 8008dfa:	8019      	strh	r1, [r3, #0]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	4665      	mov	r5, ip
 8008e02:	e7b9      	b.n	8008d78 <_printf_i+0x118>
 8008e04:	6813      	ldr	r3, [r2, #0]
 8008e06:	1d19      	adds	r1, r3, #4
 8008e08:	6011      	str	r1, [r2, #0]
 8008e0a:	681d      	ldr	r5, [r3, #0]
 8008e0c:	6862      	ldr	r2, [r4, #4]
 8008e0e:	2100      	movs	r1, #0
 8008e10:	4628      	mov	r0, r5
 8008e12:	f7f7 f9dd 	bl	80001d0 <memchr>
 8008e16:	b108      	cbz	r0, 8008e1c <_printf_i+0x1bc>
 8008e18:	1b40      	subs	r0, r0, r5
 8008e1a:	6060      	str	r0, [r4, #4]
 8008e1c:	6863      	ldr	r3, [r4, #4]
 8008e1e:	6123      	str	r3, [r4, #16]
 8008e20:	2300      	movs	r3, #0
 8008e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e26:	e7a7      	b.n	8008d78 <_printf_i+0x118>
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	462a      	mov	r2, r5
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4630      	mov	r0, r6
 8008e30:	47c0      	blx	r8
 8008e32:	3001      	adds	r0, #1
 8008e34:	d0aa      	beq.n	8008d8c <_printf_i+0x12c>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	079b      	lsls	r3, r3, #30
 8008e3a:	d413      	bmi.n	8008e64 <_printf_i+0x204>
 8008e3c:	68e0      	ldr	r0, [r4, #12]
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	4298      	cmp	r0, r3
 8008e42:	bfb8      	it	lt
 8008e44:	4618      	movlt	r0, r3
 8008e46:	e7a3      	b.n	8008d90 <_printf_i+0x130>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	464a      	mov	r2, r9
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	4630      	mov	r0, r6
 8008e50:	47c0      	blx	r8
 8008e52:	3001      	adds	r0, #1
 8008e54:	d09a      	beq.n	8008d8c <_printf_i+0x12c>
 8008e56:	3501      	adds	r5, #1
 8008e58:	68e3      	ldr	r3, [r4, #12]
 8008e5a:	9a03      	ldr	r2, [sp, #12]
 8008e5c:	1a9b      	subs	r3, r3, r2
 8008e5e:	42ab      	cmp	r3, r5
 8008e60:	dcf2      	bgt.n	8008e48 <_printf_i+0x1e8>
 8008e62:	e7eb      	b.n	8008e3c <_printf_i+0x1dc>
 8008e64:	2500      	movs	r5, #0
 8008e66:	f104 0919 	add.w	r9, r4, #25
 8008e6a:	e7f5      	b.n	8008e58 <_printf_i+0x1f8>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1ac      	bne.n	8008dca <_printf_i+0x16a>
 8008e70:	7803      	ldrb	r3, [r0, #0]
 8008e72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e7a:	e76c      	b.n	8008d56 <_printf_i+0xf6>
 8008e7c:	08009275 	.word	0x08009275
 8008e80:	08009286 	.word	0x08009286

08008e84 <memmove>:
 8008e84:	4288      	cmp	r0, r1
 8008e86:	b510      	push	{r4, lr}
 8008e88:	eb01 0302 	add.w	r3, r1, r2
 8008e8c:	d807      	bhi.n	8008e9e <memmove+0x1a>
 8008e8e:	1e42      	subs	r2, r0, #1
 8008e90:	4299      	cmp	r1, r3
 8008e92:	d00a      	beq.n	8008eaa <memmove+0x26>
 8008e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008e9c:	e7f8      	b.n	8008e90 <memmove+0xc>
 8008e9e:	4283      	cmp	r3, r0
 8008ea0:	d9f5      	bls.n	8008e8e <memmove+0xa>
 8008ea2:	1881      	adds	r1, r0, r2
 8008ea4:	1ad2      	subs	r2, r2, r3
 8008ea6:	42d3      	cmn	r3, r2
 8008ea8:	d100      	bne.n	8008eac <memmove+0x28>
 8008eaa:	bd10      	pop	{r4, pc}
 8008eac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008eb4:	e7f7      	b.n	8008ea6 <memmove+0x22>

08008eb6 <_realloc_r>:
 8008eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb8:	4607      	mov	r7, r0
 8008eba:	4614      	mov	r4, r2
 8008ebc:	460e      	mov	r6, r1
 8008ebe:	b921      	cbnz	r1, 8008eca <_realloc_r+0x14>
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ec6:	f7ff bc77 	b.w	80087b8 <_malloc_r>
 8008eca:	b922      	cbnz	r2, 8008ed6 <_realloc_r+0x20>
 8008ecc:	f7ff fc26 	bl	800871c <_free_r>
 8008ed0:	4625      	mov	r5, r4
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed6:	f000 f814 	bl	8008f02 <_malloc_usable_size_r>
 8008eda:	42a0      	cmp	r0, r4
 8008edc:	d20f      	bcs.n	8008efe <_realloc_r+0x48>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff fc69 	bl	80087b8 <_malloc_r>
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d0f2      	beq.n	8008ed2 <_realloc_r+0x1c>
 8008eec:	4631      	mov	r1, r6
 8008eee:	4622      	mov	r2, r4
 8008ef0:	f7ff fc00 	bl	80086f4 <memcpy>
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	f7ff fc10 	bl	800871c <_free_r>
 8008efc:	e7e9      	b.n	8008ed2 <_realloc_r+0x1c>
 8008efe:	4635      	mov	r5, r6
 8008f00:	e7e7      	b.n	8008ed2 <_realloc_r+0x1c>

08008f02 <_malloc_usable_size_r>:
 8008f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f06:	1f18      	subs	r0, r3, #4
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	bfbc      	itt	lt
 8008f0c:	580b      	ldrlt	r3, [r1, r0]
 8008f0e:	18c0      	addlt	r0, r0, r3
 8008f10:	4770      	bx	lr
	...

08008f14 <_init>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	bf00      	nop
 8008f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1a:	bc08      	pop	{r3}
 8008f1c:	469e      	mov	lr, r3
 8008f1e:	4770      	bx	lr

08008f20 <_fini>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr
